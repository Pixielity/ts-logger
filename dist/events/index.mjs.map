{"version":3,"sources":["../../src/events/event-dispatcher.ts","../../src/events/message-logged.event.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAUO,IAAM,kBAAN,MAAkD;AAAA,EAAlD,WAAA,GAAA;AACL,IAAA,IAAA,CAAQ,YAA2C,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7C,SAAS,KAAwB,EAAA;AACtC,IAAM,MAAA,SAAA,GAAY,MAAM,OAAQ,EAAA;AAGhC,IAAA,MAAM,cAAiB,GAAA,IAAA,CAAK,SAAU,CAAA,SAAS,KAAK,EAAC;AAGrD,IAAA,KAAA,MAAW,YAAY,cAAgB,EAAA;AACrC,MAAI,IAAA;AACF,QAAA,QAAA,CAAS,KAAK,CAAA;AAAA,eACP,KAAO,EAAA;AACd,QAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,4BAAA,EAA+B,SAAS,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AAClE;AACF;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAA,CAAY,WAAmB,QAA6B,EAAA;AACjE,IAAA,IAAI,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,CAAG,EAAA;AAC9B,MAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,EAAC;AAAA;AAE/B,IAAA,IAAA,CAAK,SAAU,CAAA,SAAS,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA;AAAA;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAA,CAAe,WAAmB,QAA6B,EAAA;AACpE,IAAA,IAAI,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,CAAG,EAAA;AAC9B,MAAA;AAAA;AAEF,IAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,CAAE,MAAO,CAAA,CAAC,CAAM,KAAA,CAAA,KAAM,QAAQ,CAAA;AAAA;AACpF;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,SAAkC,EAAA;AACpD,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,IAAK,EAAC;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,SAA4B,EAAA;AAC9C,IAAO,OAAA,CAAC,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,KAAK,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,CAAE,MAAS,GAAA,CAAA;AAAA;AAC3E;AAAA;AAAA;AAAA;AAAA,EAMO,eAAe,SAAyB,EAAA;AAC7C,IAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,EAAC;AAAA;AAEjC;AAtEa,eAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW;AAAA,CACC,EAAA,eAAA,CAAA;;;ACFN,IAAM,qBAAN,MAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBxD,YACE,KACA,EAAA,OAAA,EACA,OACA,EAAA,KAAA,EACA,UAAU,SACV,EAAA;AAtBF,IAAA,IAAA,CAAQ,IAAO,GAAA,gBAAA;AACf,IAAQ,IAAA,CAAA,SAAA,uBAAsB,IAAK,EAAA;AAsBjC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAA+B,GAAA;AACpC,IAAO,OAAA;AAAA,MACL,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,SAAS,IAAK,CAAA;AAAA,KAChB;AAAA;AACF;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,QAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,QAA+B,GAAA;AACpC,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AAEhB","file":"index.mjs","sourcesContent":["import { injectable } from 'inversify'\nimport type { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\nimport type { ILogEvent } from '../interfaces/events/log-event.interface'\nimport type { LogListener } from '../types/types'\n\n/**\n * EventDispatcher is an implementation of the IEventDispatcher interface.\n * It provides methods for dispatching events and managing event listeners.\n */\n@injectable()\nexport class EventDispatcher implements IEventDispatcher {\n  private listeners: Record<string, LogListener[]> = {}\n\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  public dispatch(event: ILogEvent): void {\n    const eventName = event.getName()\n\n    // Get listeners for the event\n    const eventListeners = this.listeners[eventName] || []\n\n    // Call each listener with the event\n    for (const listener of eventListeners) {\n      try {\n        listener(event)\n      } catch (error) {\n        console.error(`Error in event listener for ${eventName}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public addListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = []\n    }\n    this.listeners[eventName].push(listener)\n  }\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public removeListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      return\n    }\n    this.listeners[eventName] = this.listeners[eventName].filter((l) => l !== listener)\n  }\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  public getListeners(eventName: string): LogListener[] {\n    return this.listeners[eventName] || []\n  }\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  public hasListeners(eventName: string): boolean {\n    return !!this.listeners[eventName] && this.listeners[eventName].length > 0\n  }\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  public clearListeners(eventName: string): void {\n    this.listeners[eventName] = []\n  }\n}\n","import type { IMessageLogged } from '../interfaces/events/message-logged.interface'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport type { LogContext } from '../types/types'\n\n/**\n * MessageLoggedEvent is an implementation of the IMessageLogged interface.\n * It represents an event that is dispatched when a message is logged.\n */\nexport class MessageLoggedEvent implements IMessageLogged {\n  private name = 'message.logged'\n  private timestamp: Date = new Date()\n  private level: LogLevel\n  private message: string\n  private context: LogContext\n  private stack?: string\n  private channel: string\n\n  /**\n   * Create a new MessageLoggedEvent instance\n   * @param level The log level\n   * @param message The log message\n   * @param context The log context\n   * @param stack The stack trace\n   * @param channel The channel name\n   */\n  constructor(\n    level: LogLevel,\n    message: string,\n    context: LogContext,\n    stack?: string,\n    channel = 'default',\n  ) {\n    this.level = level\n    this.message = message\n    this.context = context\n    this.stack = stack\n    this.channel = channel\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      level: this.level,\n      message: this.message,\n      context: this.context,\n      stack: this.stack,\n      channel: this.channel,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the log level\n   */\n  public getLevel(): LogLevel {\n    return this.level\n  }\n\n  /**\n   * Get the log message\n   */\n  public getMessage(): string {\n    return this.message\n  }\n\n  /**\n   * Get the log context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the stack trace\n   */\n  public getStack(): string | undefined {\n    return this.stack\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n}\n"]}
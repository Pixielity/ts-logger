{"version":3,"sources":["../../src/events/event-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAWO,IAAM,kBAAN,MAAkD;AAAA,EAAlD,WAAA,GAAA;AACL,IAAA,IAAA,CAAQ,YAA2C,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7C,SAAS,KAAwB,EAAA;AACtC,IAAM,MAAA,SAAA,GAAY,MAAM,OAAQ,EAAA;AAGhC,IAAA,MAAM,cAAiB,GAAA,IAAA,CAAK,SAAU,CAAA,SAAS,KAAK,EAAC;AAGrD,IAAA,KAAA,MAAW,YAAY,cAAgB,EAAA;AACrC,MAAI,IAAA;AACF,QAAA,QAAA,CAAS,KAAK,CAAA;AAAA,eACP,KAAO,EAAA;AACd,QAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,4BAAA,EAA+B,SAAS,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA;AAClE;AACF;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAA,CAAY,WAAmB,QAA6B,EAAA;AACjE,IAAA,IAAI,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,CAAG,EAAA;AAC9B,MAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,EAAC;AAAA;AAE/B,IAAA,IAAA,CAAK,SAAU,CAAA,SAAS,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA;AAAA;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAA,CAAe,WAAmB,QAA6B,EAAA;AACpE,IAAA,IAAI,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,CAAG,EAAA;AAC9B,MAAA;AAAA;AAEF,IAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,CAAE,MAAO,CAAA,CAAC,CAAM,KAAA,CAAA,KAAM,QAAQ,CAAA;AAAA;AACpF;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,SAAkC,EAAA;AACpD,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,IAAK,EAAC;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,SAA4B,EAAA;AAC9C,IAAO,OAAA,CAAC,CAAC,IAAA,CAAK,SAAU,CAAA,SAAS,KAAK,IAAK,CAAA,SAAA,CAAU,SAAS,CAAA,CAAE,MAAS,GAAA,CAAA;AAAA;AAC3E;AAAA;AAAA;AAAA;AAAA,EAMO,eAAe,SAAyB,EAAA;AAC7C,IAAK,IAAA,CAAA,SAAA,CAAU,SAAS,CAAA,GAAI,EAAC;AAAA;AAEjC;AAtEa,eAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW;AAAA,CACC,EAAA,eAAA,CAAA","file":"event-dispatcher.mjs","sourcesContent":["import { injectable } from 'inversify'\n\nimport type { LogListener } from '../types/log-listener.type'\nimport type { ILogEvent } from '../interfaces/events/log-event.interface'\nimport type { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\n\n/**\n * EventDispatcher is an implementation of the IEventDispatcher interface.\n * It provides methods for dispatching events and managing event listeners.\n */\n@injectable()\nexport class EventDispatcher implements IEventDispatcher {\n  private listeners: Record<string, LogListener[]> = {}\n\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  public dispatch(event: ILogEvent): void {\n    const eventName = event.getName()\n\n    // Get listeners for the event\n    const eventListeners = this.listeners[eventName] || []\n\n    // Call each listener with the event\n    for (const listener of eventListeners) {\n      try {\n        listener(event)\n      } catch (error) {\n        console.error(`Error in event listener for ${eventName}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public addListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = []\n    }\n    this.listeners[eventName].push(listener)\n  }\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public removeListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      return\n    }\n    this.listeners[eventName] = this.listeners[eventName].filter((l) => l !== listener)\n  }\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  public getListeners(eventName: string): LogListener[] {\n    return this.listeners[eventName] || []\n  }\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  public hasListeners(eventName: string): boolean {\n    return !!this.listeners[eventName] && this.listeners[eventName].length > 0\n  }\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  public clearListeners(eventName: string): void {\n    this.listeners[eventName] = []\n  }\n}\n"]}
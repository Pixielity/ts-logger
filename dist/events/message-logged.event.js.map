{"version":3,"sources":["../../src/events/message-logged.event.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQO,IAAM,qBAAN,MAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBxD,YACE,KACA,EAAA,OAAA,EACA,OACA,EAAA,KAAA,EACA,UAAU,SACV,EAAA;AAtBF,IAAA,IAAA,CAAQ,IAAO,GAAA,gBAAA;AACf,IAAQ,IAAA,CAAA,SAAA,uBAAsB,IAAK,EAAA;AAsBjC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAA+B,GAAA;AACpC,IAAO,OAAA;AAAA,MACL,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,SAAS,IAAK,CAAA;AAAA,KAChB;AAAA;AACF;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,QAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,QAA+B,GAAA;AACpC,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AAEhB","file":"message-logged.event.js","sourcesContent":["import type { LogLevel } from '../enums/log-level.enum'\nimport type { LogContext } from '../types/log-context.type'\nimport type { IMessageLogged } from '../interfaces/events/message-logged.interface'\n\n/**\n * MessageLoggedEvent is an implementation of the IMessageLogged interface.\n * It represents an event that is dispatched when a message is logged.\n */\nexport class MessageLoggedEvent implements IMessageLogged {\n  private name = 'message.logged'\n  private timestamp: Date = new Date()\n  private level: LogLevel\n  private message: string\n  private context: LogContext\n  private stack?: string\n  private channel: string\n\n  /**\n   * Create a new MessageLoggedEvent instance\n   * @param level The log level\n   * @param message The log message\n   * @param context The log context\n   * @param stack The stack trace\n   * @param channel The channel name\n   */\n  constructor(\n    level: LogLevel,\n    message: string,\n    context: LogContext,\n    stack?: string,\n    channel = 'default',\n  ) {\n    this.level = level\n    this.message = message\n    this.context = context\n    this.stack = stack\n    this.channel = channel\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      level: this.level,\n      message: this.message,\n      context: this.context,\n      stack: this.stack,\n      channel: this.channel,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the log level\n   */\n  public getLevel(): LogLevel {\n    return this.level\n  }\n\n  /**\n   * Get the log message\n   */\n  public getMessage(): string {\n    return this.message\n  }\n\n  /**\n   * Get the log context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the stack trace\n   */\n  public getStack(): string | undefined {\n    return this.stack\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n}\n"]}
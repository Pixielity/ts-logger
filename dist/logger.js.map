{"version":3,"sources":["../src/events/message-logged.event.ts","../src/interfaces/events/event-dispatcher.interface.ts","../src/logger.ts"],"names":["IEventDispatcher","Logger","injectable","inject"],"mappings":"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","file":"logger.js","sourcesContent":["import type { LogLevel } from '../enums/log-level.enum'\nimport type { LogContext } from '../types/log-context.type'\nimport type { IMessageLogged } from '../interfaces/events/message-logged.interface'\n\n/**\n * MessageLoggedEvent is an implementation of the IMessageLogged interface.\n * It represents an event that is dispatched when a message is logged.\n */\nexport class MessageLoggedEvent implements IMessageLogged {\n  private name = 'message.logged'\n  private timestamp: Date = new Date()\n  private level: LogLevel\n  private message: string\n  private context: LogContext\n  private stack?: string\n  private channel: string\n\n  /**\n   * Create a new MessageLoggedEvent instance\n   * @param level The log level\n   * @param message The log message\n   * @param context The log context\n   * @param stack The stack trace\n   * @param channel The channel name\n   */\n  constructor(\n    level: LogLevel,\n    message: string,\n    context: LogContext,\n    stack?: string,\n    channel = 'default',\n  ) {\n    this.level = level\n    this.message = message\n    this.context = context\n    this.stack = stack\n    this.channel = channel\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      level: this.level,\n      message: this.message,\n      context: this.context,\n      stack: this.stack,\n      channel: this.channel,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the log level\n   */\n  public getLevel(): LogLevel {\n    return this.level\n  }\n\n  /**\n   * Get the log message\n   */\n  public getMessage(): string {\n    return this.message\n  }\n\n  /**\n   * Get the log context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the stack trace\n   */\n  public getStack(): string | undefined {\n    return this.stack\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogListener } from '../../types/log-listener.type'\n\n/**\n * IEventDispatcher defines the contract for event dispatchers.\n * It provides methods for dispatching events and managing event listeners.\n */\nexport interface IEventDispatcher {\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  dispatch(event: ILogEvent): void\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  addListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  removeListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  getListeners(eventName: string): LogListener[]\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  hasListeners(eventName: string): boolean\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  clearListeners(eventName: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IEventDispatcher {\n  /**\n   * Symbol for injecting the event dispatcher\n   */\n  export const $ = Symbol.for('IEventDispatcher')\n}\n","import { inject, injectable } from 'inversify'\n\nimport { LogLevel } from './enums/log-level.enum'\nimport type { LogContext } from './types/log-context.type'\nimport { MessageLoggedEvent } from './events/message-logged.event'\nimport { IEventDispatcher } from './interfaces/events/event-dispatcher.interface'\nimport type { ILoggingService } from './interfaces/logging/logging-service.interface'\nimport type { ILoggingChannel } from './interfaces/channels/logging-channel.interface'\n\n/**\n * Logger is the main implementation of the ILoggingService interface.\n * It provides methods for logging messages at different levels and with contextual data.\n */\n@injectable()\nexport class Logger implements ILoggingService {\n  private _channel: ILoggingChannel\n  private _context: LogContext = {}\n  private _eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new Logger instance\n   * @param channel The logging channel to use\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(\n    injectableChannel: ILoggingChannel,\n    @inject(IEventDispatcher.$) eventDispatcher: IEventDispatcher,\n  ) {\n    console.log('=======>>>>>>>>>', injectableChannel)\n    this._channel = injectableChannel\n    this._eventDispatcher = eventDispatcher\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    // Merge the context with the logger's context\n    const mergedContext = { ...this._context, ...context }\n\n    // Log the message to the channel\n    this._channel.log(level, message, mergedContext)\n\n    // Dispatch a MessageLogged event\n    this._eventDispatcher.dispatch(\n      new MessageLoggedEvent(\n        level,\n        message,\n        mergedContext,\n        undefined, // Stack trace will be added by the handler if needed\n        this._channel.getName(),\n      ),\n    )\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public debug(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.DEBUG, message, context)\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public info(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.INFO, message, context)\n  }\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public notice(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.NOTICE, message, context)\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public warning(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.WARNING, message, context)\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public error(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ERROR, message, context)\n  }\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public critical(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.CRITICAL, message, context)\n  }\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public alert(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ALERT, message, context)\n  }\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public emergency(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.EMERGENCY, message, context)\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingService {\n    this._context = { ...this._context, ...context }\n    return this\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingService {\n    const newContext: LogContext = { ...this._context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this._context = newContext\n    return this\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this._channel.shareContext(context)\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this._channel.flushSharedContext()\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  public channel(channel: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.channel() instead.')\n  }\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  public stack(stack: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.stack() instead.')\n  }\n}\n"]}
{"version":3,"sources":["../../src/constants/constants.ts","../../src/formatters/simple-formatter.ts"],"names":[],"mappings":"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","file":"simple-formatter.mjs","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: 'üö®',\n  [LogLevel.ALERT]: 'üîî',\n  [LogLevel.CRITICAL]: '‚ùó',\n  [LogLevel.ERROR]: 'üî¥',\n  [LogLevel.WARNING]: '‚ö†Ô∏è',\n  [LogLevel.NOTICE]: 'üìù',\n  [LogLevel.INFO]: '‚úÖ',\n  [LogLevel.DEBUG]: 'üõ†Ô∏è',\n}\n\n/**\n * LogLevelColor maps LogLevel enum values to CSS color values for visual representation.\n */\nexport const LogLevelColor: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '#FF0000', // Red\n  [LogLevel.ALERT]: '#FF4500', // OrangeRed\n  [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n  [LogLevel.ERROR]: '#FFA500', // Orange\n  [LogLevel.WARNING]: '#FFD700', // Gold\n  [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n  [LogLevel.INFO]: '#32CD32', // LimeGreen\n  [LogLevel.DEBUG]: '#808080', // Gray\n}\n","import { injectable } from 'inversify'\nimport type { ISimpleFormatter } from '../interfaces/formatters/simple-formatter.interface'\nimport type { LogRecord } from '../types/types'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport { LogLevelColor, LogLevelEmoji } from '../constants'\n\n/**\n * SimpleFormatter is an implementation of the ISimpleFormatter interface.\n * It formats log records in a simple format.\n */\n@injectable()\nexport class SimpleFormatter implements ISimpleFormatter {\n  private name = FormatterType.SIMPLE\n  private emojiSupport = true\n  private colorSupport = true\n\n  /**\n   * Create a new SimpleFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { emojiSupport?: boolean; colorSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const level = record.level\n    const message = record.message\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Format the line\n    let line = `[${record.levelName}] ${formattedMessage}`\n\n    // Add color if enabled\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      line = `%c${line}`\n      // Note: In a browser environment, this would be used with console.log\n      console.log(line, `color: ${color}`)\n    }\n\n    return line\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    return records.map((record) => this.format(record)).join('\\n')\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n"]}
{"version":3,"sources":["../../src/constants/constants.ts","../../src/utils/date.ts","../../src/formatters/line-formatter.ts"],"names":[],"mappings":"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","file":"line-formatter.mjs","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: 'üö®',\n  [LogLevel.ALERT]: 'üîî',\n  [LogLevel.CRITICAL]: '‚ùó',\n  [LogLevel.ERROR]: 'üî¥',\n  [LogLevel.WARNING]: '‚ö†Ô∏è',\n  [LogLevel.NOTICE]: 'üìù',\n  [LogLevel.INFO]: '‚úÖ',\n  [LogLevel.DEBUG]: 'üõ†Ô∏è',\n}\n\n/**\n * LogLevelColor maps LogLevel enum values to CSS color values for visual representation.\n */\nexport const LogLevelColor: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '#FF0000', // Red\n  [LogLevel.ALERT]: '#FF4500', // OrangeRed\n  [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n  [LogLevel.ERROR]: '#FFA500', // Orange\n  [LogLevel.WARNING]: '#FFD700', // Gold\n  [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n  [LogLevel.INFO]: '#32CD32', // LimeGreen\n  [LogLevel.DEBUG]: '#808080', // Gray\n}\n","import { DateFormat } from '../enums'\n\n/**\n * Get the date format string for a DateFormat enum value\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function getDateFormatString(format: DateFormat, customFormat?: string): string {\n  switch (format) {\n    case DateFormat.ISO8601:\n      return 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n    case DateFormat.RFC3339:\n      return 'YYYY-MM-DDTHH:mm:ssZ'\n    case DateFormat.RFC2822:\n      return 'ddd, DD MMM YYYY HH:mm:ss ZZ'\n    case DateFormat.UNIX:\n      return 'X'\n    case DateFormat.YYYY_MM_DD:\n      return 'YYYY-MM-DD'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS:\n      return 'YYYY-MM-DD HH:mm:ss'\n    case DateFormat.DD_MM_YYYY:\n      return 'DD/MM/YYYY'\n    case DateFormat.MM_DD_YYYY:\n      return 'MM/DD/YYYY'\n    case DateFormat.HH_MM_SS:\n      return 'HH:mm:ss'\n    case DateFormat.CUSTOM:\n      return customFormat || 'YYYY-MM-DD HH:mm:ss'\n    default:\n      return 'YYYY-MM-DD HH:mm:ss'\n  }\n}\n\n/**\n * Format a date according to a DateFormat enum value\n * @param date The date to format\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function formatDate(date: Date, format: DateFormat, customFormat?: string): string {\n  const formatString = getDateFormatString(format, customFormat)\n\n  // Simple date formatting based on the format string\n  // In a real implementation, you might use a library like date-fns\n  const year = date.getFullYear()\n  const month = String(date.getMonth() + 1).padStart(2, '0')\n  const day = String(date.getDate()).padStart(2, '0')\n  const hours = String(date.getHours()).padStart(2, '0')\n  const minutes = String(date.getMinutes()).padStart(2, '0')\n  const seconds = String(date.getSeconds()).padStart(2, '0')\n  const milliseconds = String(date.getMilliseconds()).padStart(3, '0')\n\n  // Handle special cases\n  if (format === DateFormat.UNIX) {\n    return Math.floor(date.getTime() / 1000).toString()\n  }\n\n  // Replace tokens in the format string\n  return formatString\n    .replace('YYYY', String(year))\n    .replace('MM', month)\n    .replace('DD', day)\n    .replace('HH', hours)\n    .replace('mm', minutes)\n    .replace('ss', seconds)\n    .replace('SSS', milliseconds)\n}\n","import { injectable } from 'inversify'\nimport type { ILineFormatter } from '../interfaces/formatters/line-formatter.interface'\nimport type { LogRecord } from '../types/types'\nimport { LogLevelEmoji, LogLevelColor } from '../constants/constants'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport { formatDate } from '../utils/date'\nimport { DateFormat } from '../enums/date-format.enum'\n\n/**\n * LineFormatter is an implementation of the ILineFormatter interface.\n * It formats log records as lines of text.\n */\n@injectable()\nexport class LineFormatter implements ILineFormatter {\n  private name = FormatterType.LINE\n  private dateFormat = DateFormat.YYYY_MM_DD_HH_MM_SS\n  private customDateFormat?: string\n  private emojiSupport = true\n  private colorSupport = true\n  private stackTraceFormatting = true\n\n  /**\n   * Create a new LineFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(\n    options: {\n      dateFormat?: DateFormat\n      customDateFormat?: string\n      emojiSupport?: boolean\n      colorSupport?: boolean\n      stackTraceFormatting?: boolean\n    } = {},\n  ) {\n    if (options.dateFormat !== undefined) {\n      this.dateFormat = options.dateFormat\n    }\n    if (options.customDateFormat !== undefined) {\n      this.customDateFormat = options.customDateFormat\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n    if (options.stackTraceFormatting !== undefined) {\n      this.stackTraceFormatting = options.stackTraceFormatting\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const level = record.level\n    const levelName = record.levelName\n    const message = record.message\n    const context = record.context\n    const datetime = this.formatDate(record.datetime)\n    const stack = record.stack\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      if (level in LogLevelEmoji) {\n        formattedMessage = `${\n          LogLevelEmoji[level as keyof typeof LogLevelEmoji]\n        } ${formattedMessage}`\n      }\n    }\n\n    // Format the line\n    let line = `[${datetime}] [${levelName}] ${formattedMessage}`\n\n    // Add context if it's not empty\n    if (Object.keys(context).length > 0) {\n      line += ` ${JSON.stringify(context)}`\n    }\n\n    // Add stack trace if it exists and stack trace formatting is enabled\n    if (stack && this.stackTraceFormatting) {\n      line += `\\n${stack}`\n    }\n\n    // Add color if enabled\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      line = `%c${line}`\n      // Note: In a browser environment, this would be used with console.log\n      // console.log(line, `color: ${color}`)\n    }\n\n    return line\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    return records.map((record) => this.format(record)).join('\\n')\n  }\n\n  /**\n   * Format a date according to the date format\n   * @param date The date to format\n   */\n  private formatDate(date: Date): string {\n    return formatDate(date, this.dateFormat, this.customDateFormat)\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the date format\n   */\n  public getDateFormat(): string {\n    return this.dateFormat === DateFormat.CUSTOM && this.customDateFormat\n      ? this.customDateFormat\n      : this.dateFormat\n  }\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  public setDateFormat(format: DateFormat | string): void {\n    if (typeof format === 'string') {\n      this.dateFormat = DateFormat.CUSTOM\n      this.customDateFormat = format\n    } else {\n      this.dateFormat = format\n      this.customDateFormat = undefined\n    }\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  public setStackTraceFormatting(enabled: boolean): void {\n    this.stackTraceFormatting = enabled\n  }\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  public isStackTraceFormattingEnabled(): boolean {\n    return this.stackTraceFormatting\n  }\n}\n"]}
{"version":3,"sources":["../../src/formatters/json-formatter.ts"],"names":[],"mappings":"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","file":"json-formatter.mjs","sourcesContent":["import { injectable } from 'inversify'\nimport type { IJsonFormatter } from '../interfaces/formatters/json-formatter.interface'\nimport type { LogRecord } from '../types/types'\nimport { FormatterType } from '../enums/formatter-type.enum'\n\n/**\n * JsonFormatter is an implementation of the IJsonFormatter interface.\n * It formats log records as JSON.\n */\n@injectable()\nexport class JsonFormatter implements IJsonFormatter {\n  private name = FormatterType.JSON\n  private prettyPrint = false\n  private stackTraceFormatting = true\n\n  /**\n   * Create a new JsonFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { prettyPrint?: boolean; stackTraceFormatting?: boolean } = {}) {\n    if (options.prettyPrint !== undefined) {\n      this.prettyPrint = options.prettyPrint\n    }\n    if (options.stackTraceFormatting !== undefined) {\n      this.stackTraceFormatting = options.stackTraceFormatting\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const jsonRecord: Record<string, any> = {\n      level: record.level,\n      levelName: record.levelName,\n      message: record.message,\n      context: record.context,\n      datetime: record.datetime.toISOString(),\n    }\n\n    // Add stack trace if it exists and stack trace formatting is enabled\n    if (record.stack && this.stackTraceFormatting) {\n      jsonRecord.stack = record.stack\n    }\n\n    // Add extra fields if they exist\n    if (record.extra) {\n      jsonRecord.extra = record.extra\n    }\n\n    // Convert to JSON\n    return JSON.stringify(jsonRecord, null, this.prettyPrint ? 2 : 0)\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    const jsonRecords = records.map((record) => {\n      const jsonRecord: Record<string, any> = {\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: record.context,\n        datetime: record.datetime.toISOString(),\n      }\n\n      // Add stack trace if it exists and stack trace formatting is enabled\n      if (record.stack && this.stackTraceFormatting) {\n        jsonRecord.stack = record.stack\n      }\n\n      // Add extra fields if they exist\n      if (record.extra) {\n        jsonRecord.extra = record.extra\n      }\n\n      return jsonRecord\n    })\n\n    // Convert to JSON\n    return JSON.stringify(jsonRecords, null, this.prettyPrint ? 2 : 0)\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  public setPrettyPrint(enabled: boolean): void {\n    this.prettyPrint = enabled\n  }\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  public isPrettyPrintEnabled(): boolean {\n    return this.prettyPrint\n  }\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  public setStackTraceFormatting(enabled: boolean): void {\n    this.stackTraceFormatting = enabled\n  }\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  public isStackTraceFormattingEnabled(): boolean {\n    return this.stackTraceFormatting\n  }\n}\n"]}
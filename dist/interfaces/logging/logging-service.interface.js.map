{"version":3,"sources":["../../../src/interfaces/logging/logging-service.interface.ts"],"names":["ILoggingService"],"mappings":";;;;;;;;;;;;;AA+GiBA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA","file":"logging-service.interface.js","sourcesContent":["import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/types'\n\n/**\n * ILoggingService defines the contract for logging services.\n * It provides methods for logging messages at different levels and with contextual data.\n */\nexport interface ILoggingService {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  debug(message: string, context?: LogContext): void\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  info(message: string, context?: LogContext): void\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  notice(message: string, context?: LogContext): void\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  warning(message: string, context?: LogContext): void\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  error(message: string, context?: LogContext): void\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  critical(message: string, context?: LogContext): void\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  alert(message: string, context?: LogContext): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingService\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingService\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  channel(channel: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  stack(stack: string): ILoggingService\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingService {\n  /**\n   * Symbol for injecting the logging service\n   */\n  export const $ = Symbol.for('ILoggingService')\n}\n"]}
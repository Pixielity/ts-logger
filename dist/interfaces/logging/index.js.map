{"version":3,"sources":["../../../src/interfaces/logging/manager.interface.ts","../../../src/interfaces/logging/logging-service.interface.ts"],"names":["ILogManager","ILoggingService"],"mappings":";;;;;;;;;;;;;AA4GiBA;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAAA,mBAAA,KAAAA,mBAAA,GAAA,EAAA,CAAA,CAAA;;;ACGAC;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type {\n  LogContext,\n  ChannelOptions,\n  HandlerOptions,\n  FormatterOptions,\n  ProcessorOptions,\n} from '../../types'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { ILoggingService } from './logging-service.interface'\nimport type { LogChannelType } from '../../enums/log-channel-type.enum'\n\n/**\n * ILogManager defines the contract for log managers.\n * It provides methods for managing channels, drivers, and extending the logging system.\n */\nexport interface ILogManager extends ILoggingService {\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  channel(name?: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param name The stack name\n   */\n  stack(name: string): ILoggingService\n\n  /**\n   * Get the driver with the specified name\n   * @param name The driver name\n   */\n  driver(name?: string): ILoggingService\n\n  /**\n   * Extend the logging system with a custom driver creator\n   * @param driver The driver name\n   * @param callback The callback function that creates the driver\n   */\n  extend(driver: string, callback: (config: any) => ILoggingService): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context: LogContext): void\n\n  /**\n   * Get all registered channels\n   */\n  getChannels(): Record<string, ILoggingService>\n\n  /**\n   * Get the default channel name\n   */\n  getDefaultChannel(): string\n\n  /**\n   * Set the default channel name\n   * @param name The default channel name\n   */\n  setDefaultChannel(name: string): void\n\n  /**\n   * Create a channel with the specified configuration\n   * @param name The channel name\n   * @param type The channel type\n   * @param options The channel options\n   */\n  createChannel(name: string, type: LogChannelType, options?: ChannelOptions): ILoggingService\n\n  /**\n   * Create a handler with the specified configuration\n   * @param type The handler type\n   * @param options The handler options\n   */\n  createHandler(type: string, options?: HandlerOptions): any\n\n  /**\n   * Create a formatter with the specified configuration\n   * @param type The formatter type\n   * @param options The formatter options\n   */\n  createFormatter(type: string, options?: FormatterOptions): any\n\n  /**\n   * Create a processor with the specified configuration\n   * @param type The processor type\n   * @param options The processor options\n   */\n  createProcessor(type: string, options?: ProcessorOptions): any\n\n  /**\n   * Get the minimum log level\n   */\n  getMinimumLevel(): LogLevel\n\n  /**\n   * Set the minimum log level\n   * @param level The minimum log level\n   */\n  setMinimumLevel(level: LogLevel): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogManager {\n  /**\n   * Symbol for injecting the log manager\n   */\n  export const $ = Symbol.for('ILogManager')\n}\n","import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ILoggingService defines the contract for logging services.\n * It provides methods for logging messages at different levels and with contextual data.\n */\nexport interface ILoggingService {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  debug(message: string, context?: LogContext): void\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  info(message: string, context?: LogContext): void\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  notice(message: string, context?: LogContext): void\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  warning(message: string, context?: LogContext): void\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  error(message: string, context?: LogContext): void\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  critical(message: string, context?: LogContext): void\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  alert(message: string, context?: LogContext): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingService\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingService\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  channel(channel: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  stack(stack: string): ILoggingService\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingService {\n  /**\n   * Symbol for injecting the logging service\n   */\n  export const $ = Symbol.for('ILoggingService')\n}\n"]}
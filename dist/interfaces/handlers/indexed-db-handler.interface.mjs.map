{"version":3,"sources":["../../../src/interfaces/handlers/indexed-db-handler.interface.ts"],"names":["IIndexedDBHandler"],"mappings":";;;;;;;;;;;AAsDiB,IAAA;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAA,iBAAA,KAAA,iBAAA,GAAA,EAAA,CAAA,CAAA","file":"indexed-db-handler.interface.mjs","sourcesContent":["import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IIndexedDBHandler defines the contract for IndexedDB handlers.\n * It provides methods for handling log records in the browser's IndexedDB.\n */\nexport interface IIndexedDBHandler extends ILogHandler {\n  /**\n   * Get the database name\n   */\n  getDatabaseName(): string\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  setDatabaseName(name: string): void\n\n  /**\n   * Get the table name\n   */\n  getTableName(): string\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  setTableName(name: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): Promise<any[]>\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): Promise<void>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IIndexedDBHandler {\n  /**\n   * Symbol for injecting the IndexedDB handler\n   */\n  export const $ = Symbol.for('IIndexedDBHandler')\n}\n"]}
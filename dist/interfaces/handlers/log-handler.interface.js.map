{"version":3,"sources":["../../../src/interfaces/handlers/log-handler.interface.ts"],"names":["ILogHandler"],"mappings":";;;;;;;;;;;;;AAuCiBA;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAAA,mBAAA,KAAAA,mBAAA,GAAA,EAAA,CAAA,CAAA","file":"log-handler.interface.js","sourcesContent":["import type { LogRecord } from '../../types/types'\n\n/**\n * ILogHandler defines the contract for log handlers.\n * It provides methods for handling log records.\n */\nexport interface ILogHandler {\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  handle(record: LogRecord): void\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  isHandling(record: LogRecord): boolean\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  setNext(handler: ILogHandler): ILogHandler\n\n  /**\n   * Get the next handler in the chain\n   */\n  getNext(): ILogHandler | null\n\n  /**\n   * Get the handler name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogHandler {\n  /**\n   * Symbol for injecting the log handler\n   */\n  export const $ = Symbol.for('ILogHandler')\n}\n"]}
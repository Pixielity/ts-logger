{"version":3,"sources":["../../../src/interfaces/handlers/console-handler.interface.ts","../../../src/interfaces/handlers/error-log-handler.interface.ts","../../../src/interfaces/handlers/fingers-crossed-handler.interface.ts","../../../src/interfaces/handlers/http-handler.interface.ts","../../../src/interfaces/handlers/indexed-db-handler.interface.ts","../../../src/interfaces/handlers/local-storage-handler.interface.ts","../../../src/interfaces/handlers/log-handler.interface.ts","../../../src/interfaces/handlers/slack-webhook-handler.interface.ts","../../../src/interfaces/handlers/syslog-handler.interface.ts"],"names":["IConsoleHandler","IErrorLogHandler","IFingersCrossedHandler","IHttpHandler","IIndexedDBHandler","ILocalStorageHandler","ILogHandler","ISlackWebhookHandler","ISyslogHandler"],"mappings":";;;;;;;;;;;AAiCiB,IAAA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAA,eAAA,KAAA,eAAA,GAAA,EAAA,CAAA,CAAA;;;ACXA,IAAA;AAAA,CAAV,CAAUC,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAA,gBAAA,KAAA,gBAAA,GAAA,EAAA,CAAA,CAAA;;;ACsBA,IAAA;AAAA,CAAV,CAAUC,uBAAV,KAAA;AAIE,EAAMA,uBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,wBAAwB,CAAA;AAAA,CAJrC,EAAA,sBAAA,KAAA,sBAAA,GAAA,EAAA,CAAA,CAAA;;;ACWA,IAAA;AAAA,CAAV,CAAUC,aAAV,KAAA;AAIE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAJ3B,EAAA,YAAA,KAAA,YAAA,GAAA,EAAA,CAAA,CAAA;;;ACDA,IAAA;AAAA,CAAV,CAAUC,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAA,iBAAA,KAAA,iBAAA,GAAA,EAAA,CAAA,CAAA;;;ACXA,IAAA;AAAA,CAAV,CAAUC,qBAAV,KAAA;AAIE,EAAMA,qBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,sBAAsB,CAAA;AAAA,CAJnC,EAAA,oBAAA,KAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;;ACJA,IAAA;AAAA,CAAV,CAAUC,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAA,WAAA,KAAA,WAAA,GAAA,EAAA,CAAA,CAAA;;;ACgBA,IAAA;AAAA,CAAV,CAAUC,qBAAV,KAAA;AAIE,EAAMA,qBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,sBAAsB,CAAA;AAAA,CAJnC,EAAA,oBAAA,KAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;;ACXA,IAAA;AAAA,CAAV,CAAUC,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAA,cAAA,KAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"index.mjs","sourcesContent":["import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IConsoleHandler defines the contract for console handlers.\n * It provides methods for handling log records in the browser console.\n */\nexport interface IConsoleHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConsoleHandler {\n  /**\n   * Symbol for injecting the console handler\n   */\n  export const $ = Symbol.for('IConsoleHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IErrorLogHandler defines the contract for error log handlers.\n * It provides methods for handling log records in the browser's error log.\n */\nexport interface IErrorLogHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IErrorLogHandler {\n  /**\n   * Symbol for injecting the error log handler\n   */\n  export const $ = Symbol.for('IErrorLogHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\n\n/**\n * IFingersCrossedHandler defines the contract for fingers-crossed handlers.\n * It provides methods for handling log records only when a certain action level is reached.\n */\nexport interface IFingersCrossedHandler extends ILogHandler {\n  /**\n   * Get the action level\n   */\n  getActionLevel(): LogLevel\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  setActionLevel(level: LogLevel): void\n\n  /**\n   * Get the buffer size\n   */\n  getBufferSize(): number\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  setBufferSize(size: number): void\n\n  /**\n   * Get whether the handler is activated\n   */\n  isActivated(): boolean\n\n  /**\n   * Reset the handler\n   */\n  reset(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IFingersCrossedHandler {\n  /**\n   * Symbol for injecting the fingers-crossed handler\n   */\n  export const $ = Symbol.for('IFingersCrossedHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IHttpHandler defines the contract for HTTP handlers.\n * It provides methods for handling log records via HTTP requests.\n */\nexport interface IHttpHandler extends ILogHandler {\n  /**\n   * Get the URL to send log records to\n   */\n  getUrl(): string\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  setUrl(url: string): void\n\n  /**\n   * Get the HTTP method to use\n   */\n  getMethod(): string\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  setMethod(method: string): void\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  getHeaders(): Record<string, string>\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  setHeaders(headers: Record<string, string>): void\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  getMaxRetries(): number\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  setMaxRetries(maxRetries: number): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IHttpHandler {\n  /**\n   * Symbol for injecting the HTTP handler\n   */\n  export const $ = Symbol.for('IHttpHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IIndexedDBHandler defines the contract for IndexedDB handlers.\n * It provides methods for handling log records in the browser's IndexedDB.\n */\nexport interface IIndexedDBHandler extends ILogHandler {\n  /**\n   * Get the database name\n   */\n  getDatabaseName(): string\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  setDatabaseName(name: string): void\n\n  /**\n   * Get the table name\n   */\n  getTableName(): string\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  setTableName(name: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): Promise<any[]>\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): Promise<void>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IIndexedDBHandler {\n  /**\n   * Symbol for injecting the IndexedDB handler\n   */\n  export const $ = Symbol.for('IIndexedDBHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ILocalStorageHandler defines the contract for localStorage handlers.\n * It provides methods for handling log records in the browser's localStorage.\n */\nexport interface ILocalStorageHandler extends ILogHandler {\n  /**\n   * Get the localStorage key used to store logs\n   */\n  getKey(): string\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  setKey(key: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): any[]\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILocalStorageHandler {\n  /**\n   * Symbol for injecting the localStorage handler\n   */\n  export const $ = Symbol.for('ILocalStorageHandler')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogHandler defines the contract for log handlers.\n * It provides methods for handling log records.\n */\nexport interface ILogHandler {\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  handle(record: LogRecord): void\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  isHandling(record: LogRecord): boolean\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  setNext(handler: ILogHandler): ILogHandler\n\n  /**\n   * Get the next handler in the chain\n   */\n  getNext(): ILogHandler | null\n\n  /**\n   * Get the handler name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogHandler {\n  /**\n   * Symbol for injecting the log handler\n   */\n  export const $ = Symbol.for('ILogHandler')\n}\n","import type { IHttpHandler } from './http-handler.interface'\n\n/**\n * ISlackWebhookHandler defines the contract for Slack webhook handlers.\n * It provides methods for handling log records via Slack webhooks.\n */\nexport interface ISlackWebhookHandler extends IHttpHandler {\n  /**\n   * Get the Slack channel to send log records to\n   */\n  getChannel(): string\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  setChannel(channel: string): void\n\n  /**\n   * Get the username to use when sending log records\n   */\n  getUsername(): string\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  setUsername(username: string): void\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  getIconEmoji(): string\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  setIconEmoji(emoji: string): void\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISlackWebhookHandler {\n  /**\n   * Symbol for injecting the Slack webhook handler\n   */\n  export const $ = Symbol.for('ISlackWebhookHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ISyslogHandler defines the contract for syslog handlers.\n * It provides methods for handling log records in syslog format (browser-compatible).\n */\nexport interface ISyslogHandler extends ILogHandler {\n  /**\n   * Get the facility code\n   */\n  getFacility(): number\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  setFacility(facility: number): void\n\n  /**\n   * Get the application name\n   */\n  getAppName(): string\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  setAppName(appName: string): void\n\n  /**\n   * Get the process ID\n   */\n  getProcId(): string\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  setProcId(procId: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISyslogHandler {\n  /**\n   * Symbol for injecting the syslog handler\n   */\n  export const $ = Symbol.for('ISyslogHandler')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/handlers/fingers-crossed-handler.interface.ts"],"names":["IFingersCrossedHandler"],"mappings":";;;;;;;;;;;;;AA4CiBA;AAAA,CAAV,CAAUA,uBAAV,KAAA;AAIE,EAAMA,uBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,wBAAwB,CAAA;AAAA,CAJrC,EAAAA,8BAAA,KAAAA,8BAAA,GAAA,EAAA,CAAA,CAAA","file":"fingers-crossed-handler.interface.js","sourcesContent":["import type { ILogHandler } from './log-handler.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\n\n/**\n * IFingersCrossedHandler defines the contract for fingers-crossed handlers.\n * It provides methods for handling log records only when a certain action level is reached.\n */\nexport interface IFingersCrossedHandler extends ILogHandler {\n  /**\n   * Get the action level\n   */\n  getActionLevel(): LogLevel\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  setActionLevel(level: LogLevel): void\n\n  /**\n   * Get the buffer size\n   */\n  getBufferSize(): number\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  setBufferSize(size: number): void\n\n  /**\n   * Get whether the handler is activated\n   */\n  isActivated(): boolean\n\n  /**\n   * Reset the handler\n   */\n  reset(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IFingersCrossedHandler {\n  /**\n   * Symbol for injecting the fingers-crossed handler\n   */\n  export const $ = Symbol.for('IFingersCrossedHandler')\n}\n"]}
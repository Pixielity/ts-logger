{"version":3,"sources":["../../src/interfaces/channels/logging-channel.interface.ts","../../src/interfaces/channels/single-channel.interface.ts","../../src/interfaces/channels/stack-channel.interface.ts","../../src/interfaces/context/manager.interface.ts","../../src/interfaces/context/management.interface.ts","../../src/interfaces/events/dehydrating.interface.ts","../../src/interfaces/events/hydrated.interface.ts","../../src/interfaces/events/event-dispatcher.interface.ts","../../src/interfaces/events/log-event.interface.ts","../../src/interfaces/events/message-logged.interface.ts","../../src/interfaces/formatters/json-formatter.interface.ts","../../src/interfaces/formatters/line-formatter.interface.ts","../../src/interfaces/formatters/log-formatter.interface.ts","../../src/interfaces/formatters/simple-formatter.interface.ts","../../src/interfaces/handlers/console-handler.interface.ts","../../src/interfaces/handlers/error-log-handler.interface.ts","../../src/interfaces/handlers/fingers-crossed-handler.interface.ts","../../src/interfaces/handlers/http-handler.interface.ts","../../src/interfaces/handlers/indexed-db-handler.interface.ts","../../src/interfaces/handlers/local-storage-handler.interface.ts","../../src/interfaces/handlers/log-handler.interface.ts","../../src/interfaces/handlers/slack-webhook-handler.interface.ts","../../src/interfaces/handlers/syslog-handler.interface.ts","../../src/interfaces/logging/manager.interface.ts","../../src/interfaces/logging/logging-service.interface.ts","../../src/interfaces/processors/context-log-processor.interface.ts","../../src/interfaces/processors/log-processor.interface.ts","../../src/interfaces/processors/message-placeholder-processor.interface.ts","../../src/interfaces/utils/exception-formatter.interface.ts"],"names":["ILoggingChannel","ISingleChannel","IStackChannel","IContextManager","IContextManagement","IContextDehydrating","IContextHydrated","IEventDispatcher","ILogEvent","IMessageLogged","IJsonFormatter","ILineFormatter","ILogFormatter","ISimpleFormatter","IConsoleHandler","IErrorLogHandler","IFingersCrossedHandler","IHttpHandler","IIndexedDBHandler","ILocalStorageHandler","ILogHandler","ISlackWebhookHandler","ISyslogHandler","ILogManager","ILoggingService","IContextLogProcessor","ILogProcessor","IMessagePlaceholderProcessor","IExceptionFormatter"],"mappings":"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","file":"index.mjs","sourcesContent":["import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext, LogRecord } from '../../types/types'\n\n/**\n * ILoggingChannel defines the contract for logging channels.\n * It provides methods for logging messages and managing channel-specific context.\n */\nexport interface ILoggingChannel {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingChannel\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingChannel\n\n  /**\n   * Get the channel name\n   */\n  getName(): string\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  processRecord(record: LogRecord): LogRecord\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingChannel {\n  /**\n   * Symbol for injecting the logging channel\n   */\n  export const $ = Symbol.for('ILoggingChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\nimport type { ILogHandler } from '../handlers/log-handler.interface'\nimport type { ILogFormatter } from '../formatters/log-formatter.interface'\nimport type { ILogProcessor } from '../processors/log-processor.interface'\n\n/**\n * ISingleChannel defines the contract for single channels.\n * A single channel uses a single handler to process log messages.\n */\nexport interface ISingleChannel extends ILoggingChannel {\n  /**\n   * Get the handler used by the channel\n   */\n  getHandler(): ILogHandler\n\n  /**\n   * Set the handler used by the channel\n   * @param handler The handler to use\n   */\n  setHandler(handler: ILogHandler): void\n\n  /**\n   * Get the formatter used by the channel\n   */\n  getFormatter(): ILogFormatter\n\n  /**\n   * Set the formatter used by the channel\n   * @param formatter The formatter to use\n   */\n  setFormatter(formatter: ILogFormatter): void\n\n  /**\n   * Get the processors used by the channel\n   */\n  getProcessors(): ILogProcessor[]\n\n  /**\n   * Add a processor to the channel\n   * @param processor The processor to add\n   */\n  addProcessor(processor: ILogProcessor): void\n\n  /**\n   * Remove a processor from the channel\n   * @param name The name of the processor to remove\n   */\n  removeProcessor(name: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISingleChannel {\n  /**\n   * Symbol for injecting the single channel\n   */\n  export const $ = Symbol.for('ISingleChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\n\n/**\n * IStackChannel defines the contract for stack channels.\n * A stack channel combines multiple channels into a single channel.\n */\nexport interface IStackChannel extends ILoggingChannel {\n  /**\n   * Get the channels in the stack\n   */\n  getChannels(): ILoggingChannel[]\n\n  /**\n   * Add a channel to the stack\n   * @param channel The channel to add\n   */\n  addChannel(channel: ILoggingChannel): void\n\n  /**\n   * Remove a channel from the stack\n   * @param name The name of the channel to remove\n   */\n  removeChannel(name: string): void\n\n  /**\n   * Check if the stack contains a channel with the specified name\n   * @param name The channel name\n   */\n  hasChannel(name: string): boolean\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  getChannel(name: string): ILoggingChannel | undefined\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IStackChannel {\n  /**\n   * Symbol for injecting the stack channel\n   */\n  export const $ = Symbol.for('IStackChannel')\n}\n","import type { LogContext } from '../../types/types'\n\n/**\n * IContextManager defines the contract for context managers.\n * It provides methods for managing contextual data across components.\n */\nexport interface IContextManager {\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get all contextual data\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear all contextual data\n   */\n  clearContext(): void\n\n  /**\n   * Create a scoped context manager\n   */\n  createScope(): IContextManager\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  merge(manager: IContextManager): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManager {\n  /**\n   * Symbol for injecting the context manager\n   */\n  export const $ = Symbol.for('IContextManager')\n}\n","import type { LogContext } from '../../types/types'\n\n/**\n * IContextManagement defines the contract for context management.\n * It provides methods for managing contextual data.\n */\nexport interface IContextManagement {\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  add(key: string, value: any): void\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  get<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  has(key: string): boolean\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  forget(key: string): void\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  addHidden(key: string, value: any): void\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  getHidden<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  hasHidden(key: string): boolean\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  forgetHidden(key: string): void\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  push(key: string, value: any): void\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  pop<T>(key: string): T | undefined\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  stackContains(key: string, value: any): boolean\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  increment(key: string, amount?: number): number\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  decrement(key: string, amount?: number): number\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  scope<T>(callback: () => T): T\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  dehydrate(): Record<string, any>\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  hydrate(data: Record<string, any>): void\n\n  /**\n   * Get all context data\n   */\n  all(): LogContext\n\n  /**\n   * Clear all context data\n   */\n  clear(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManagement {\n  /**\n   * Symbol for injecting the context management\n   */\n  export const $ = Symbol.for('IContextManagement')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextDehydrating defines the contract for context dehydrating events.\n * It provides methods for accessing information about context dehydration.\n */\nexport interface IContextDehydrating extends ILogEvent {\n  /**\n   * Get the context data being dehydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  setContext(context: LogContext): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextDehydrating {\n  /**\n   * Symbol for injecting the context dehydrating event\n   */\n  export const $ = Symbol.for('IContextDehydrating')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextHydrated defines the contract for context hydrated events.\n * It provides methods for accessing information about context hydration.\n */\nexport interface IContextHydrated extends ILogEvent {\n  /**\n   * Get the context data that was hydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the source of the hydrated data\n   */\n  getSource(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextHydrated {\n  /**\n   * Symbol for injecting the context hydrated event\n   */\n  export const $ = Symbol.for('IContextHydrated')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogListener } from '../../types/types'\n\n/**\n * IEventDispatcher defines the contract for event dispatchers.\n * It provides methods for dispatching events and managing event listeners.\n */\nexport interface IEventDispatcher {\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  dispatch(event: ILogEvent): void\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  addListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  removeListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  getListeners(eventName: string): LogListener[]\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  hasListeners(eventName: string): boolean\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  clearListeners(eventName: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IEventDispatcher {\n  /**\n   * Symbol for injecting the event dispatcher\n   */\n  export const $ = Symbol.for('IEventDispatcher')\n}\n","/**\n * ILogEvent defines the contract for log events.\n * It provides methods for identifying and handling log events.\n */\nexport interface ILogEvent {\n  /**\n   * Get the event name\n   */\n  getName(): string\n\n  /**\n   * Get the event data\n   */\n  getData(): Record<string, any>\n\n  /**\n   * Get the event timestamp\n   */\n  getTimestamp(): Date\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogEvent {\n  /**\n   * Symbol for injecting the log event\n   */\n  export const $ = Symbol.for('ILogEvent')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IMessageLogged defines the contract for message logged events.\n * It provides methods for accessing information about logged messages.\n */\nexport interface IMessageLogged extends ILogEvent {\n  /**\n   * Get the log level\n   */\n  getLevel(): LogLevel\n\n  /**\n   * Get the log message\n   */\n  getMessage(): string\n\n  /**\n   * Get the log context\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the stack trace\n   */\n  getStack(): string | undefined\n\n  /**\n   * Get the channel name\n   */\n  getChannel(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessageLogged {\n  /**\n   * Symbol for injecting the message logged event\n   */\n  export const $ = Symbol.for('IMessageLogged')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * IJsonFormatter defines the contract for JSON formatters.\n * It provides methods for formatting log records as JSON.\n */\nexport interface IJsonFormatter extends ILogFormatter {\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  setPrettyPrint(enabled: boolean): void\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  isPrettyPrintEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IJsonFormatter {\n  /**\n   * Symbol for injecting the JSON formatter\n   */\n  export const $ = Symbol.for('IJsonFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ILineFormatter defines the contract for line formatters.\n * It provides methods for formatting log records as lines of text.\n */\nexport interface ILineFormatter extends ILogFormatter {\n  /**\n   * Get the date format\n   */\n  getDateFormat(): string\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  setDateFormat(format: string): void\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILineFormatter {\n  /**\n   * Symbol for injecting the line formatter\n   */\n  export const $ = Symbol.for('ILineFormatter')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogFormatter defines the contract for log formatters.\n * It provides methods for formatting log records.\n */\nexport interface ILogFormatter {\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  format(record: LogRecord): string\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  formatBatch(records: LogRecord[]): string\n\n  /**\n   * Get the formatter name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogFormatter {\n  /**\n   * Symbol for injecting the log formatter\n   */\n  export const $ = Symbol.for('ILogFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ISimpleFormatter defines the contract for simple formatters.\n * It provides methods for formatting log records in a simple format.\n */\nexport interface ISimpleFormatter extends ILogFormatter {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISimpleFormatter {\n  /**\n   * Symbol for injecting the simple formatter\n   */\n  export const $ = Symbol.for('ISimpleFormatter')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IConsoleHandler defines the contract for console handlers.\n * It provides methods for handling log records in the browser console.\n */\nexport interface IConsoleHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConsoleHandler {\n  /**\n   * Symbol for injecting the console handler\n   */\n  export const $ = Symbol.for('IConsoleHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IErrorLogHandler defines the contract for error log handlers.\n * It provides methods for handling log records in the browser's error log.\n */\nexport interface IErrorLogHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IErrorLogHandler {\n  /**\n   * Symbol for injecting the error log handler\n   */\n  export const $ = Symbol.for('IErrorLogHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\n\n/**\n * IFingersCrossedHandler defines the contract for fingers-crossed handlers.\n * It provides methods for handling log records only when a certain action level is reached.\n */\nexport interface IFingersCrossedHandler extends ILogHandler {\n  /**\n   * Get the action level\n   */\n  getActionLevel(): LogLevel\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  setActionLevel(level: LogLevel): void\n\n  /**\n   * Get the buffer size\n   */\n  getBufferSize(): number\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  setBufferSize(size: number): void\n\n  /**\n   * Get whether the handler is activated\n   */\n  isActivated(): boolean\n\n  /**\n   * Reset the handler\n   */\n  reset(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IFingersCrossedHandler {\n  /**\n   * Symbol for injecting the fingers-crossed handler\n   */\n  export const $ = Symbol.for('IFingersCrossedHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IHttpHandler defines the contract for HTTP handlers.\n * It provides methods for handling log records via HTTP requests.\n */\nexport interface IHttpHandler extends ILogHandler {\n  /**\n   * Get the URL to send log records to\n   */\n  getUrl(): string\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  setUrl(url: string): void\n\n  /**\n   * Get the HTTP method to use\n   */\n  getMethod(): string\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  setMethod(method: string): void\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  getHeaders(): Record<string, string>\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  setHeaders(headers: Record<string, string>): void\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  getMaxRetries(): number\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  setMaxRetries(maxRetries: number): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IHttpHandler {\n  /**\n   * Symbol for injecting the HTTP handler\n   */\n  export const $ = Symbol.for('IHttpHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IIndexedDBHandler defines the contract for IndexedDB handlers.\n * It provides methods for handling log records in the browser's IndexedDB.\n */\nexport interface IIndexedDBHandler extends ILogHandler {\n  /**\n   * Get the database name\n   */\n  getDatabaseName(): string\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  setDatabaseName(name: string): void\n\n  /**\n   * Get the table name\n   */\n  getTableName(): string\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  setTableName(name: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): Promise<any[]>\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): Promise<void>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IIndexedDBHandler {\n  /**\n   * Symbol for injecting the IndexedDB handler\n   */\n  export const $ = Symbol.for('IIndexedDBHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ILocalStorageHandler defines the contract for localStorage handlers.\n * It provides methods for handling log records in the browser's localStorage.\n */\nexport interface ILocalStorageHandler extends ILogHandler {\n  /**\n   * Get the localStorage key used to store logs\n   */\n  getKey(): string\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  setKey(key: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): any[]\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILocalStorageHandler {\n  /**\n   * Symbol for injecting the localStorage handler\n   */\n  export const $ = Symbol.for('ILocalStorageHandler')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogHandler defines the contract for log handlers.\n * It provides methods for handling log records.\n */\nexport interface ILogHandler {\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  handle(record: LogRecord): void\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  isHandling(record: LogRecord): boolean\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  setNext(handler: ILogHandler): ILogHandler\n\n  /**\n   * Get the next handler in the chain\n   */\n  getNext(): ILogHandler | null\n\n  /**\n   * Get the handler name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogHandler {\n  /**\n   * Symbol for injecting the log handler\n   */\n  export const $ = Symbol.for('ILogHandler')\n}\n","import type { IHttpHandler } from './http-handler.interface'\n\n/**\n * ISlackWebhookHandler defines the contract for Slack webhook handlers.\n * It provides methods for handling log records via Slack webhooks.\n */\nexport interface ISlackWebhookHandler extends IHttpHandler {\n  /**\n   * Get the Slack channel to send log records to\n   */\n  getChannel(): string\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  setChannel(channel: string): void\n\n  /**\n   * Get the username to use when sending log records\n   */\n  getUsername(): string\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  setUsername(username: string): void\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  getIconEmoji(): string\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  setIconEmoji(emoji: string): void\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISlackWebhookHandler {\n  /**\n   * Symbol for injecting the Slack webhook handler\n   */\n  export const $ = Symbol.for('ISlackWebhookHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ISyslogHandler defines the contract for syslog handlers.\n * It provides methods for handling log records in syslog format (browser-compatible).\n */\nexport interface ISyslogHandler extends ILogHandler {\n  /**\n   * Get the facility code\n   */\n  getFacility(): number\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  setFacility(facility: number): void\n\n  /**\n   * Get the application name\n   */\n  getAppName(): string\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  setAppName(appName: string): void\n\n  /**\n   * Get the process ID\n   */\n  getProcId(): string\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  setProcId(procId: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISyslogHandler {\n  /**\n   * Symbol for injecting the syslog handler\n   */\n  export const $ = Symbol.for('ISyslogHandler')\n}\n","import type { ILoggingService } from './logging-service.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogChannelType } from '../../enums/log-channel-type.enum'\nimport type {\n  ChannelOptions,\n  HandlerOptions,\n  FormatterOptions,\n  ProcessorOptions,\n  LogContext,\n} from '../../types/types'\n\n/**\n * ILogManager defines the contract for log managers.\n * It provides methods for managing channels, drivers, and extending the logging system.\n */\nexport interface ILogManager extends ILoggingService {\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  channel(name?: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param name The stack name\n   */\n  stack(name: string): ILoggingService\n\n  /**\n   * Get the driver with the specified name\n   * @param name The driver name\n   */\n  driver(name?: string): ILoggingService\n\n  /**\n   * Extend the logging system with a custom driver creator\n   * @param driver The driver name\n   * @param callback The callback function that creates the driver\n   */\n  extend(driver: string, callback: (config: any) => ILoggingService): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context: LogContext): void\n\n  /**\n   * Get all registered channels\n   */\n  getChannels(): Record<string, ILoggingService>\n\n  /**\n   * Get the default channel name\n   */\n  getDefaultChannel(): string\n\n  /**\n   * Set the default channel name\n   * @param name The default channel name\n   */\n  setDefaultChannel(name: string): void\n\n  /**\n   * Create a channel with the specified configuration\n   * @param name The channel name\n   * @param type The channel type\n   * @param options The channel options\n   */\n  createChannel(name: string, type: LogChannelType, options?: ChannelOptions): ILoggingService\n\n  /**\n   * Create a handler with the specified configuration\n   * @param type The handler type\n   * @param options The handler options\n   */\n  createHandler(type: string, options?: HandlerOptions): any\n\n  /**\n   * Create a formatter with the specified configuration\n   * @param type The formatter type\n   * @param options The formatter options\n   */\n  createFormatter(type: string, options?: FormatterOptions): any\n\n  /**\n   * Create a processor with the specified configuration\n   * @param type The processor type\n   * @param options The processor options\n   */\n  createProcessor(type: string, options?: ProcessorOptions): any\n\n  /**\n   * Get the minimum log level\n   */\n  getMinimumLevel(): LogLevel\n\n  /**\n   * Set the minimum log level\n   * @param level The minimum log level\n   */\n  setMinimumLevel(level: LogLevel): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogManager {\n  /**\n   * Symbol for injecting the log manager\n   */\n  export const $ = Symbol.for('ILogManager')\n}\n","import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/types'\n\n/**\n * ILoggingService defines the contract for logging services.\n * It provides methods for logging messages at different levels and with contextual data.\n */\nexport interface ILoggingService {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  debug(message: string, context?: LogContext): void\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  info(message: string, context?: LogContext): void\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  notice(message: string, context?: LogContext): void\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  warning(message: string, context?: LogContext): void\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  error(message: string, context?: LogContext): void\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  critical(message: string, context?: LogContext): void\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  alert(message: string, context?: LogContext): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingService\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingService\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  channel(channel: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  stack(stack: string): ILoggingService\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingService {\n  /**\n   * Symbol for injecting the logging service\n   */\n  export const $ = Symbol.for('ILoggingService')\n}\n","import type { ILogProcessor } from './log-processor.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextLogProcessor defines the contract for context log processors.\n * It provides methods for adding contextual data to log records.\n */\nexport interface IContextLogProcessor extends ILogProcessor {\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get the current context\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear the current context\n   */\n  clearContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextLogProcessor {\n  /**\n   * Symbol for injecting the context log processor\n   */\n  export const $ = Symbol.for('IContextLogProcessor')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogProcessor defines the contract for log processors.\n * It provides methods for processing log records.\n */\nexport interface ILogProcessor {\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  process(record: LogRecord): LogRecord\n\n  /**\n   * Get the processor name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogProcessor {\n  /**\n   * Symbol for injecting the log processor\n   */\n  export const $ = Symbol.for('ILogProcessor')\n}\n","import type { ILogProcessor } from './log-processor.interface'\n\n/**\n * IMessagePlaceholderProcessor defines the contract for message placeholder processors.\n * It provides methods for replacing placeholders in log messages with context values.\n */\nexport interface IMessagePlaceholderProcessor extends ILogProcessor {\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  setPlaceholderFormat(format: string): void\n\n  /**\n   * Get the placeholder format\n   */\n  getPlaceholderFormat(): string\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessagePlaceholderProcessor {\n  /**\n   * Symbol for injecting the message placeholder processor\n   */\n  export const $ = Symbol.for('IMessagePlaceholderProcessor')\n}\n","/**\n * IExceptionFormatter defines the contract for exception formatters.\n * It provides methods for formatting exceptions.\n */\nexport interface IExceptionFormatter {\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  format(exception: Error): Promise<string>\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  getStackTrace(exception: Error): Promise<string>\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IExceptionFormatter {\n  /**\n   * Symbol for injecting the exception formatter\n   */\n  export const $ = Symbol.for('IExceptionFormatter')\n}\n"]}
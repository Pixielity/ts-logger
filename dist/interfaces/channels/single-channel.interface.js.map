{"version":3,"sources":["../../../src/interfaces/channels/single-channel.interface.ts"],"names":["ISingleChannel"],"mappings":";;;;;;;;;;;;;AAqDiBA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA","file":"single-channel.interface.js","sourcesContent":["import type { ILoggingChannel } from './logging-channel.interface'\nimport type { ILogHandler } from '../handlers/log-handler.interface'\nimport type { ILogFormatter } from '../formatters/log-formatter.interface'\nimport type { ILogProcessor } from '../processors/log-processor.interface'\n\n/**\n * ISingleChannel defines the contract for single channels.\n * A single channel uses a single handler to process log messages.\n */\nexport interface ISingleChannel extends ILoggingChannel {\n  /**\n   * Get the handler used by the channel\n   */\n  getHandler(): ILogHandler\n\n  /**\n   * Set the handler used by the channel\n   * @param handler The handler to use\n   */\n  setHandler(handler: ILogHandler): void\n\n  /**\n   * Get the formatter used by the channel\n   */\n  getFormatter(): ILogFormatter\n\n  /**\n   * Set the formatter used by the channel\n   * @param formatter The formatter to use\n   */\n  setFormatter(formatter: ILogFormatter): void\n\n  /**\n   * Get the processors used by the channel\n   */\n  getProcessors(): ILogProcessor[]\n\n  /**\n   * Add a processor to the channel\n   * @param processor The processor to add\n   */\n  addProcessor(processor: ILogProcessor): void\n\n  /**\n   * Remove a processor from the channel\n   * @param name The name of the processor to remove\n   */\n  removeProcessor(name: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISingleChannel {\n  /**\n   * Symbol for injecting the single channel\n   */\n  export const $ = Symbol.for('ISingleChannel')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/channels/logging-channel.interface.ts","../../../src/interfaces/channels/single-channel.interface.ts","../../../src/interfaces/channels/stack-channel.interface.ts"],"names":["ILoggingChannel","ISingleChannel","IStackChannel"],"mappings":";;;;;;;;;;;;;AAsDiBA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA;;;ACDAC;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA;;;ACbAC;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext, LogRecord } from '../../types'\n\n/**\n * ILoggingChannel defines the contract for logging channels.\n * It provides methods for logging messages and managing channel-specific context.\n */\nexport interface ILoggingChannel {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingChannel\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingChannel\n\n  /**\n   * Get the channel name\n   */\n  getName(): string\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  processRecord(record: LogRecord): LogRecord\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingChannel {\n  /**\n   * Symbol for injecting the logging channel\n   */\n  export const $ = Symbol.for('ILoggingChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\nimport type { ILogHandler } from '../handlers/log-handler.interface'\nimport type { ILogFormatter } from '../formatters/log-formatter.interface'\nimport type { ILogProcessor } from '../processors/log-processor.interface'\n\n/**\n * ISingleChannel defines the contract for single channels.\n * A single channel uses a single handler to process log messages.\n */\nexport interface ISingleChannel extends ILoggingChannel {\n  /**\n   * Get the handler used by the channel\n   */\n  getHandler(): ILogHandler\n\n  /**\n   * Set the handler used by the channel\n   * @param handler The handler to use\n   */\n  setHandler(handler: ILogHandler): void\n\n  /**\n   * Get the formatter used by the channel\n   */\n  getFormatter(): ILogFormatter\n\n  /**\n   * Set the formatter used by the channel\n   * @param formatter The formatter to use\n   */\n  setFormatter(formatter: ILogFormatter): void\n\n  /**\n   * Get the processors used by the channel\n   */\n  getProcessors(): ILogProcessor[]\n\n  /**\n   * Add a processor to the channel\n   * @param processor The processor to add\n   */\n  addProcessor(processor: ILogProcessor): void\n\n  /**\n   * Remove a processor from the channel\n   * @param name The name of the processor to remove\n   */\n  removeProcessor(name: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISingleChannel {\n  /**\n   * Symbol for injecting the single channel\n   */\n  export const $ = Symbol.for('ISingleChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\n\n/**\n * IStackChannel defines the contract for stack channels.\n * A stack channel combines multiple channels into a single channel.\n */\nexport interface IStackChannel extends ILoggingChannel {\n  /**\n   * Get the channels in the stack\n   */\n  getChannels(): ILoggingChannel[]\n\n  /**\n   * Add a channel to the stack\n   * @param channel The channel to add\n   */\n  addChannel(channel: ILoggingChannel): void\n\n  /**\n   * Remove a channel from the stack\n   * @param name The name of the channel to remove\n   */\n  removeChannel(name: string): void\n\n  /**\n   * Check if the stack contains a channel with the specified name\n   * @param name The channel name\n   */\n  hasChannel(name: string): boolean\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  getChannel(name: string): ILoggingChannel | undefined\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IStackChannel {\n  /**\n   * Symbol for injecting the stack channel\n   */\n  export const $ = Symbol.for('IStackChannel')\n}\n"]}
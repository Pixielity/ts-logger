{"version":3,"sources":["../../../src/interfaces/channels/logging-channel.interface.ts"],"names":["ILoggingChannel"],"mappings":";;;;;;;;;;;;;AAsDiBA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA","file":"logging-channel.interface.js","sourcesContent":["import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext, LogRecord } from '../../types'\n\n/**\n * ILoggingChannel defines the contract for logging channels.\n * It provides methods for logging messages and managing channel-specific context.\n */\nexport interface ILoggingChannel {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingChannel\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingChannel\n\n  /**\n   * Get the channel name\n   */\n  getName(): string\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  processRecord(record: LogRecord): LogRecord\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingChannel {\n  /**\n   * Symbol for injecting the logging channel\n   */\n  export const $ = Symbol.for('ILoggingChannel')\n}\n"]}
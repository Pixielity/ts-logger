{"version":3,"sources":["../../../src/interfaces/channels/stack-channel.interface.ts"],"names":["IStackChannel"],"mappings":";;;;;;;;;;;;;AAwCiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"stack-channel.interface.js","sourcesContent":["import type { ILoggingChannel } from './logging-channel.interface'\n\n/**\n * IStackChannel defines the contract for stack channels.\n * A stack channel combines multiple channels into a single channel.\n */\nexport interface IStackChannel extends ILoggingChannel {\n  /**\n   * Get the channels in the stack\n   */\n  getChannels(): ILoggingChannel[]\n\n  /**\n   * Add a channel to the stack\n   * @param channel The channel to add\n   */\n  addChannel(channel: ILoggingChannel): void\n\n  /**\n   * Remove a channel from the stack\n   * @param name The name of the channel to remove\n   */\n  removeChannel(name: string): void\n\n  /**\n   * Check if the stack contains a channel with the specified name\n   * @param name The channel name\n   */\n  hasChannel(name: string): boolean\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  getChannel(name: string): ILoggingChannel | undefined\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IStackChannel {\n  /**\n   * Symbol for injecting the stack channel\n   */\n  export const $ = Symbol.for('IStackChannel')\n}\n"]}
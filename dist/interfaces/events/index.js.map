{"version":3,"sources":["../../../src/interfaces/events/dehydrating.interface.ts","../../../src/interfaces/events/hydrated.interface.ts","../../../src/interfaces/events/event-dispatcher.interface.ts","../../../src/interfaces/events/log-event.interface.ts","../../../src/interfaces/events/message-logged.interface.ts"],"names":["IContextDehydrating","IContextHydrated","IEventDispatcher","ILogEvent","IMessageLogged"],"mappings":";;;;;;;;;;;;;AAuBiBA;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA;;;ACDAC;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA;;;AC4BAC;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA;;;AC1BAC;AAAA,CAAV,CAAUA,UAAV,KAAA;AAIE,EAAMA,UAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA,CAJxB,EAAAA,iBAAA,KAAAA,iBAAA,GAAA,EAAA,CAAA,CAAA;;;ACcAC;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextDehydrating defines the contract for context dehydrating events.\n * It provides methods for accessing information about context dehydration.\n */\nexport interface IContextDehydrating extends ILogEvent {\n  /**\n   * Get the context data being dehydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  setContext(context: LogContext): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextDehydrating {\n  /**\n   * Symbol for injecting the context dehydrating event\n   */\n  export const $ = Symbol.for('IContextDehydrating')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextHydrated defines the contract for context hydrated events.\n * It provides methods for accessing information about context hydration.\n */\nexport interface IContextHydrated extends ILogEvent {\n  /**\n   * Get the context data that was hydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the source of the hydrated data\n   */\n  getSource(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextHydrated {\n  /**\n   * Symbol for injecting the context hydrated event\n   */\n  export const $ = Symbol.for('IContextHydrated')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogListener } from '../../types/types'\n\n/**\n * IEventDispatcher defines the contract for event dispatchers.\n * It provides methods for dispatching events and managing event listeners.\n */\nexport interface IEventDispatcher {\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  dispatch(event: ILogEvent): void\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  addListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  removeListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  getListeners(eventName: string): LogListener[]\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  hasListeners(eventName: string): boolean\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  clearListeners(eventName: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IEventDispatcher {\n  /**\n   * Symbol for injecting the event dispatcher\n   */\n  export const $ = Symbol.for('IEventDispatcher')\n}\n","/**\n * ILogEvent defines the contract for log events.\n * It provides methods for identifying and handling log events.\n */\nexport interface ILogEvent {\n  /**\n   * Get the event name\n   */\n  getName(): string\n\n  /**\n   * Get the event data\n   */\n  getData(): Record<string, any>\n\n  /**\n   * Get the event timestamp\n   */\n  getTimestamp(): Date\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogEvent {\n  /**\n   * Symbol for injecting the log event\n   */\n  export const $ = Symbol.for('ILogEvent')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IMessageLogged defines the contract for message logged events.\n * It provides methods for accessing information about logged messages.\n */\nexport interface IMessageLogged extends ILogEvent {\n  /**\n   * Get the log level\n   */\n  getLevel(): LogLevel\n\n  /**\n   * Get the log message\n   */\n  getMessage(): string\n\n  /**\n   * Get the log context\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the stack trace\n   */\n  getStack(): string | undefined\n\n  /**\n   * Get the channel name\n   */\n  getChannel(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessageLogged {\n  /**\n   * Symbol for injecting the message logged event\n   */\n  export const $ = Symbol.for('IMessageLogged')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/events/message-logged.interface.ts"],"names":["IMessageLogged"],"mappings":";;;;;;;;;;;AAsCiB,IAAA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAA,cAAA,KAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"message-logged.interface.mjs","sourcesContent":["import type { ILogEvent } from './log-event.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IMessageLogged defines the contract for message logged events.\n * It provides methods for accessing information about logged messages.\n */\nexport interface IMessageLogged extends ILogEvent {\n  /**\n   * Get the log level\n   */\n  getLevel(): LogLevel\n\n  /**\n   * Get the log message\n   */\n  getMessage(): string\n\n  /**\n   * Get the log context\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the stack trace\n   */\n  getStack(): string | undefined\n\n  /**\n   * Get the channel name\n   */\n  getChannel(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessageLogged {\n  /**\n   * Symbol for injecting the message logged event\n   */\n  export const $ = Symbol.for('IMessageLogged')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/events/dehydrating.interface.ts"],"names":["IContextDehydrating"],"mappings":";;;;;;;;;;;;;AAuBiBA;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA","file":"dehydrating.interface.js","sourcesContent":["import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextDehydrating defines the contract for context dehydrating events.\n * It provides methods for accessing information about context dehydration.\n */\nexport interface IContextDehydrating extends ILogEvent {\n  /**\n   * Get the context data being dehydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  setContext(context: LogContext): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextDehydrating {\n  /**\n   * Symbol for injecting the context dehydrating event\n   */\n  export const $ = Symbol.for('IContextDehydrating')\n}\n"]}
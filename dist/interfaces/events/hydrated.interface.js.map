{"version":3,"sources":["../../../src/interfaces/events/hydrated.interface.ts"],"names":["IContextHydrated"],"mappings":";;;;;;;;;;;;;AAsBiBA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA","file":"hydrated.interface.js","sourcesContent":["import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextHydrated defines the contract for context hydrated events.\n * It provides methods for accessing information about context hydration.\n */\nexport interface IContextHydrated extends ILogEvent {\n  /**\n   * Get the context data that was hydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the source of the hydrated data\n   */\n  getSource(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextHydrated {\n  /**\n   * Symbol for injecting the context hydrated event\n   */\n  export const $ = Symbol.for('IContextHydrated')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/formatters/json-formatter.interface.ts"],"names":["IJsonFormatter"],"mappings":";;;;;;;;;;;AAiCiB,IAAA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAA,cAAA,KAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"json-formatter.interface.mjs","sourcesContent":["import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * IJsonFormatter defines the contract for JSON formatters.\n * It provides methods for formatting log records as JSON.\n */\nexport interface IJsonFormatter extends ILogFormatter {\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  setPrettyPrint(enabled: boolean): void\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  isPrettyPrintEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IJsonFormatter {\n  /**\n   * Symbol for injecting the JSON formatter\n   */\n  export const $ = Symbol.for('IJsonFormatter')\n}\n"]}
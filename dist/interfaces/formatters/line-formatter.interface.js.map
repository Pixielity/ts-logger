{"version":3,"sources":["../../../src/interfaces/formatters/line-formatter.interface.ts"],"names":["ILineFormatter"],"mappings":";;;;;;;;;;;;;AAuDiBA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA","file":"line-formatter.interface.js","sourcesContent":["import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ILineFormatter defines the contract for line formatters.\n * It provides methods for formatting log records as lines of text.\n */\nexport interface ILineFormatter extends ILogFormatter {\n  /**\n   * Get the date format\n   */\n  getDateFormat(): string\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  setDateFormat(format: string): void\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILineFormatter {\n  /**\n   * Symbol for injecting the line formatter\n   */\n  export const $ = Symbol.for('ILineFormatter')\n}\n"]}
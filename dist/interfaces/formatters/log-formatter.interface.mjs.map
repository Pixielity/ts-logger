{"version":3,"sources":["../../../src/interfaces/formatters/log-formatter.interface.ts"],"names":["ILogFormatter"],"mappings":";;;;;;;;;;;AA4BiB,IAAA;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA","file":"log-formatter.interface.mjs","sourcesContent":["import type { LogRecord } from '../../types/types'\n\n/**\n * ILogFormatter defines the contract for log formatters.\n * It provides methods for formatting log records.\n */\nexport interface ILogFormatter {\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  format(record: LogRecord): string\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  formatBatch(records: LogRecord[]): string\n\n  /**\n   * Get the formatter name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogFormatter {\n  /**\n   * Symbol for injecting the log formatter\n   */\n  export const $ = Symbol.for('ILogFormatter')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/formatters/json-formatter.interface.ts","../../../src/interfaces/formatters/line-formatter.interface.ts","../../../src/interfaces/formatters/log-formatter.interface.ts","../../../src/interfaces/formatters/simple-formatter.interface.ts"],"names":["IJsonFormatter","ILineFormatter","ILogFormatter","ISimpleFormatter"],"mappings":";;;;;;;;;;;;;AAiCiBA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA;;;ACsBAC;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA;;;AC3BAC;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA;;;ACKAC;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * IJsonFormatter defines the contract for JSON formatters.\n * It provides methods for formatting log records as JSON.\n */\nexport interface IJsonFormatter extends ILogFormatter {\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  setPrettyPrint(enabled: boolean): void\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  isPrettyPrintEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IJsonFormatter {\n  /**\n   * Symbol for injecting the JSON formatter\n   */\n  export const $ = Symbol.for('IJsonFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ILineFormatter defines the contract for line formatters.\n * It provides methods for formatting log records as lines of text.\n */\nexport interface ILineFormatter extends ILogFormatter {\n  /**\n   * Get the date format\n   */\n  getDateFormat(): string\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  setDateFormat(format: string): void\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILineFormatter {\n  /**\n   * Symbol for injecting the line formatter\n   */\n  export const $ = Symbol.for('ILineFormatter')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogFormatter defines the contract for log formatters.\n * It provides methods for formatting log records.\n */\nexport interface ILogFormatter {\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  format(record: LogRecord): string\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  formatBatch(records: LogRecord[]): string\n\n  /**\n   * Get the formatter name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogFormatter {\n  /**\n   * Symbol for injecting the log formatter\n   */\n  export const $ = Symbol.for('ILogFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ISimpleFormatter defines the contract for simple formatters.\n * It provides methods for formatting log records in a simple format.\n */\nexport interface ISimpleFormatter extends ILogFormatter {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISimpleFormatter {\n  /**\n   * Symbol for injecting the simple formatter\n   */\n  export const $ = Symbol.for('ISimpleFormatter')\n}\n"]}
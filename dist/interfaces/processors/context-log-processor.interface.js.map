{"version":3,"sources":["../../../src/interfaces/processors/context-log-processor.interface.ts"],"names":["IContextLogProcessor"],"mappings":";;;;;;;;;;;;;AAkCiBA;AAAA,CAAV,CAAUA,qBAAV,KAAA;AAIE,EAAMA,qBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,sBAAsB,CAAA;AAAA,CAJnC,EAAAA,4BAAA,KAAAA,4BAAA,GAAA,EAAA,CAAA,CAAA","file":"context-log-processor.interface.js","sourcesContent":["import type { ILogProcessor } from './log-processor.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextLogProcessor defines the contract for context log processors.\n * It provides methods for adding contextual data to log records.\n */\nexport interface IContextLogProcessor extends ILogProcessor {\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get the current context\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear the current context\n   */\n  clearContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextLogProcessor {\n  /**\n   * Symbol for injecting the context log processor\n   */\n  export const $ = Symbol.for('IContextLogProcessor')\n}\n"]}
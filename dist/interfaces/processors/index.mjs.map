{"version":3,"sources":["../../../src/interfaces/processors/context-log-processor.interface.ts","../../../src/interfaces/processors/log-processor.interface.ts","../../../src/interfaces/processors/message-placeholder-processor.interface.ts"],"names":["IContextLogProcessor","ILogProcessor","IMessagePlaceholderProcessor"],"mappings":";;;;;;;;;;;AAkCiB,IAAA;AAAA,CAAV,CAAUA,qBAAV,KAAA;AAIE,EAAMA,qBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,sBAAsB,CAAA;AAAA,CAJnC,EAAA,oBAAA,KAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;;ACZA,IAAA;AAAA,CAAV,CAAUC,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA;;;ACWA,IAAA;AAAA,CAAV,CAAUC,6BAAV,KAAA;AAIE,EAAMA,6BAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,8BAA8B,CAAA;AAAA,CAJ3C,EAAA,4BAAA,KAAA,4BAAA,GAAA,EAAA,CAAA,CAAA","file":"index.mjs","sourcesContent":["import type { ILogProcessor } from './log-processor.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * IContextLogProcessor defines the contract for context log processors.\n * It provides methods for adding contextual data to log records.\n */\nexport interface IContextLogProcessor extends ILogProcessor {\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get the current context\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear the current context\n   */\n  clearContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextLogProcessor {\n  /**\n   * Symbol for injecting the context log processor\n   */\n  export const $ = Symbol.for('IContextLogProcessor')\n}\n","import type { LogRecord } from '../../types/types'\n\n/**\n * ILogProcessor defines the contract for log processors.\n * It provides methods for processing log records.\n */\nexport interface ILogProcessor {\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  process(record: LogRecord): LogRecord\n\n  /**\n   * Get the processor name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogProcessor {\n  /**\n   * Symbol for injecting the log processor\n   */\n  export const $ = Symbol.for('ILogProcessor')\n}\n","import type { ILogProcessor } from './log-processor.interface'\n\n/**\n * IMessagePlaceholderProcessor defines the contract for message placeholder processors.\n * It provides methods for replacing placeholders in log messages with context values.\n */\nexport interface IMessagePlaceholderProcessor extends ILogProcessor {\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  setPlaceholderFormat(format: string): void\n\n  /**\n   * Get the placeholder format\n   */\n  getPlaceholderFormat(): string\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessagePlaceholderProcessor {\n  /**\n   * Symbol for injecting the message placeholder processor\n   */\n  export const $ = Symbol.for('IMessagePlaceholderProcessor')\n}\n"]}
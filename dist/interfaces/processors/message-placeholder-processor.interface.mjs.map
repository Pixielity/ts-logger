{"version":3,"sources":["../../../src/interfaces/processors/message-placeholder-processor.interface.ts"],"names":["IMessagePlaceholderProcessor"],"mappings":";;;;;;;;;;;AAiCiB,IAAA;AAAA,CAAV,CAAUA,6BAAV,KAAA;AAIE,EAAMA,6BAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,8BAA8B,CAAA;AAAA,CAJ3C,EAAA,4BAAA,KAAA,4BAAA,GAAA,EAAA,CAAA,CAAA","file":"message-placeholder-processor.interface.mjs","sourcesContent":["import type { ILogProcessor } from './log-processor.interface'\n\n/**\n * IMessagePlaceholderProcessor defines the contract for message placeholder processors.\n * It provides methods for replacing placeholders in log messages with context values.\n */\nexport interface IMessagePlaceholderProcessor extends ILogProcessor {\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  setPlaceholderFormat(format: string): void\n\n  /**\n   * Get the placeholder format\n   */\n  getPlaceholderFormat(): string\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessagePlaceholderProcessor {\n  /**\n   * Symbol for injecting the message placeholder processor\n   */\n  export const $ = Symbol.for('IMessagePlaceholderProcessor')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/context/manager.interface.ts","../../../src/interfaces/context/management.interface.ts"],"names":["IContextManager","IContextManagement"],"mappings":";;;;;;;;;;;AA4CiB,IAAA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAA,eAAA,KAAA,eAAA,GAAA,EAAA,CAAA,CAAA;;;ACgFA,IAAA;AAAA,CAAV,CAAUC,mBAAV,KAAA;AAIE,EAAMA,mBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,oBAAoB,CAAA;AAAA,CAJjC,EAAA,kBAAA,KAAA,kBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.mjs","sourcesContent":["import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManager defines the contract for context managers.\n * It provides methods for managing contextual data across components.\n */\nexport interface IContextManager {\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get all contextual data\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear all contextual data\n   */\n  clearContext(): void\n\n  /**\n   * Create a scoped context manager\n   */\n  createScope(): IContextManager\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  merge(manager: IContextManager): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManager {\n  /**\n   * Symbol for injecting the context manager\n   */\n  export const $ = Symbol.for('IContextManager')\n}\n","import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManagement defines the contract for context management.\n * It provides methods for managing contextual data.\n */\nexport interface IContextManagement {\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  add(key: string, value: any): void\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  get<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  has(key: string): boolean\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  forget(key: string): void\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  addHidden(key: string, value: any): void\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  getHidden<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  hasHidden(key: string): boolean\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  forgetHidden(key: string): void\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  push(key: string, value: any): void\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  pop<T>(key: string): T | undefined\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  stackContains(key: string, value: any): boolean\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  increment(key: string, amount?: number): number\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  decrement(key: string, amount?: number): number\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  scope<T>(callback: () => T): T\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  dehydrate(): Record<string, any>\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  hydrate(data: Record<string, any>): void\n\n  /**\n   * Get all context data\n   */\n  all(): LogContext\n\n  /**\n   * Clear all context data\n   */\n  clear(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManagement {\n  /**\n   * Symbol for injecting the context management\n   */\n  export const $ = Symbol.for('IContextManagement')\n}\n"]}
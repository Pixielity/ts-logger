{"version":3,"sources":["../../../src/interfaces/utils/exception-formatter.interface.ts"],"names":["IExceptionFormatter"],"mappings":";;;;;;;;;;;;;AAgCiBA;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA","file":"exception-formatter.interface.js","sourcesContent":["/**\n * IExceptionFormatter defines the contract for exception formatters.\n * It provides methods for formatting exceptions.\n */\nexport interface IExceptionFormatter {\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  format(exception: Error): Promise<string>\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  getStackTrace(exception: Error): Promise<string>\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IExceptionFormatter {\n  /**\n   * Symbol for injecting the exception formatter\n   */\n  export const $ = Symbol.for('IExceptionFormatter')\n}\n"]}
{"version":3,"sources":["../../../src/interfaces/context/manager.interface.ts","../../../src/interfaces/utils/exception-formatter.interface.ts"],"names":["IContextManager","IExceptionFormatter"],"mappings":";;;;;;;;;;;;;AA4CiBA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AAIE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAJ9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA;;;ACZAC;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManager defines the contract for context managers.\n * It provides methods for managing contextual data across components.\n */\nexport interface IContextManager {\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get all contextual data\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear all contextual data\n   */\n  clearContext(): void\n\n  /**\n   * Create a scoped context manager\n   */\n  createScope(): IContextManager\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  merge(manager: IContextManager): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManager {\n  /**\n   * Symbol for injecting the context manager\n   */\n  export const $ = Symbol.for('IContextManager')\n}\n","/**\n * IExceptionFormatter defines the contract for exception formatters.\n * It provides methods for formatting exceptions.\n */\nexport interface IExceptionFormatter {\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  format(exception: Error): Promise<string>\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  getStackTrace(exception: Error): Promise<string>\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IExceptionFormatter {\n  /**\n   * Symbol for injecting the exception formatter\n   */\n  export const $ = Symbol.for('IExceptionFormatter')\n}\n"]}
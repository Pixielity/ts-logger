{"version":3,"sources":["../src/events/message-logged.event.ts","../src/interfaces/events/event-dispatcher.interface.ts","../src/logger.ts","../src/config/logging-config.ts","../src/manager.ts"],"names":["IEventDispatcher","injectable","inject","LogManager"],"mappings":"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","file":"manager.js","sourcesContent":["import type { LogLevel } from '../enums/log-level.enum'\nimport type { LogContext } from '../types/log-context.type'\nimport type { IMessageLogged } from '../interfaces/events/message-logged.interface'\n\n/**\n * MessageLoggedEvent is an implementation of the IMessageLogged interface.\n * It represents an event that is dispatched when a message is logged.\n */\nexport class MessageLoggedEvent implements IMessageLogged {\n  private name = 'message.logged'\n  private timestamp: Date = new Date()\n  private level: LogLevel\n  private message: string\n  private context: LogContext\n  private stack?: string\n  private channel: string\n\n  /**\n   * Create a new MessageLoggedEvent instance\n   * @param level The log level\n   * @param message The log message\n   * @param context The log context\n   * @param stack The stack trace\n   * @param channel The channel name\n   */\n  constructor(\n    level: LogLevel,\n    message: string,\n    context: LogContext,\n    stack?: string,\n    channel = 'default',\n  ) {\n    this.level = level\n    this.message = message\n    this.context = context\n    this.stack = stack\n    this.channel = channel\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      level: this.level,\n      message: this.message,\n      context: this.context,\n      stack: this.stack,\n      channel: this.channel,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the log level\n   */\n  public getLevel(): LogLevel {\n    return this.level\n  }\n\n  /**\n   * Get the log message\n   */\n  public getMessage(): string {\n    return this.message\n  }\n\n  /**\n   * Get the log context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the stack trace\n   */\n  public getStack(): string | undefined {\n    return this.stack\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogListener } from '../../types/log-listener.type'\n\n/**\n * IEventDispatcher defines the contract for event dispatchers.\n * It provides methods for dispatching events and managing event listeners.\n */\nexport interface IEventDispatcher {\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  dispatch(event: ILogEvent): void\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  addListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  removeListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  getListeners(eventName: string): LogListener[]\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  hasListeners(eventName: string): boolean\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  clearListeners(eventName: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IEventDispatcher {\n  /**\n   * Symbol for injecting the event dispatcher\n   */\n  export const $ = Symbol.for('IEventDispatcher')\n}\n","import { inject, injectable } from 'inversify'\n\nimport { LogLevel } from './enums/log-level.enum'\nimport type { LogContext } from './types/log-context.type'\nimport { MessageLoggedEvent } from './events/message-logged.event'\nimport { IEventDispatcher } from './interfaces/events/event-dispatcher.interface'\nimport type { ILoggingService } from './interfaces/logging/logging-service.interface'\nimport type { ILoggingChannel } from './interfaces/channels/logging-channel.interface'\n\n/**\n * Logger is the main implementation of the ILoggingService interface.\n * It provides methods for logging messages at different levels and with contextual data.\n */\n@injectable()\nexport class Logger implements ILoggingService {\n  private _channel: ILoggingChannel\n  private _context: LogContext = {}\n  private _eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new Logger instance\n   * @param channel The logging channel to use\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(\n    injectableChannel: ILoggingChannel,\n    @inject(IEventDispatcher.$) eventDispatcher: IEventDispatcher,\n  ) {\n    console.log('=======>>>>>>>>>', injectableChannel)\n    this._channel = injectableChannel\n    this._eventDispatcher = eventDispatcher\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    // Merge the context with the logger's context\n    const mergedContext = { ...this._context, ...context }\n\n    // Log the message to the channel\n    this._channel.log(level, message, mergedContext)\n\n    // Dispatch a MessageLogged event\n    this._eventDispatcher.dispatch(\n      new MessageLoggedEvent(\n        level,\n        message,\n        mergedContext,\n        undefined, // Stack trace will be added by the handler if needed\n        this._channel.getName(),\n      ),\n    )\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public debug(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.DEBUG, message, context)\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public info(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.INFO, message, context)\n  }\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public notice(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.NOTICE, message, context)\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public warning(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.WARNING, message, context)\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public error(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ERROR, message, context)\n  }\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public critical(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.CRITICAL, message, context)\n  }\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public alert(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ALERT, message, context)\n  }\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public emergency(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.EMERGENCY, message, context)\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingService {\n    this._context = { ...this._context, ...context }\n    return this\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingService {\n    const newContext: LogContext = { ...this._context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this._context = newContext\n    return this\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this._channel.shareContext(context)\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this._channel.flushSharedContext()\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  public channel(channel: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.channel() instead.')\n  }\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  public stack(stack: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.stack() instead.')\n  }\n}\n","import { LogLevel } from '../enums/log-level.enum'\nimport { DateFormat } from '../enums/date-format.enum'\nimport { HandlerType } from '../enums/handler-type.enum'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport { ProcessorType } from '../enums/processor-type.enum'\nimport { LogChannelType } from '../enums/log-channel-type.enum'\n\n/**\n * Configuration for the ts-log package.\n * This file contains the default configuration for channels, handlers, formatters, processors, emojis, and colors.\n */\nexport const loggingConfig = {\n  /**\n   * The default channel to use\n   */\n  default: 'console',\n\n  /**\n   * The minimum log level to record\n   */\n  minimumLevel: LogLevel.DEBUG,\n\n  /**\n   * The channels configuration\n   */\n  channels: {\n    console: {\n      type: LogChannelType.CONSOLE,\n      handler: {\n        type: HandlerType.CONSOLE,\n        emojiSupport: true,\n        colorSupport: true,\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: true,\n        colorSupport: true,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    localStorage: {\n      type: LogChannelType.LOCAL_STORAGE,\n      handler: {\n        type: HandlerType.LOCAL_STORAGE,\n        key: 'ts-log',\n        maxEntries: 100,\n      },\n      formatter: {\n        type: FormatterType.JSON,\n        prettyPrint: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    indexedDB: {\n      type: LogChannelType.INDEXED_DB,\n      handler: {\n        type: HandlerType.INDEXED_DB,\n        databaseName: 'ts-log',\n        tableName: 'logs',\n        maxEntries: 1000,\n      },\n      formatter: {\n        type: FormatterType.JSON,\n        prettyPrint: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    slack: {\n      type: LogChannelType.SLACK,\n      handler: {\n        type: HandlerType.SLACK,\n        url: '',\n        channel: '#logs',\n        username: 'ts-log',\n        iconEmoji: ':memo:',\n        emojiSupport: true,\n        maxRetries: 3,\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: true,\n        colorSupport: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    errorLog: {\n      type: LogChannelType.ERROR_LOG,\n      handler: {\n        type: HandlerType.ERROR_LOG,\n        emojiSupport: true,\n      },\n      formatter: {\n        type: FormatterType.SIMPLE,\n        emojiSupport: true,\n        colorSupport: false,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    syslog: {\n      type: LogChannelType.SYSLOG,\n      handler: {\n        type: HandlerType.SYSLOG,\n        facility: 16, // local0\n        appName: 'ts-log',\n        procId: 'browser',\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: false,\n        colorSupport: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: false,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    stack: {\n      type: LogChannelType.STACK,\n      channels: ['console', 'localStorage'],\n    },\n  },\n\n  /**\n   * Emoji configuration\n   */\n  emoji: {\n    enabled: true,\n    levels: {\n      [LogLevel.EMERGENCY]: '🚨',\n      [LogLevel.ALERT]: '🔔',\n      [LogLevel.CRITICAL]: '❗',\n      [LogLevel.ERROR]: '🔴',\n      [LogLevel.WARNING]: '⚠️',\n      [LogLevel.NOTICE]: '📝',\n      [LogLevel.INFO]: '✅',\n      [LogLevel.DEBUG]: '🛠️',\n    },\n  },\n\n  /**\n   * Color configuration\n   */\n  color: {\n    enabled: true,\n    levels: {\n      [LogLevel.EMERGENCY]: '#FF0000', // Red\n      [LogLevel.ALERT]: '#FF4500', // OrangeRed\n      [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n      [LogLevel.ERROR]: '#FFA500', // Orange\n      [LogLevel.WARNING]: '#FFD700', // Gold\n      [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n      [LogLevel.INFO]: '#32CD32', // LimeGreen\n      [LogLevel.DEBUG]: '#808080', // Gray\n    },\n  },\n}\n","import { injectable } from 'inversify'\n\nimport type {\n  ChannelOptions,\n  HandlerOptions,\n  FormatterOptions,\n  ProcessorOptions,\n  LogContext,\n} from './types'\nimport { Logger } from './logger'\n\nimport type { LogLevel } from './enums/log-level.enum'\nimport { loggingConfig } from './config/logging-config'\nimport type { LogChannelType } from './enums/log-channel-type.enum'\n\nimport type { ILogManager } from './interfaces/logging/manager.interface'\nimport type { ILogHandler } from './interfaces/handlers/log-handler.interface'\nimport type { ILogFormatter } from './interfaces/formatters/log-formatter.interface'\nimport type { ILogProcessor } from './interfaces/processors/log-processor.interface'\nimport type { IEventDispatcher } from './interfaces/events/event-dispatcher.interface'\nimport type { ILoggingService } from './interfaces/logging/logging-service.interface'\nimport type { ILoggingChannel } from './interfaces/channels/logging-channel.interface'\n\n/**\n * LogManager is the main implementation of the ILogManager interface.\n * It provides methods for managing channels, drivers, and extending the logging system.\n */\n@injectable()\nexport class LogManager implements ILogManager {\n  private _channels: Record<string, ILoggingService> = {}\n  private _customDrivers: Record<string, (config: any) => ILoggingService> = {}\n  private _defaultChannel: string = loggingConfig.default\n  private _minimumLevel: LogLevel = loggingConfig.minimumLevel\n  private _eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new LogManager instance\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(eventDispatcher: IEventDispatcher) {\n    this._eventDispatcher = eventDispatcher\n\n    // Initialize channels from config\n    this.initializeChannels()\n  }\n\n  /**\n   * Initialize channels from config\n   */\n  private initializeChannels(): void {\n    for (const [name, config] of Object.entries(loggingConfig.channels)) {\n      try {\n        const channelConfig = config as any\n        const channelType = channelConfig.type as LogChannelType\n\n        // Create the channel\n        this.createChannel(name, channelType, channelConfig)\n      } catch (error) {\n        console.error(`Failed to initialize channel ${name}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    this.channel().log(level, message, context)\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public debug(message: string, context: LogContext = {}): void {\n    this.channel().debug(message, context)\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public info(message: string, context: LogContext = {}): void {\n    this.channel().info(message, context)\n  }\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public notice(message: string, context: LogContext = {}): void {\n    this.channel().notice(message, context)\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public warning(message: string, context: LogContext = {}): void {\n    this.channel().warning(message, context)\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public error(message: string, context: LogContext = {}): void {\n    this.channel().error(message, context)\n  }\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public critical(message: string, context: LogContext = {}): void {\n    this.channel().critical(message, context)\n  }\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public alert(message: string, context: LogContext = {}): void {\n    this.channel().alert(message, context)\n  }\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public emergency(message: string, context: LogContext = {}): void {\n    this.channel().emergency(message, context)\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingService {\n    return this.channel().withContext(context)\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingService {\n    return this.channel().withoutContext(keys)\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this.channel().shareContext(context)\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this.channel().flushSharedContext()\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  public channel(name?: string): ILoggingService {\n    return this.driver(name)\n  }\n\n  /**\n   * Get the stack channel with the specified name\n   * @param name The stack name\n   */\n  public stack(name: string): ILoggingService {\n    return this.driver(name)\n  }\n\n  /**\n   * Get the driver with the specified name\n   * @param name The driver name\n   */\n  public driver(name?: string): ILoggingService {\n    const channelName = name || this._defaultChannel\n\n    if (!this._channels[channelName]) {\n      throw new Error(`Channel [${channelName}] not found.`)\n    }\n\n    return this._channels[channelName]\n  }\n\n  /**\n   * Extend the logging system with a custom driver creator\n   * @param driver The driver name\n   * @param callback The callback function that creates the driver\n   */\n  public extend(driver: string, callback: (config: any) => ILoggingService): void {\n    this._customDrivers[driver] = callback\n  }\n\n  /**\n   * Get all registered channels\n   */\n  public getChannels(): Record<string, ILoggingService> {\n    return this._channels\n  }\n\n  /**\n   * Get the default channel name\n   */\n  public getDefaultChannel(): string {\n    return this._defaultChannel\n  }\n\n  /**\n   * Set the default channel name\n   * @param name The default channel name\n   */\n  public setDefaultChannel(name: string): void {\n    if (!this._channels[name]) {\n      throw new Error(`Channel [${name}] not found.`)\n    }\n\n    this._defaultChannel = name\n  }\n\n  /**\n   * Create a channel with the specified configuration\n   * @param name The channel name\n   * @param type The channel type\n   * @param options The channel options\n   */\n  public createChannel(\n    name: string,\n    type: LogChannelType,\n    options?: ChannelOptions,\n  ): ILoggingService {\n    // Implementation would create the appropriate channel type\n    // For now, we'll just create a simple logger\n    const logger = new Logger(\n      {} as ILoggingChannel, // This would be replaced with the actual channel\n      this._eventDispatcher,\n    )\n\n    this._channels[name] = logger\n\n    return logger\n  }\n\n  /**\n   * Create a handler with the specified configuration\n   * @param type The handler type\n   * @param options The handler options\n   */\n  public createHandler(type: string, options?: HandlerOptions): ILogHandler {\n    // Implementation would create the appropriate handler type\n    return {} as ILogHandler\n  }\n\n  /**\n   * Create a formatter with the specified configuration\n   * @param type The formatter type\n   * @param options The formatter options\n   */\n  public createFormatter(type: string, options?: FormatterOptions): ILogFormatter {\n    // Implementation would create the appropriate formatter type\n    return {} as ILogFormatter\n  }\n\n  /**\n   * Create a processor with the specified configuration\n   * @param type The processor type\n   * @param options The processor options\n   */\n  public createProcessor(type: string, options?: ProcessorOptions): ILogProcessor {\n    // Implementation would create the appropriate processor type\n    return {} as ILogProcessor\n  }\n\n  /**\n   * Get the minimum log level\n   */\n  public getMinimumLevel(): LogLevel {\n    return this._minimumLevel\n  }\n\n  /**\n   * Set the minimum log level\n   * @param level The minimum log level\n   */\n  public setMinimumLevel(level: LogLevel): void {\n    this._minimumLevel = level\n  }\n}\n"]}
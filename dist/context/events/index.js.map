{"version":3,"sources":["../../../src/context/events/dehydrating.event.ts","../../../src/context/events/hydrated.event.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAOO,IAAM,0BAAN,MAA6D;AAAA;AAAA;AAAA;AAAA;AAAA,EASlE,YAAY,OAAqB,EAAA;AARjC,IAAA,IAAA,CAAQ,IAAO,GAAA,qBAAA;AACf,IAAQ,IAAA,CAAA,SAAA,uBAAsB,IAAK,EAAA;AAQjC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAA+B,GAAA;AACpC,IAAO,OAAA;AAAA,MACL,SAAS,IAAK,CAAA;AAAA,KAChB;AAAA;AACF;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,OAA2B,EAAA;AAC3C,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AAEnB;;;AClDO,IAAM,uBAAN,MAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW5D,WAAA,CAAY,SAAqB,MAAgB,EAAA;AAVjD,IAAA,IAAA,CAAQ,IAAO,GAAA,kBAAA;AACf,IAAQ,IAAA,CAAA,SAAA,uBAAsB,IAAK,EAAA;AAUjC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAA+B,GAAA;AACpC,IAAO,OAAA;AAAA,MACL,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,QAAQ,IAAK,CAAA;AAAA,KACf;AAAA;AACF;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,SAAoB,GAAA;AACzB,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AAEhB","file":"index.js","sourcesContent":["import type { IContextDehydrating } from '../../interfaces/events/dehydrating.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ContextDehydratingEvent is an implementation of the IContextDehydrating interface.\n * It represents an event that is dispatched when the context is being dehydrated.\n */\nexport class ContextDehydratingEvent implements IContextDehydrating {\n  private name = 'context.dehydrating'\n  private timestamp: Date = new Date()\n  private context: LogContext\n\n  /**\n   * Create a new ContextDehydratingEvent instance\n   * @param context The context data being dehydrated\n   */\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data being dehydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  public setContext(context: LogContext): void {\n    this.context = context\n  }\n}\n","import type { IContextHydrated } from '../../interfaces/events/hydrated.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ContextHydratedEvent is an implementation of the IContextHydrated interface.\n * It represents an event that is dispatched when the context has been hydrated.\n */\nexport class ContextHydratedEvent implements IContextHydrated {\n  private name = 'context.hydrated'\n  private timestamp: Date = new Date()\n  private context: LogContext\n  private source: string\n\n  /**\n   * Create a new ContextHydratedEvent instance\n   * @param context The context data that was hydrated\n   * @param source The source of the hydrated data\n   */\n  constructor(context: LogContext, source: string) {\n    this.context = context\n    this.source = source\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n      source: this.source,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data that was hydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the source of the hydrated data\n   */\n  public getSource(): string {\n    return this.source\n  }\n}\n"]}
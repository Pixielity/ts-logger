{"version":3,"sources":["../../../src/context/events/dehydrating.event.ts"],"names":[],"mappings":";;;;;;;;;;;AAOO,IAAM,0BAAN,MAA6D;AAAA;AAAA;AAAA;AAAA;AAAA,EASlE,YAAY,OAAqB,EAAA;AARjC,IAAA,IAAA,CAAQ,IAAO,GAAA,qBAAA;AACf,IAAQ,IAAA,CAAA,SAAA,uBAAsB,IAAK,EAAA;AAQjC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAA+B,GAAA;AACpC,IAAO,OAAA;AAAA,MACL,SAAS,IAAK,CAAA;AAAA,KAChB;AAAA;AACF;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,SAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,OAA2B,EAAA;AAC3C,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AAEnB","file":"dehydrating.event.mjs","sourcesContent":["import type { IContextDehydrating } from '../../interfaces/events/dehydrating.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ContextDehydratingEvent is an implementation of the IContextDehydrating interface.\n * It represents an event that is dispatched when the context is being dehydrated.\n */\nexport class ContextDehydratingEvent implements IContextDehydrating {\n  private name = 'context.dehydrating'\n  private timestamp: Date = new Date()\n  private context: LogContext\n\n  /**\n   * Create a new ContextDehydratingEvent instance\n   * @param context The context data being dehydrated\n   */\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data being dehydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  public setContext(context: LogContext): void {\n    this.context = context\n  }\n}\n"]}
{"version":3,"sources":["../../src/context/events/dehydrating.event.ts","../../src/context/events/hydrated.event.ts","../../src/context/repository.ts"],"names":[],"mappings":"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","file":"repository.mjs","sourcesContent":["import type { IContextDehydrating } from '../../interfaces/events/dehydrating.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * ContextDehydratingEvent is an implementation of the IContextDehydrating interface.\n * It represents an event that is dispatched when the context is being dehydrated.\n */\nexport class ContextDehydratingEvent implements IContextDehydrating {\n  private name = 'context.dehydrating'\n  private timestamp: Date = new Date()\n  private context: LogContext\n\n  /**\n   * Create a new ContextDehydratingEvent instance\n   * @param context The context data being dehydrated\n   */\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data being dehydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  public setContext(context: LogContext): void {\n    this.context = context\n  }\n}\n","import type { IContextHydrated } from '../../interfaces/events/hydrated.interface'\nimport type { LogContext } from '../../types/types'\n\n/**\n * ContextHydratedEvent is an implementation of the IContextHydrated interface.\n * It represents an event that is dispatched when the context has been hydrated.\n */\nexport class ContextHydratedEvent implements IContextHydrated {\n  private name = 'context.hydrated'\n  private timestamp: Date = new Date()\n  private context: LogContext\n  private source: string\n\n  /**\n   * Create a new ContextHydratedEvent instance\n   * @param context The context data that was hydrated\n   * @param source The source of the hydrated data\n   */\n  constructor(context: LogContext, source: string) {\n    this.context = context\n    this.source = source\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n      source: this.source,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data that was hydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the source of the hydrated data\n   */\n  public getSource(): string {\n    return this.source\n  }\n}\n","import { injectable } from 'inversify'\nimport type { IContextManagement } from '../interfaces/context/management.interface'\nimport type { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\nimport type { LogContext } from '../types/types'\nimport { ContextDehydratingEvent } from './events/dehydrating.event'\nimport { ContextHydratedEvent } from './events/hydrated.event'\n\n/**\n * ContextRepository is an implementation of the IContextManagement interface.\n * It provides methods for managing contextual data.\n */\n@injectable()\nexport class ContextRepository implements IContextManagement {\n  private context: LogContext = {}\n  private hiddenContext: LogContext = {}\n  private stacks: Record<string, any[]> = {}\n  private counters: Record<string, number> = {}\n  private eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new ContextRepository instance\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(eventDispatcher: IEventDispatcher) {\n    this.eventDispatcher = eventDispatcher\n  }\n\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  public add(key: string, value: any): void {\n    this.context[key] = value\n  }\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    return (this.context[key] as T) ?? (defaultValue as T)\n  }\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  public has(key: string): boolean {\n    return key in this.context\n  }\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  public forget(key: string): void {\n    delete this.context[key]\n  }\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  public addHidden(key: string, value: any): void {\n    this.hiddenContext[key] = value\n  }\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  public getHidden<T>(key: string, defaultValue?: T): T {\n    return (this.hiddenContext[key] as T) ?? (defaultValue as T)\n  }\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  public hasHidden(key: string): boolean {\n    return key in this.hiddenContext\n  }\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  public forgetHidden(key: string): void {\n    delete this.hiddenContext[key]\n  }\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  public push(key: string, value: any): void {\n    if (!this.stacks[key]) {\n      this.stacks[key] = []\n    }\n    this.stacks[key].push(value)\n  }\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  public pop<T>(key: string): T | undefined {\n    if (!this.stacks[key] || this.stacks[key].length === 0) {\n      return undefined\n    }\n    return this.stacks[key].pop() as T\n  }\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  public stackContains(key: string, value: any): boolean {\n    if (!this.stacks[key]) {\n      return false\n    }\n    return this.stacks[key].includes(value)\n  }\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  public increment(key: string, amount = 1): number {\n    if (!this.counters[key]) {\n      this.counters[key] = 0\n    }\n    this.counters[key] += amount\n    return this.counters[key]\n  }\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  public decrement(key: string, amount = 1): number {\n    if (!this.counters[key]) {\n      this.counters[key] = 0\n    }\n    this.counters[key] -= amount\n    return this.counters[key]\n  }\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  public scope<T>(callback: () => T): T {\n    // Save the current context\n    const savedContext = { ...this.context }\n    const savedHiddenContext = { ...this.hiddenContext }\n    const savedStacks = { ...this.stacks }\n    const savedCounters = { ...this.counters }\n\n    try {\n      // Execute the callback\n      return callback()\n    } finally {\n      // Restore the context\n      this.context = savedContext\n      this.hiddenContext = savedHiddenContext\n      this.stacks = savedStacks\n      this.counters = savedCounters\n    }\n  }\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  public dehydrate(): Record<string, any> {\n    // Create a dehydrated context\n    const dehydratedContext: Record<string, any> = {\n      context: { ...this.context },\n      counters: { ...this.counters },\n    }\n\n    // Dispatch a ContextDehydrating event\n    const event = new ContextDehydratingEvent(dehydratedContext.context)\n    this.eventDispatcher.dispatch(event)\n\n    // Update the dehydrated context with any changes made by event listeners\n    dehydratedContext.context = event.getContext()\n\n    return dehydratedContext\n  }\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  public hydrate(data: Record<string, any>): void {\n    try {\n      // Hydrate the context\n      if (data.context) {\n        this.context = { ...this.context, ...data.context }\n      }\n      if (data.counters) {\n        this.counters = { ...this.counters, ...data.counters }\n      }\n\n      // Dispatch a ContextHydrated event\n      const event = new ContextHydratedEvent(this.context, 'dehydrated')\n      this.eventDispatcher.dispatch(event)\n    } catch (error) {\n      console.error('Failed to hydrate context:', error)\n    }\n  }\n\n  /**\n   * Get all context data\n   */\n  public all(): LogContext {\n    return { ...this.context }\n  }\n\n  /**\n   * Clear all context data\n   */\n  public clear(): void {\n    this.context = {}\n    this.hiddenContext = {}\n    this.stacks = {}\n    this.counters = {}\n  }\n}\n"]}
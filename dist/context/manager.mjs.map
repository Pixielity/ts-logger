{"version":3,"sources":["../../src/interfaces/context/management.interface.ts","../../src/context/manager.ts"],"names":["IContextManagement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA4HO,IAAU,kBAAA;AAAA,CAAV,CAAUA,mBAAV,KAAA;AAIE,EAAMA,mBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,oBAAoB,CAAA;AAAA,CAJjC,EAAA,kBAAA,KAAA,kBAAA,GAAA,EAAA,CAAA,CAAA;;;AClHV,IAAM,iBAAN,MAAgD;AAAA;AAAA;AAAA;AAAA;AAAA,EASrD,YAA0C,iBAAuC,EAAA;AARjF,IAAA,IAAA,CAAQ,UAAsB,EAAC;AAC/B,IAAA,IAAA,CAAQ,MAAiC,GAAA,IAAA;AAQvC,IAAA,IAAA,CAAK,iBAAoB,GAAA,iBAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,OAA2B,EAAA;AAC3C,IAAA,IAAA,CAAK,UAAU,EAAE,GAAG,IAAK,CAAA,OAAA,EAAS,GAAG,OAAQ,EAAA;AAG7C,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAO,CAAG,EAAA;AAClD,MAAK,IAAA,CAAA,iBAAA,CAAkB,GAAI,CAAA,GAAA,EAAK,KAAK,CAAA;AAAA;AACvC;AACF;AAAA;AAAA;AAAA;AAAA,EAMO,cAAc,IAAsB,EAAA;AACzC,IAAA,MAAM,UAAyB,GAAA,EAAE,GAAG,IAAA,CAAK,OAAQ,EAAA;AACjD,IAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,MAAA,OAAO,WAAW,GAAG,CAAA;AACrB,MAAK,IAAA,CAAA,iBAAA,CAAkB,OAAO,GAAG,CAAA;AAAA;AAEnC,IAAA,IAAA,CAAK,OAAU,GAAA,UAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,IAAA,CAAK,UAAU,EAAC;AAAA;AAClB;AAAA;AAAA;AAAA,EAKO,WAA+B,GAAA;AACpC,IAAA,MAAM,aAAgB,GAAA,IAAI,cAAe,CAAA,IAAA,CAAK,iBAAiB,CAAA;AAC/D,IAAA,aAAA,CAAc,MAAS,GAAA,IAAA;AACvB,IAAO,OAAA,aAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA,EAMO,MAAM,OAAgC,EAAA;AAC3C,IAAK,IAAA,CAAA,UAAA,CAAW,OAAQ,CAAA,UAAA,EAAY,CAAA;AAAA;AAExC;AArEa,cAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW,EAAA;AAAA,EAUG,eAAA,CAAA,CAAA,EAAA,MAAA,CAAO,mBAAmB,CAAC,CAAA;AAAA,CAT7B,EAAA,cAAA,CAAA","file":"manager.mjs","sourcesContent":["import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManagement defines the contract for context management.\n * It provides methods for managing contextual data.\n */\nexport interface IContextManagement {\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  add(key: string, value: any): void\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  get<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  has(key: string): boolean\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  forget(key: string): void\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  addHidden(key: string, value: any): void\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  getHidden<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  hasHidden(key: string): boolean\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  forgetHidden(key: string): void\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  push(key: string, value: any): void\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  pop<T>(key: string): T | undefined\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  stackContains(key: string, value: any): boolean\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  increment(key: string, amount?: number): number\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  decrement(key: string, amount?: number): number\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  scope<T>(callback: () => T): T\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  dehydrate(): Record<string, any>\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  hydrate(data: Record<string, any>): void\n\n  /**\n   * Get all context data\n   */\n  all(): LogContext\n\n  /**\n   * Clear all context data\n   */\n  clear(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManagement {\n  /**\n   * Symbol for injecting the context management\n   */\n  export const $ = Symbol.for('IContextManagement')\n}\n","import { injectable, inject } from 'inversify'\nimport type { IContextManager } from '../interfaces/context/manager.interface'\nimport { IContextManagement } from '../interfaces/context/management.interface'\nimport type { LogContext } from '../types/log-context.type'\n\n/**\n * ContextManager is an implementation of the IContextManager interface.\n * It provides methods for managing contextual data across components.\n */\n@injectable()\nexport class ContextManager implements IContextManager {\n  private context: LogContext = {}\n  private parent: IContextManager | null = null\n  private contextRepository: IContextManagement\n\n  /**\n   * Create a new ContextManager instance\n   * @param contextRepository The context repository to use\n   */\n  constructor(@inject(IContextManagement.$) contextRepository: IContextManagement) {\n    this.contextRepository = contextRepository\n  }\n\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  public addContext(context: LogContext): void {\n    this.context = { ...this.context, ...context }\n\n    // Add the context to the repository\n    for (const [key, value] of Object.entries(context)) {\n      this.contextRepository.add(key, value)\n    }\n  }\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  public removeContext(keys: string[]): void {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n      this.contextRepository.forget(key)\n    }\n    this.context = newContext\n  }\n\n  /**\n   * Get all contextual data\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Clear all contextual data\n   */\n  public clearContext(): void {\n    this.context = {}\n  }\n\n  /**\n   * Create a scoped context manager\n   */\n  public createScope(): IContextManager {\n    const scopedManager = new ContextManager(this.contextRepository)\n    scopedManager.parent = this\n    return scopedManager\n  }\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  public merge(manager: IContextManager): void {\n    this.addContext(manager.getContext())\n  }\n}\n"]}
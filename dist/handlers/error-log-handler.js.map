{"version":3,"sources":["../../src/constants/log-level-emoji.constant.ts","../../src/handlers/error-log-handler.ts"],"names":["ErrorLogHandler","injectable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAM,aAA0C,GAAA;AAAA,EACrD,+BAAsB,WAAA;AAAA,EACtB,uBAAkB,WAAA;AAAA,EAClB,6BAAqB,QAAA;AAAA,EACrB,uBAAkB,WAAA;AAAA,EAClB,2BAAoB,cAAA;AAAA,EACpB,yBAAmB,WAAA;AAAA,EACnB,qBAAiB,QAAA;AAAA,EACjB,uBAAkB;AACpB,CAAA;;;ACHaA,0BAAN,qBAAkD,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvD,WAAA,CAAY,OAAsC,GAAA,EAAI,EAAA;AARtD,IAAA,IAAA,CAAQ,IAAO,GAAA,UAAA;AACf,IAAA,IAAA,CAAQ,IAAgC,GAAA,IAAA;AACxC,IAAA,IAAA,CAAQ,YAAe,GAAA,IAAA;AAOrB,IAAI,IAAA,OAAA,CAAQ,iBAAiB,MAAW,EAAA;AACtC,MAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA;AAAA;AAC9B;AACF;AAAA;AAAA;AAAA;AAAA,EAMO,OAAO,MAAyB,EAAA;AACrC,IAAA,MAAM,QAAQ,MAAO,CAAA,KAAA;AACrB,IAAA,MAAM,UAAU,MAAO,CAAA,OAAA;AACvB,IAAA,MAAM,UAAU,MAAO,CAAA,OAAA;AACvB,IAAA,MAAM,WAAW,MAAO,CAAA,QAAA;AACxB,IAAA,MAAM,QAAQ,MAAO,CAAA,KAAA;AAGrB,IAAA,IAAI,gBAAmB,GAAA,OAAA;AACvB,IAAA,IAAI,IAAK,CAAA,YAAA,IAAgB,aAAc,CAAA,KAAmC,CAAG,EAAA;AAC3E,MAAA,gBAAA,GAAmB,CAAG,EAAA,aAAA,CAAc,KAAmC,CAAC,IAAI,gBAAgB,CAAA,CAAA;AAAA;AAI9F,IAAI,IAAA,YAAA,GAAe,IAAI,QAAS,CAAA,WAAA,EAAa,CAAM,GAAA,EAAA,MAAA,CAAO,SAAS,CAAA,EAAA,EAAK,gBAAgB,CAAA,CAAA;AAGxF,IAAA,IAAI,MAAO,CAAA,IAAA,CAAK,OAAO,CAAA,CAAE,SAAS,CAAG,EAAA;AACnC,MAAA,YAAA,IAAgB,CAAI,CAAA,EAAA,IAAA,CAAK,SAAU,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA;AAI7C,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA;AAG1B,IAAA,IAAI,KAAO,EAAA;AACT,MAAQ,OAAA,CAAA,KAAA,CAAM,gBAAgB,KAAK,CAAA;AAAA;AAIrC,IAAA,IAAI,KAAK,IAAM,EAAA;AACb,MAAK,IAAA,CAAA,IAAA,CAAK,OAAO,MAAM,CAAA;AAAA;AACzB;AACF;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,MAA4B,EAAA;AAC5C,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA,EAMO,QAAQ,OAA6C,EAAA;AAC1D,IAAA,IAAA,CAAK,IAAO,GAAA,OAAA;AACZ,IAAO,OAAA,OAAA;AAAA;AACT;AAAA;AAAA;AAAA,EAKO,OAAmC,GAAA;AACxC,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,gBAAgB,OAAwB,EAAA;AAC7C,IAAA,IAAA,CAAK,YAAe,GAAA,OAAA;AAAA;AACtB;AAAA;AAAA;AAAA,EAKO,qBAAiC,GAAA;AACtC,IAAA,OAAO,IAAK,CAAA,YAAA;AAAA;AAEhB;AAnGaA,uBAAN,GAAA,eAAA,CAAA;AAAA,EADNC,oBAAW;AAAA,CACC,EAAAD,uBAAA,CAAA","file":"error-log-handler.js","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '🚨',\n  [LogLevel.ALERT]: '🔔',\n  [LogLevel.CRITICAL]: '❗',\n  [LogLevel.ERROR]: '🔴',\n  [LogLevel.WARNING]: '⚠️',\n  [LogLevel.NOTICE]: '📝',\n  [LogLevel.INFO]: '✅',\n  [LogLevel.DEBUG]: '🛠️',\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IErrorLogHandler } from '../interfaces/handlers/error-log-handler.interface'\n\n/**\n * ErrorLogHandler is an implementation of the IErrorLogHandler interface.\n * It handles log records by outputting them to the browser's error log.\n */\n@injectable()\nexport class ErrorLogHandler implements IErrorLogHandler {\n  private name = 'errorLog'\n  private next: IErrorLogHandler | null = null\n  private emojiSupport = true\n\n  /**\n   * Create a new ErrorLogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Format the error message\n    let errorMessage = `[${datetime.toISOString()}] [${record.levelName}] ${formattedMessage}`\n\n    // Add context if it's not empty\n    if (Object.keys(context).length > 0) {\n      errorMessage += ` ${JSON.stringify(context)}`\n    }\n\n    // Log to the console.error\n    console.error(errorMessage)\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.error('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IErrorLogHandler): IErrorLogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IErrorLogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n"]}
{"version":3,"sources":["../../src/constants/log-level-emoji.constant.ts","../../src/handlers/http-handler.ts","../../src/handlers/slack-webhook-handler.ts"],"names":["injectable","SlackWebhookHandler"],"mappings":"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","file":"slack-webhook-handler.js","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: 'üö®',\n  [LogLevel.ALERT]: 'üîî',\n  [LogLevel.CRITICAL]: '‚ùó',\n  [LogLevel.ERROR]: 'üî¥',\n  [LogLevel.WARNING]: '‚ö†Ô∏è',\n  [LogLevel.NOTICE]: 'üìù',\n  [LogLevel.INFO]: '‚úÖ',\n  [LogLevel.DEBUG]: 'üõ†Ô∏è',\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IHttpHandler } from '../interfaces/handlers/http-handler.interface'\n\n/**\n * HttpHandler is an implementation of the IHttpHandler interface.\n * It handles log records by sending them to a remote server via HTTP.\n */\n@injectable()\nexport class HttpHandler implements IHttpHandler {\n  private name = 'http'\n  private next: IHttpHandler | null = null\n  private url = ''\n  private method = 'POST'\n  private headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  }\n  private maxRetries = 3\n\n  /**\n   * Create a new HttpHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      method?: string\n      headers?: Record<string, string>\n      maxRetries?: number\n    } = {},\n  ) {\n    if (options.url) {\n      this.url = options.url\n    }\n    if (options.method) {\n      this.method = options.method\n    }\n    if (options.headers) {\n      this.headers = { ...this.headers, ...options.headers }\n    }\n    if (options.maxRetries !== undefined) {\n      this.maxRetries = options.maxRetries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.url) {\n      console.error('HTTP handler URL not configured')\n      return\n    }\n\n    const payload = {\n      level: record.level,\n      levelName: record.levelName,\n      message: record.message,\n      context: record.context,\n      datetime: record.datetime.toISOString(),\n      stack: record.stack,\n    }\n\n    let retries = 0\n    let success = false\n\n    while (!success && retries <= this.maxRetries) {\n      try {\n        const response = await fetch(this.url, {\n          method: this.method,\n          headers: this.headers,\n          body: JSON.stringify(payload),\n        })\n\n        if (response.ok) {\n          success = true\n        } else {\n          retries++\n          if (retries <= this.maxRetries) {\n            // Wait before retrying (exponential backoff)\n            await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n          }\n        }\n      } catch (error) {\n        retries++\n        if (retries <= this.maxRetries) {\n          // Wait before retrying (exponential backoff)\n          await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n        } else {\n          console.error('Failed to send log to HTTP endpoint:', error)\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return !!this.url && typeof fetch !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IHttpHandler): IHttpHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IHttpHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Set the name of the handler\n   * @param name The name to set\n   */\n  public setName(name: string): void {\n    this.name = name\n  }\n\n  /**\n   * Get the URL to send log records to\n   */\n  public getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  public setUrl(url: string): void {\n    this.url = url\n  }\n\n  /**\n   * Get the HTTP method to use\n   */\n  public getMethod(): string {\n    return this.method\n  }\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  public setMethod(method: string): void {\n    this.method = method\n  }\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  public getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  public setHeaders(headers: Record<string, string>): void {\n    this.headers = headers\n  }\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  public getMaxRetries(): number {\n    return this.maxRetries\n  }\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  public setMaxRetries(maxRetries: number): void {\n    this.maxRetries = maxRetries\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport { HttpHandler } from './http-handler'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISlackWebhookHandler } from '../interfaces/handlers/slack-webhook-handler.interface'\n\n/**\n * SlackWebhookHandler is an implementation of the ISlackWebhookHandler interface.\n * It handles log records by sending them to a Slack webhook.\n */\n@injectable()\nexport class SlackWebhookHandler extends HttpHandler implements ISlackWebhookHandler {\n  private channel = '#logs'\n  private username = 'ts-log'\n  private iconEmoji = ':memo:'\n  private emojiSupport = true\n\n  /**\n   * Create a new SlackWebhookHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      channel?: string\n      username?: string\n      iconEmoji?: string\n      emojiSupport?: boolean\n      maxRetries?: number\n    } = {},\n  ) {\n    super({\n      url: options.url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      maxRetries: options.maxRetries,\n    })\n\n    if (options.channel) {\n      this.channel = options.channel\n    }\n    if (options.username) {\n      this.username = options.username\n    }\n    if (options.iconEmoji) {\n      this.iconEmoji = options.iconEmoji\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n\n    this.setName('slack')\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.getUrl()) {\n      console.error('Slack webhook URL not configured')\n      return\n    }\n\n    // Format the message with emoji if enabled\n    let message = record.message\n    if (this.emojiSupport && LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]) {\n      message = `${LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]} ${message}`\n    }\n\n    // Create the Slack payload\n    const payload = {\n      channel: this.channel,\n      username: this.username,\n      icon_emoji: this.iconEmoji,\n      text: `[${record.levelName}] ${message}`,\n      attachments: [\n        {\n          color: this.getColorForLevel(record.level),\n          fields: [\n            {\n              title: 'Time',\n              value: record.datetime.toISOString(),\n              short: true,\n            },\n            {\n              title: 'Level',\n              value: record.levelName,\n              short: true,\n            },\n          ],\n          fallback: `[${record.levelName}] ${message}`,\n        },\n      ],\n    }\n\n    // Add context as fields if it's not empty\n    if (Object.keys(record.context).length > 0) {\n      for (const [key, value] of Object.entries(record.context)) {\n        payload.attachments[0].fields.push({\n          title: key,\n          value: JSON.stringify(value),\n          short: false,\n        })\n      }\n    }\n\n    // Add stack trace if it exists\n    if (record.stack) {\n      payload.attachments[0].fields.push({\n        title: 'Stack Trace',\n        value: `\\`\\`\\`${record.stack}\\`\\`\\``,\n        short: false,\n      })\n    }\n\n    // Override the HTTP handler's payload\n    const originalHeaders = this.getHeaders()\n    this.setHeaders({\n      ...originalHeaders,\n      'Content-Type': 'application/json',\n    })\n\n    // Use the HTTP handler to send the request\n    await super.handle({\n      ...record,\n      message: JSON.stringify(payload),\n    })\n  }\n\n  /**\n   * Get the color for a log level\n   * @param level The log level\n   */\n  private getColorForLevel(level: string): string {\n    switch (level) {\n      case 'emergency':\n      case 'alert':\n      case 'critical':\n      case 'error':\n        return 'danger'\n      case 'warning':\n        return 'warning'\n      case 'notice':\n      case 'info':\n        return 'good'\n      case 'debug':\n      default:\n        return '#CCCCCC'\n    }\n  }\n\n  /**\n   * Get the Slack channel to send log records to\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  public setChannel(channel: string): void {\n    this.channel = channel\n  }\n\n  /**\n   * Get the username to use when sending log records\n   */\n  public getUsername(): string {\n    return this.username\n  }\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  public setUsername(username: string): void {\n    this.username = username\n  }\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  public getIconEmoji(): string {\n    return this.iconEmoji\n  }\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  public setIconEmoji(emoji: string): void {\n    this.iconEmoji = emoji\n  }\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n"]}
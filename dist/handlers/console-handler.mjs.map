{"version":3,"sources":["../../src/constants/constants.ts","../../src/handlers/console-handler.ts"],"names":[],"mappings":"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","file":"console-handler.mjs","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: 'üö®',\n  [LogLevel.ALERT]: 'üîî',\n  [LogLevel.CRITICAL]: '‚ùó',\n  [LogLevel.ERROR]: 'üî¥',\n  [LogLevel.WARNING]: '‚ö†Ô∏è',\n  [LogLevel.NOTICE]: 'üìù',\n  [LogLevel.INFO]: '‚úÖ',\n  [LogLevel.DEBUG]: 'üõ†Ô∏è',\n}\n\n/**\n * LogLevelColor maps LogLevel enum values to CSS color values for visual representation.\n */\nexport const LogLevelColor: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '#FF0000', // Red\n  [LogLevel.ALERT]: '#FF4500', // OrangeRed\n  [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n  [LogLevel.ERROR]: '#FFA500', // Orange\n  [LogLevel.WARNING]: '#FFD700', // Gold\n  [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n  [LogLevel.INFO]: '#32CD32', // LimeGreen\n  [LogLevel.DEBUG]: '#808080', // Gray\n}\n","import { injectable } from 'inversify'\nimport type { IConsoleHandler } from '../interfaces/handlers/console-handler.interface'\nimport type { LogRecord } from '../types/types'\nimport { HandlerType } from '../enums/handler-type.enum'\nimport { LogLevelColor, LogLevelEmoji } from '../constants'\nimport { LogLevel } from '../enums'\n\n/**\n * ConsoleHandler is an implementation of the IConsoleHandler interface.\n * It handles log records by outputting them to the browser console.\n */\n@injectable()\nexport class ConsoleHandler implements IConsoleHandler {\n  private name = HandlerType.CONSOLE\n  private next: IConsoleHandler | null = null\n  private emojiSupport = true\n  private colorSupport = true\n\n  /**\n   * Create a new ConsoleHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean; colorSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level as LogLevel\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji and color\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Log to the console with the appropriate method\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      console.log(\n        `%c${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`,\n        `color: ${color}`,\n      )\n    } else {\n      console.log(`${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`)\n    }\n\n    // Log the context if it's not empty\n    if (Object.keys(context).length > 0) {\n      console.log('Context:', context)\n    }\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.log('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IConsoleHandler): IConsoleHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IConsoleHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n"]}
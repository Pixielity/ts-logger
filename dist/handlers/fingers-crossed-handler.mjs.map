{"version":3,"sources":["../../src/constants/log-level-value.constant.ts","../../src/handlers/fingers-crossed-handler.ts"],"names":[],"mappings":"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","file":"fingers-crossed-handler.mjs","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelValue } from '../constants'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ILogHandler } from '../interfaces/handlers/log-handler.interface'\nimport type { IFingersCrossedHandler } from '../interfaces/handlers/fingers-crossed-handler.interface'\n\n/**\n * FingersCrossedHandler is an implementation of the IFingersCrossedHandler interface.\n * It buffers log records until a certain action level is reached, then passes all buffered records to the next handler.\n */\n@injectable()\nexport class FingersCrossedHandler implements IFingersCrossedHandler {\n  private name = 'fingersCrossed'\n  private next: ILogHandler | null = null\n  private actionLevel: LogLevel\n  private bufferSize: number\n  private buffer: LogRecord[] = []\n  private activated = false\n  private handler: ILogHandler\n\n  /**\n   * Create a new FingersCrossedHandler instance\n   * @param handler The handler to use when activated\n   * @param options Options for the handler\n   */\n  constructor(handler: ILogHandler, options: { actionLevel?: LogLevel; bufferSize?: number } = {}) {\n    this.handler = handler\n    this.actionLevel = options.actionLevel || ('warning' as LogLevel)\n    this.bufferSize = options.bufferSize || 0 // 0 means unlimited\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Check if the handler is already activated\n    if (this.activated) {\n      // Pass the record directly to the handler\n      this.handler.handle(record)\n    } else {\n      // Check if the record's level is at or above the action level\n      if (this.isActionLevel(record.level as LogLevel)) {\n        // Activate the handler\n        this.activated = true\n\n        // Pass all buffered records to the handler\n        for (const bufferedRecord of this.buffer) {\n          this.handler.handle(bufferedRecord)\n        }\n\n        // Clear the buffer\n        this.buffer = []\n\n        // Pass the current record to the handler\n        this.handler.handle(record)\n      } else {\n        // Buffer the record\n        this.buffer.push(record)\n\n        // Trim the buffer if necessary\n        if (this.bufferSize > 0 && this.buffer.length > this.bufferSize) {\n          this.buffer.shift()\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if a log level is at or above the action level\n   * @param level The log level to check\n   */\n  private isActionLevel(level: LogLevel): boolean {\n    return LogLevelValue[level] >= LogLevelValue[this.actionLevel]\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILogHandler): ILogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the action level\n   */\n  public getActionLevel(): LogLevel {\n    return this.actionLevel\n  }\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  public setActionLevel(level: LogLevel): void {\n    this.actionLevel = level\n  }\n\n  /**\n   * Get the buffer size\n   */\n  public getBufferSize(): number {\n    return this.bufferSize\n  }\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  public setBufferSize(size: number): void {\n    this.bufferSize = size\n  }\n\n  /**\n   * Get whether the handler is activated\n   */\n  public isActivated(): boolean {\n    return this.activated\n  }\n\n  /**\n   * Reset the handler\n   */\n  public reset(): void {\n    this.activated = false\n    this.buffer = []\n  }\n}\n"]}
{"version":3,"sources":["../../src/constants/log-level-color.constant.ts","../../src/constants/log-level-emoji.constant.ts","../../src/constants/log-level-value.constant.ts","../../src/handlers/console-handler.ts","../../src/handlers/error-log-handler.ts","../../src/handlers/fingers-crossed-handler.ts","../../src/handlers/http-handler.ts","../../src/handlers/indexed-db-handler.ts","../../src/handlers/local-storage-handler.ts","../../src/handlers/slack-webhook-handler.ts","../../src/handlers/syslog-handler.ts"],"names":["injectable"],"mappings":"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","file":"index.mjs","sourcesContent":["import { LogLevel } from '../enums'\n\n/**\n * LogLevelColor maps LogLevel enum values to CSS color values for visual representation.\n */\nexport const LogLevelColor: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '#FF0000', // Red\n  [LogLevel.ALERT]: '#FF4500', // OrangeRed\n  [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n  [LogLevel.ERROR]: '#FFA500', // Orange\n  [LogLevel.WARNING]: '#FFD700', // Gold\n  [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n  [LogLevel.INFO]: '#32CD32', // LimeGreen\n  [LogLevel.DEBUG]: '#808080', // Gray\n}\n","import { LogLevel } from '../enums'\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '🚨',\n  [LogLevel.ALERT]: '🔔',\n  [LogLevel.CRITICAL]: '❗',\n  [LogLevel.ERROR]: '🔴',\n  [LogLevel.WARNING]: '⚠️',\n  [LogLevel.NOTICE]: '📝',\n  [LogLevel.INFO]: '✅',\n  [LogLevel.DEBUG]: '🛠️',\n}\n","import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevel } from '../enums'\nimport { HandlerType } from '../enums/handler-type.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport { LogLevelColor, LogLevelEmoji } from '../constants'\nimport type { IConsoleHandler } from '../interfaces/handlers/console-handler.interface'\n\n/**\n * ConsoleHandler is an implementation of the IConsoleHandler interface.\n * It handles log records by outputting them to the browser console.\n */\n@injectable()\nexport class ConsoleHandler implements IConsoleHandler {\n  private name = HandlerType.CONSOLE\n  private next: IConsoleHandler | null = null\n  private emojiSupport = true\n  private colorSupport = true\n\n  /**\n   * Create a new ConsoleHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean; colorSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level as LogLevel\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji and color\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Log to the console with the appropriate method\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      console.log(\n        `%c${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`,\n        `color: ${color}`,\n      )\n    } else {\n      console.log(`${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`)\n    }\n\n    // Log the context if it's not empty\n    if (Object.keys(context).length > 0) {\n      console.log('Context:', context)\n    }\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.log('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IConsoleHandler): IConsoleHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IConsoleHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IErrorLogHandler } from '../interfaces/handlers/error-log-handler.interface'\n\n/**\n * ErrorLogHandler is an implementation of the IErrorLogHandler interface.\n * It handles log records by outputting them to the browser's error log.\n */\n@injectable()\nexport class ErrorLogHandler implements IErrorLogHandler {\n  private name = 'errorLog'\n  private next: IErrorLogHandler | null = null\n  private emojiSupport = true\n\n  /**\n   * Create a new ErrorLogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Format the error message\n    let errorMessage = `[${datetime.toISOString()}] [${record.levelName}] ${formattedMessage}`\n\n    // Add context if it's not empty\n    if (Object.keys(context).length > 0) {\n      errorMessage += ` ${JSON.stringify(context)}`\n    }\n\n    // Log to the console.error\n    console.error(errorMessage)\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.error('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IErrorLogHandler): IErrorLogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IErrorLogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelValue } from '../constants'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ILogHandler } from '../interfaces/handlers/log-handler.interface'\nimport type { IFingersCrossedHandler } from '../interfaces/handlers/fingers-crossed-handler.interface'\n\n/**\n * FingersCrossedHandler is an implementation of the IFingersCrossedHandler interface.\n * It buffers log records until a certain action level is reached, then passes all buffered records to the next handler.\n */\n@injectable()\nexport class FingersCrossedHandler implements IFingersCrossedHandler {\n  private name = 'fingersCrossed'\n  private next: ILogHandler | null = null\n  private actionLevel: LogLevel\n  private bufferSize: number\n  private buffer: LogRecord[] = []\n  private activated = false\n  private handler: ILogHandler\n\n  /**\n   * Create a new FingersCrossedHandler instance\n   * @param handler The handler to use when activated\n   * @param options Options for the handler\n   */\n  constructor(handler: ILogHandler, options: { actionLevel?: LogLevel; bufferSize?: number } = {}) {\n    this.handler = handler\n    this.actionLevel = options.actionLevel || ('warning' as LogLevel)\n    this.bufferSize = options.bufferSize || 0 // 0 means unlimited\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Check if the handler is already activated\n    if (this.activated) {\n      // Pass the record directly to the handler\n      this.handler.handle(record)\n    } else {\n      // Check if the record's level is at or above the action level\n      if (this.isActionLevel(record.level as LogLevel)) {\n        // Activate the handler\n        this.activated = true\n\n        // Pass all buffered records to the handler\n        for (const bufferedRecord of this.buffer) {\n          this.handler.handle(bufferedRecord)\n        }\n\n        // Clear the buffer\n        this.buffer = []\n\n        // Pass the current record to the handler\n        this.handler.handle(record)\n      } else {\n        // Buffer the record\n        this.buffer.push(record)\n\n        // Trim the buffer if necessary\n        if (this.bufferSize > 0 && this.buffer.length > this.bufferSize) {\n          this.buffer.shift()\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if a log level is at or above the action level\n   * @param level The log level to check\n   */\n  private isActionLevel(level: LogLevel): boolean {\n    return LogLevelValue[level] >= LogLevelValue[this.actionLevel]\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILogHandler): ILogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the action level\n   */\n  public getActionLevel(): LogLevel {\n    return this.actionLevel\n  }\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  public setActionLevel(level: LogLevel): void {\n    this.actionLevel = level\n  }\n\n  /**\n   * Get the buffer size\n   */\n  public getBufferSize(): number {\n    return this.bufferSize\n  }\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  public setBufferSize(size: number): void {\n    this.bufferSize = size\n  }\n\n  /**\n   * Get whether the handler is activated\n   */\n  public isActivated(): boolean {\n    return this.activated\n  }\n\n  /**\n   * Reset the handler\n   */\n  public reset(): void {\n    this.activated = false\n    this.buffer = []\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IHttpHandler } from '../interfaces/handlers/http-handler.interface'\n\n/**\n * HttpHandler is an implementation of the IHttpHandler interface.\n * It handles log records by sending them to a remote server via HTTP.\n */\n@injectable()\nexport class HttpHandler implements IHttpHandler {\n  private name = 'http'\n  private next: IHttpHandler | null = null\n  private url = ''\n  private method = 'POST'\n  private headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  }\n  private maxRetries = 3\n\n  /**\n   * Create a new HttpHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      method?: string\n      headers?: Record<string, string>\n      maxRetries?: number\n    } = {},\n  ) {\n    if (options.url) {\n      this.url = options.url\n    }\n    if (options.method) {\n      this.method = options.method\n    }\n    if (options.headers) {\n      this.headers = { ...this.headers, ...options.headers }\n    }\n    if (options.maxRetries !== undefined) {\n      this.maxRetries = options.maxRetries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.url) {\n      console.error('HTTP handler URL not configured')\n      return\n    }\n\n    const payload = {\n      level: record.level,\n      levelName: record.levelName,\n      message: record.message,\n      context: record.context,\n      datetime: record.datetime.toISOString(),\n      stack: record.stack,\n    }\n\n    let retries = 0\n    let success = false\n\n    while (!success && retries <= this.maxRetries) {\n      try {\n        const response = await fetch(this.url, {\n          method: this.method,\n          headers: this.headers,\n          body: JSON.stringify(payload),\n        })\n\n        if (response.ok) {\n          success = true\n        } else {\n          retries++\n          if (retries <= this.maxRetries) {\n            // Wait before retrying (exponential backoff)\n            await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n          }\n        }\n      } catch (error) {\n        retries++\n        if (retries <= this.maxRetries) {\n          // Wait before retrying (exponential backoff)\n          await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n        } else {\n          console.error('Failed to send log to HTTP endpoint:', error)\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return !!this.url && typeof fetch !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IHttpHandler): IHttpHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IHttpHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Set the name of the handler\n   * @param name The name to set\n   */\n  public setName(name: string): void {\n    this.name = name\n  }\n\n  /**\n   * Get the URL to send log records to\n   */\n  public getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  public setUrl(url: string): void {\n    this.url = url\n  }\n\n  /**\n   * Get the HTTP method to use\n   */\n  public getMethod(): string {\n    return this.method\n  }\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  public setMethod(method: string): void {\n    this.method = method\n  }\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  public getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  public setHeaders(headers: Record<string, string>): void {\n    this.headers = headers\n  }\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  public getMaxRetries(): number {\n    return this.maxRetries\n  }\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  public setMaxRetries(maxRetries: number): void {\n    this.maxRetries = maxRetries\n  }\n}\n","import Dexie from 'dexie'\nimport { injectable, postConstruct } from 'inversify'\n\nimport { HandlerType } from '../enums/handler-type.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IIndexedDBHandler } from '../interfaces/handlers/indexed-db-handler.interface'\n\n/**\n * IndexedDBHandler is an implementation of the IIndexedDBHandler interface.\n * It handles log records by storing them in the browser's IndexedDB.\n */\n@injectable()\nexport class IndexedDBHandler implements IIndexedDBHandler {\n  private name = HandlerType.INDEXED_DB\n  private next: IIndexedDBHandler | null = null\n  private databaseName = 'ts-log'\n  private tableName = 'logs'\n  private maxEntries = 1000\n  private db: Dexie | null = null\n\n  /**\n   * Create a new IndexedDBHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { databaseName?: string; tableName?: string; maxEntries?: number } = {}) {\n    if (options.databaseName) {\n      this.databaseName = options.databaseName\n    }\n    if (options.tableName) {\n      this.tableName = options.tableName\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Initialize the database\n   * This method is called automatically after the constructor\n   */\n  @postConstruct()\n  private initDatabase(): void {\n    if (typeof window === 'undefined' || !window.indexedDB) {\n      return\n    }\n\n    try {\n      this.db = new Dexie(this.databaseName)\n      this.db.version(1).stores({\n        [this.tableName]: '++id,level,datetime',\n      })\n    } catch (error) {\n      console.error('Failed to initialize IndexedDB:', error)\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.db) {\n      console.error('IndexedDB not initialized')\n      return\n    }\n\n    try {\n      // Add the log record to the database\n      await this.db.table(this.tableName).add({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: JSON.stringify(record.context),\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim old entries if necessary\n      const count = await this.db.table(this.tableName).count()\n      if (count > this.maxEntries) {\n        const entriesToDelete = count - this.maxEntries\n        const oldestEntries = await this.db\n          .table(this.tableName)\n          .orderBy('datetime')\n          .limit(entriesToDelete)\n          .toArray()\n        const oldestIds = oldestEntries.map((entry) => entry.id)\n        await this.db.table(this.tableName).bulkDelete(oldestIds)\n      }\n    } catch (error) {\n      console.error('Failed to store log in IndexedDB:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof window !== 'undefined' && !!window.indexedDB && !!this.db\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IIndexedDBHandler): IIndexedDBHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IIndexedDBHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the database name\n   */\n  public getDatabaseName(): string {\n    return this.databaseName\n  }\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  public setDatabaseName(name: string): void {\n    this.databaseName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the table name\n   */\n  public getTableName(): string {\n    return this.tableName\n  }\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  public setTableName(name: string): void {\n    this.tableName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public async getEntries(): Promise<any[]> {\n    if (!this.db) {\n      return []\n    }\n\n    try {\n      const entries = await this.db.table(this.tableName).toArray()\n      return entries.map((entry) => ({\n        ...entry,\n        context: JSON.parse(entry.context),\n      }))\n    } catch (error) {\n      console.error('Failed to retrieve logs from IndexedDB:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public async clearEntries(): Promise<void> {\n    if (!this.db) {\n      return\n    }\n\n    try {\n      await this.db.table(this.tableName).clear()\n    } catch (error) {\n      console.error('Failed to clear logs from IndexedDB:', error)\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ILocalStorageHandler } from '../interfaces/handlers/local-storage-handler.interface'\n\n/**\n * LocalStorageHandler is an implementation of the ILocalStorageHandler interface.\n * It handles log records by storing them in the browser's localStorage.\n */\n@injectable()\nexport class LocalStorageHandler implements ILocalStorageHandler {\n  private name = 'localStorage'\n  private next: ILocalStorageHandler | null = null\n  private key = 'ts-log'\n  private maxEntries = 100\n\n  /**\n   * Create a new LocalStorageHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { key?: string; maxEntries?: number } = {}) {\n    if (options.key) {\n      this.key = options.key\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    try {\n      // Get existing entries\n      const entries = this.getEntries()\n\n      // Add the new entry\n      entries.push({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: record.context,\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim entries if necessary\n      if (entries.length > this.maxEntries) {\n        entries.splice(0, entries.length - this.maxEntries)\n      }\n\n      // Save entries\n      localStorage.setItem(this.key, JSON.stringify(entries))\n    } catch (error) {\n      console.error('Failed to store log in localStorage:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof localStorage !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILocalStorageHandler): ILocalStorageHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILocalStorageHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the localStorage key used to store logs\n   */\n  public getKey(): string {\n    return this.key\n  }\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  public setKey(key: string): void {\n    this.key = key\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public getEntries(): any[] {\n    try {\n      const entriesJson = localStorage.getItem(this.key)\n      return entriesJson ? JSON.parse(entriesJson) : []\n    } catch (error) {\n      console.error('Failed to retrieve logs from localStorage:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public clearEntries(): void {\n    try {\n      localStorage.removeItem(this.key)\n    } catch (error) {\n      console.error('Failed to clear logs from localStorage:', error)\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport { HttpHandler } from './http-handler'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISlackWebhookHandler } from '../interfaces/handlers/slack-webhook-handler.interface'\n\n/**\n * SlackWebhookHandler is an implementation of the ISlackWebhookHandler interface.\n * It handles log records by sending them to a Slack webhook.\n */\n@injectable()\nexport class SlackWebhookHandler extends HttpHandler implements ISlackWebhookHandler {\n  private channel = '#logs'\n  private username = 'ts-log'\n  private iconEmoji = ':memo:'\n  private emojiSupport = true\n\n  /**\n   * Create a new SlackWebhookHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      channel?: string\n      username?: string\n      iconEmoji?: string\n      emojiSupport?: boolean\n      maxRetries?: number\n    } = {},\n  ) {\n    super({\n      url: options.url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      maxRetries: options.maxRetries,\n    })\n\n    if (options.channel) {\n      this.channel = options.channel\n    }\n    if (options.username) {\n      this.username = options.username\n    }\n    if (options.iconEmoji) {\n      this.iconEmoji = options.iconEmoji\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n\n    this.setName('slack')\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.getUrl()) {\n      console.error('Slack webhook URL not configured')\n      return\n    }\n\n    // Format the message with emoji if enabled\n    let message = record.message\n    if (this.emojiSupport && LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]) {\n      message = `${LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]} ${message}`\n    }\n\n    // Create the Slack payload\n    const payload = {\n      channel: this.channel,\n      username: this.username,\n      icon_emoji: this.iconEmoji,\n      text: `[${record.levelName}] ${message}`,\n      attachments: [\n        {\n          color: this.getColorForLevel(record.level),\n          fields: [\n            {\n              title: 'Time',\n              value: record.datetime.toISOString(),\n              short: true,\n            },\n            {\n              title: 'Level',\n              value: record.levelName,\n              short: true,\n            },\n          ],\n          fallback: `[${record.levelName}] ${message}`,\n        },\n      ],\n    }\n\n    // Add context as fields if it's not empty\n    if (Object.keys(record.context).length > 0) {\n      for (const [key, value] of Object.entries(record.context)) {\n        payload.attachments[0].fields.push({\n          title: key,\n          value: JSON.stringify(value),\n          short: false,\n        })\n      }\n    }\n\n    // Add stack trace if it exists\n    if (record.stack) {\n      payload.attachments[0].fields.push({\n        title: 'Stack Trace',\n        value: `\\`\\`\\`${record.stack}\\`\\`\\``,\n        short: false,\n      })\n    }\n\n    // Override the HTTP handler's payload\n    const originalHeaders = this.getHeaders()\n    this.setHeaders({\n      ...originalHeaders,\n      'Content-Type': 'application/json',\n    })\n\n    // Use the HTTP handler to send the request\n    await super.handle({\n      ...record,\n      message: JSON.stringify(payload),\n    })\n  }\n\n  /**\n   * Get the color for a log level\n   * @param level The log level\n   */\n  private getColorForLevel(level: string): string {\n    switch (level) {\n      case 'emergency':\n      case 'alert':\n      case 'critical':\n      case 'error':\n        return 'danger'\n      case 'warning':\n        return 'warning'\n      case 'notice':\n      case 'info':\n        return 'good'\n      case 'debug':\n      default:\n        return '#CCCCCC'\n    }\n  }\n\n  /**\n   * Get the Slack channel to send log records to\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  public setChannel(channel: string): void {\n    this.channel = channel\n  }\n\n  /**\n   * Get the username to use when sending log records\n   */\n  public getUsername(): string {\n    return this.username\n  }\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  public setUsername(username: string): void {\n    this.username = username\n  }\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  public getIconEmoji(): string {\n    return this.iconEmoji\n  }\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  public setIconEmoji(emoji: string): void {\n    this.iconEmoji = emoji\n  }\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISyslogHandler } from '../interfaces/handlers/syslog-handler.interface'\n\n/**\n * SyslogHandler is an implementation of the ISyslogHandler interface.\n * It handles log records in syslog format (browser-compatible).\n */\n@injectable()\nexport class SyslogHandler implements ISyslogHandler {\n  private name = 'syslog'\n  private next: ISyslogHandler | null = null\n  private facility = 16 // local0\n  private appName = 'ts-log'\n  private procId = 'browser'\n\n  /**\n   * Create a new SyslogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { facility?: number; appName?: string; procId?: string } = {}) {\n    if (options.facility !== undefined) {\n      this.facility = options.facility\n    }\n    if (options.appName) {\n      this.appName = options.appName\n    }\n    if (options.procId) {\n      this.procId = options.procId\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Create a syslog message\n    const syslogMessage = this.formatSyslogMessage(record)\n\n    // In a browser environment, we can't send to a syslog server directly\n    // So we'll log to the console instead\n    console.log(syslogMessage)\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Format a log record as a syslog message\n   * @param record The log record to format\n   */\n  private formatSyslogMessage(record: LogRecord): string {\n    // Get the syslog priority\n    const priority = this.calculatePriority(record.level as LogLevel)\n\n    // Format the timestamp (RFC3339 format)\n    const timestamp = record.datetime.toISOString()\n\n    // Format the message\n    const message = record.message\n\n    // Format the structured data\n    const structuredData = this.formatStructuredData(record)\n\n    // Format the syslog message\n    // <priority>version timestamp hostname app-name procid msgid structured-data message\n    return `<${priority}>1 ${timestamp} ${window.location.hostname} ${this.appName} ${this.procId} - ${structuredData} ${message}`\n  }\n\n  /**\n   * Calculate the syslog priority\n   * @param level The log level\n   */\n  private calculatePriority(level: LogLevel): number {\n    // Map log levels to syslog severity levels\n    let severity: number\n    switch (level) {\n      case LogLevel.EMERGENCY:\n        severity = 0 // Emergency: system is unusable\n        break\n      case LogLevel.ALERT:\n        severity = 1 // Alert: action must be taken immediately\n        break\n      case LogLevel.CRITICAL:\n        severity = 2 // Critical: critical conditions\n        break\n      case LogLevel.ERROR:\n        severity = 3 // Error: error conditions\n        break\n      case LogLevel.WARNING:\n        severity = 4 // Warning: warning conditions\n        break\n      case LogLevel.NOTICE:\n        severity = 5 // Notice: normal but significant condition\n        break\n      case LogLevel.INFO:\n        severity = 6 // Informational: informational messages\n        break\n      case LogLevel.DEBUG:\n        severity = 7 // Debug: debug-level messages\n        break\n      default:\n        severity = 7 // Default to debug\n    }\n\n    // Calculate the priority (facility * 8 + severity)\n    return this.facility * 8 + severity\n  }\n\n  /**\n   * Format the structured data\n   * @param record The log record\n   */\n  private formatStructuredData(record: LogRecord): string {\n    if (!record.context || Object.keys(record.context).length === 0) {\n      return '-'\n    }\n\n    // Format the context as structured data\n    let structuredData = `[ts-log@0 `\n    for (const [key, value] of Object.entries(record.context)) {\n      const escapedValue = String(value).replace(/[\\\\\"]/g, '\\\\$&')\n      structuredData += `${key}=\"${escapedValue}\" `\n    }\n    structuredData = structuredData.trim() + ']'\n\n    return structuredData\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ISyslogHandler): ISyslogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ISyslogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the facility code\n   */\n  public getFacility(): number {\n    return this.facility\n  }\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  public setFacility(facility: number): void {\n    this.facility = facility\n  }\n\n  /**\n   * Get the application name\n   */\n  public getAppName(): string {\n    return this.appName\n  }\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  public setAppName(appName: string): void {\n    this.appName = appName\n  }\n\n  /**\n   * Get the process ID\n   */\n  public getProcId(): string {\n    return this.procId\n  }\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  public setProcId(procId: string): void {\n    this.procId = procId\n  }\n}\n"]}
{"version":3,"sources":["../../src/handlers/syslog-handler.ts"],"names":["SyslogHandler","injectable"],"mappings":"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","file":"syslog-handler.js","sourcesContent":["import { injectable } from 'inversify'\n\nimport { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISyslogHandler } from '../interfaces/handlers/syslog-handler.interface'\n\n/**\n * SyslogHandler is an implementation of the ISyslogHandler interface.\n * It handles log records in syslog format (browser-compatible).\n */\n@injectable()\nexport class SyslogHandler implements ISyslogHandler {\n  private name = 'syslog'\n  private next: ISyslogHandler | null = null\n  private facility = 16 // local0\n  private appName = 'ts-log'\n  private procId = 'browser'\n\n  /**\n   * Create a new SyslogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { facility?: number; appName?: string; procId?: string } = {}) {\n    if (options.facility !== undefined) {\n      this.facility = options.facility\n    }\n    if (options.appName) {\n      this.appName = options.appName\n    }\n    if (options.procId) {\n      this.procId = options.procId\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Create a syslog message\n    const syslogMessage = this.formatSyslogMessage(record)\n\n    // In a browser environment, we can't send to a syslog server directly\n    // So we'll log to the console instead\n    console.log(syslogMessage)\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Format a log record as a syslog message\n   * @param record The log record to format\n   */\n  private formatSyslogMessage(record: LogRecord): string {\n    // Get the syslog priority\n    const priority = this.calculatePriority(record.level as LogLevel)\n\n    // Format the timestamp (RFC3339 format)\n    const timestamp = record.datetime.toISOString()\n\n    // Format the message\n    const message = record.message\n\n    // Format the structured data\n    const structuredData = this.formatStructuredData(record)\n\n    // Format the syslog message\n    // <priority>version timestamp hostname app-name procid msgid structured-data message\n    return `<${priority}>1 ${timestamp} ${window.location.hostname} ${this.appName} ${this.procId} - ${structuredData} ${message}`\n  }\n\n  /**\n   * Calculate the syslog priority\n   * @param level The log level\n   */\n  private calculatePriority(level: LogLevel): number {\n    // Map log levels to syslog severity levels\n    let severity: number\n    switch (level) {\n      case LogLevel.EMERGENCY:\n        severity = 0 // Emergency: system is unusable\n        break\n      case LogLevel.ALERT:\n        severity = 1 // Alert: action must be taken immediately\n        break\n      case LogLevel.CRITICAL:\n        severity = 2 // Critical: critical conditions\n        break\n      case LogLevel.ERROR:\n        severity = 3 // Error: error conditions\n        break\n      case LogLevel.WARNING:\n        severity = 4 // Warning: warning conditions\n        break\n      case LogLevel.NOTICE:\n        severity = 5 // Notice: normal but significant condition\n        break\n      case LogLevel.INFO:\n        severity = 6 // Informational: informational messages\n        break\n      case LogLevel.DEBUG:\n        severity = 7 // Debug: debug-level messages\n        break\n      default:\n        severity = 7 // Default to debug\n    }\n\n    // Calculate the priority (facility * 8 + severity)\n    return this.facility * 8 + severity\n  }\n\n  /**\n   * Format the structured data\n   * @param record The log record\n   */\n  private formatStructuredData(record: LogRecord): string {\n    if (!record.context || Object.keys(record.context).length === 0) {\n      return '-'\n    }\n\n    // Format the context as structured data\n    let structuredData = `[ts-log@0 `\n    for (const [key, value] of Object.entries(record.context)) {\n      const escapedValue = String(value).replace(/[\\\\\"]/g, '\\\\$&')\n      structuredData += `${key}=\"${escapedValue}\" `\n    }\n    structuredData = structuredData.trim() + ']'\n\n    return structuredData\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ISyslogHandler): ISyslogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ISyslogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the facility code\n   */\n  public getFacility(): number {\n    return this.facility\n  }\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  public setFacility(facility: number): void {\n    this.facility = facility\n  }\n\n  /**\n   * Get the application name\n   */\n  public getAppName(): string {\n    return this.appName\n  }\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  public setAppName(appName: string): void {\n    this.appName = appName\n  }\n\n  /**\n   * Get the process ID\n   */\n  public getProcId(): string {\n    return this.procId\n  }\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  public setProcId(procId: string): void {\n    this.procId = procId\n  }\n}\n"]}
{"version":3,"sources":["../../src/handlers/local-storage-handler.ts"],"names":["LocalStorageHandler","injectable"],"mappings":"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","file":"local-storage-handler.js","sourcesContent":["import { injectable } from 'inversify'\nimport type { ILocalStorageHandler } from '../interfaces/handlers/local-storage-handler.interface'\nimport type { LogRecord } from '../types/types'\n\n/**\n * LocalStorageHandler is an implementation of the ILocalStorageHandler interface.\n * It handles log records by storing them in the browser's localStorage.\n */\n@injectable()\nexport class LocalStorageHandler implements ILocalStorageHandler {\n  private name = 'localStorage'\n  private next: ILocalStorageHandler | null = null\n  private key = 'ts-log'\n  private maxEntries = 100\n\n  /**\n   * Create a new LocalStorageHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { key?: string; maxEntries?: number } = {}) {\n    if (options.key) {\n      this.key = options.key\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    try {\n      // Get existing entries\n      const entries = this.getEntries()\n\n      // Add the new entry\n      entries.push({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: record.context,\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim entries if necessary\n      if (entries.length > this.maxEntries) {\n        entries.splice(0, entries.length - this.maxEntries)\n      }\n\n      // Save entries\n      localStorage.setItem(this.key, JSON.stringify(entries))\n    } catch (error) {\n      console.error('Failed to store log in localStorage:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof localStorage !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILocalStorageHandler): ILocalStorageHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILocalStorageHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the localStorage key used to store logs\n   */\n  public getKey(): string {\n    return this.key\n  }\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  public setKey(key: string): void {\n    this.key = key\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public getEntries(): any[] {\n    try {\n      const entriesJson = localStorage.getItem(this.key)\n      return entriesJson ? JSON.parse(entriesJson) : []\n    } catch (error) {\n      console.error('Failed to retrieve logs from localStorage:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public clearEntries(): void {\n    try {\n      localStorage.removeItem(this.key)\n    } catch (error) {\n      console.error('Failed to clear logs from localStorage:', error)\n    }\n  }\n}\n"]}
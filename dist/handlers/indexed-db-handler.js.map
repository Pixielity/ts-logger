{"version":3,"sources":["../../src/handlers/indexed-db-handler.ts"],"names":["IndexedDBHandler","Dexie","postConstruct","injectable"],"mappings":"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","file":"indexed-db-handler.js","sourcesContent":["import { injectable, postConstruct } from 'inversify'\nimport Dexie from 'dexie'\nimport type { IIndexedDBHandler } from '../interfaces/handlers/indexed-db-handler.interface'\nimport type { LogRecord } from '../types/types'\nimport { HandlerType } from '../enums/handler-type.enum'\n\n/**\n * IndexedDBHandler is an implementation of the IIndexedDBHandler interface.\n * It handles log records by storing them in the browser's IndexedDB.\n */\n@injectable()\nexport class IndexedDBHandler implements IIndexedDBHandler {\n  private name = HandlerType.INDEXED_DB\n  private next: IIndexedDBHandler | null = null\n  private databaseName = 'ts-log'\n  private tableName = 'logs'\n  private maxEntries = 1000\n  private db: Dexie | null = null\n\n  /**\n   * Create a new IndexedDBHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { databaseName?: string; tableName?: string; maxEntries?: number } = {}) {\n    if (options.databaseName) {\n      this.databaseName = options.databaseName\n    }\n    if (options.tableName) {\n      this.tableName = options.tableName\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Initialize the database\n   * This method is called automatically after the constructor\n   */\n  @postConstruct()\n  private initDatabase(): void {\n    if (typeof window === 'undefined' || !window.indexedDB) {\n      return\n    }\n\n    try {\n      this.db = new Dexie(this.databaseName)\n      this.db.version(1).stores({\n        [this.tableName]: '++id,level,datetime',\n      })\n    } catch (error) {\n      console.error('Failed to initialize IndexedDB:', error)\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.db) {\n      console.error('IndexedDB not initialized')\n      return\n    }\n\n    try {\n      // Add the log record to the database\n      await this.db.table(this.tableName).add({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: JSON.stringify(record.context),\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim old entries if necessary\n      const count = await this.db.table(this.tableName).count()\n      if (count > this.maxEntries) {\n        const entriesToDelete = count - this.maxEntries\n        const oldestEntries = await this.db\n          .table(this.tableName)\n          .orderBy('datetime')\n          .limit(entriesToDelete)\n          .toArray()\n        const oldestIds = oldestEntries.map((entry) => entry.id)\n        await this.db.table(this.tableName).bulkDelete(oldestIds)\n      }\n    } catch (error) {\n      console.error('Failed to store log in IndexedDB:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof window !== 'undefined' && !!window.indexedDB && !!this.db\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IIndexedDBHandler): IIndexedDBHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IIndexedDBHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the database name\n   */\n  public getDatabaseName(): string {\n    return this.databaseName\n  }\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  public setDatabaseName(name: string): void {\n    this.databaseName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the table name\n   */\n  public getTableName(): string {\n    return this.tableName\n  }\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  public setTableName(name: string): void {\n    this.tableName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public async getEntries(): Promise<any[]> {\n    if (!this.db) {\n      return []\n    }\n\n    try {\n      const entries = await this.db.table(this.tableName).toArray()\n      return entries.map((entry) => ({\n        ...entry,\n        context: JSON.parse(entry.context),\n      }))\n    } catch (error) {\n      console.error('Failed to retrieve logs from IndexedDB:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public async clearEntries(): Promise<void> {\n    if (!this.db) {\n      return\n    }\n\n    try {\n      await this.db.table(this.tableName).clear()\n    } catch (error) {\n      console.error('Failed to clear logs from IndexedDB:', error)\n    }\n  }\n}\n"]}
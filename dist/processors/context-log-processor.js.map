{"version":3,"sources":["../../src/processors/context-log-processor.ts"],"names":["ContextLogProcessor","injectable"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAWaA,8BAAN,yBAA0D,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/D,WAAA,CAAY,OAAsB,GAAA,EAAI,EAAA;AAPtC,IAAQ,IAAA,CAAA,IAAA,GAAA,SAAA;AACR,IAAA,IAAA,CAAQ,UAAsB,EAAC;AAO7B,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA,EAMO,QAAQ,MAA8B,EAAA;AAE3C,IAAA,MAAM,gBAAgB,EAAE,GAAG,KAAK,OAAS,EAAA,GAAG,OAAO,OAAQ,EAAA;AAG3D,IAAO,OAAA;AAAA,MACL,GAAG,MAAA;AAAA,MACH,OAAS,EAAA;AAAA,KACX;AAAA;AACF;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,OAA2B,EAAA;AAC3C,IAAA,IAAA,CAAK,UAAU,EAAE,GAAG,IAAK,CAAA,OAAA,EAAS,GAAG,OAAQ,EAAA;AAAA;AAC/C;AAAA;AAAA;AAAA;AAAA,EAMO,cAAc,IAAsB,EAAA;AACzC,IAAA,MAAM,UAAyB,GAAA,EAAE,GAAG,IAAA,CAAK,OAAQ,EAAA;AACjD,IAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,MAAA,OAAO,WAAW,GAAG,CAAA;AAAA;AAEvB,IAAA,IAAA,CAAK,OAAU,GAAA,UAAA;AAAA;AACjB;AAAA;AAAA;AAAA,EAKO,UAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA,EAKO,YAAqB,GAAA;AAC1B,IAAA,IAAA,CAAK,UAAU,EAAC;AAAA;AAClB;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AAEhB;AAnEaA,2BAAN,GAAA,eAAA,CAAA;AAAA,EADNC,oBAAW;AAAA,CACC,EAAAD,2BAAA,CAAA","file":"context-log-processor.js","sourcesContent":["import { injectable } from 'inversify'\n\nimport type { LogContext, LogRecord } from '../types'\nimport { ProcessorType } from '../enums/processor-type.enum'\nimport type { IContextLogProcessor } from '../interfaces/processors/context-log-processor.interface'\n\n/**\n * ContextLogProcessor is an implementation of the IContextLogProcessor interface.\n * It adds contextual data to log records.\n */\n@injectable()\nexport class ContextLogProcessor implements IContextLogProcessor {\n  private name = ProcessorType.CONTEXT\n  private context: LogContext = {}\n\n  /**\n   * Create a new ContextLogProcessor instance\n   * @param context Initial context\n   */\n  constructor(context: LogContext = {}) {\n    this.context = context\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public process(record: LogRecord): LogRecord {\n    // Merge the processor's context with the record's context\n    const mergedContext = { ...this.context, ...record.context }\n\n    // Return the updated record\n    return {\n      ...record,\n      context: mergedContext,\n    }\n  }\n\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  public addContext(context: LogContext): void {\n    this.context = { ...this.context, ...context }\n  }\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  public removeContext(keys: string[]): void {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this.context = newContext\n  }\n\n  /**\n   * Get the current context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Clear the current context\n   */\n  public clearContext(): void {\n    this.context = {}\n  }\n\n  /**\n   * Get the processor name\n   */\n  public getName(): string {\n    return this.name\n  }\n}\n"]}
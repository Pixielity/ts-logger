{"version":3,"sources":["../../src/processors/message-placeholder-processor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAUO,IAAM,8BAAN,MAA0E;AAAA;AAAA;AAAA;AAAA;AAAA,EAS/E,WAAA,CAAY,OAAkE,GAAA,EAAI,EAAA;AARlF,IAAQ,IAAA,CAAA,IAAA,GAAA,oBAAA;AACR,IAAA,IAAA,CAAQ,iBAAoB,GAAA,OAAA;AAC5B,IAAA,IAAA,CAAQ,YAAe,GAAA,IAAA;AAOrB,IAAA,IAAI,QAAQ,iBAAmB,EAAA;AAC7B,MAAA,IAAA,CAAK,oBAAoB,OAAQ,CAAA,iBAAA;AAAA;AAEnC,IAAI,IAAA,OAAA,CAAQ,iBAAiB,MAAW,EAAA;AACtC,MAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA;AAAA;AAC9B;AACF;AAAA;AAAA;AAAA;AAAA,EAMO,QAAQ,MAA8B,EAAA;AAE3C,IAAA,MAAM,UAAU,IAAK,CAAA,mBAAA,CAAoB,MAAO,CAAA,OAAA,EAAS,OAAO,OAAO,CAAA;AAGvE,IAAO,OAAA;AAAA,MACL,GAAG,MAAA;AAAA,MACH;AAAA,KACF;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,mBAAA,CAAoB,SAAiB,OAAsC,EAAA;AACjF,IAAI,IAAA,CAAC,WAAW,CAAC,OAAA,IAAW,OAAO,IAAK,CAAA,OAAO,CAAE,CAAA,MAAA,KAAW,CAAG,EAAA;AAC7D,MAAO,OAAA,OAAA;AAAA;AAGT,IAAA,IAAI,MAAS,GAAA,OAAA;AAGb,IAAM,MAAA,kBAAA,GAAqB,KAAK,qBAAsB,EAAA;AAGtD,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAO,CAAG,EAAA;AAClD,MAAA,MAAM,WAAc,GAAA,kBAAA,CAAmB,OAAQ,CAAA,KAAA,EAAO,GAAG,CAAA;AACzD,MAAA,MAAM,QAAQ,IAAI,MAAA,CAAO,KAAK,YAAa,CAAA,WAAW,GAAG,GAAG,CAAA;AAG5D,MAAI,IAAA,WAAA,GAAc,IAAK,CAAA,eAAA,CAAgB,KAAK,CAAA;AAG5C,MAAI,IAAA,IAAA,CAAK,gBAAgB,OAAO,KAAA,KAAU,YAAY,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACzE,QAAc,WAAA,GAAA,KAAA;AAAA;AAGhB,MAAS,MAAA,GAAA,MAAA,CAAO,OAAQ,CAAA,KAAA,EAAO,WAAW,CAAA;AAAA;AAG5C,IAAO,OAAA,MAAA;AAAA;AACT;AAAA;AAAA;AAAA,EAKQ,qBAAgC,GAAA;AACtC,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMQ,aAAa,MAAwB,EAAA;AAC3C,IAAO,OAAA,MAAA,CAAO,OAAQ,CAAA,qBAAA,EAAuB,MAAM,CAAA;AAAA;AACrD;AAAA;AAAA;AAAA;AAAA,EAMQ,gBAAgB,KAAoB,EAAA;AAC1C,IAAI,IAAA,KAAA,KAAU,IAAQ,IAAA,KAAA,KAAU,MAAW,EAAA;AACzC,MAAO,OAAA,EAAA;AAAA;AAET,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAO,OAAA,IAAA,CAAK,UAAU,KAAK,CAAA;AAAA;AAE7B,IAAA,OAAO,OAAO,KAAK,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA,EAMQ,QAAQ,MAAyB,EAAA;AAEvC,IAAA,MAAM,UAAa,GAAA,6EAAA;AACnB,IAAO,OAAA,UAAA,CAAW,KAAK,MAAM,CAAA;AAAA;AAC/B;AAAA;AAAA;AAAA,EAKO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,qBAAqB,MAAsB,EAAA;AAChD,IAAA,IAAA,CAAK,iBAAoB,GAAA,MAAA;AAAA;AAC3B;AAAA;AAAA;AAAA,EAKO,oBAA+B,GAAA;AACpC,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,gBAAgB,OAAwB,EAAA;AAC7C,IAAA,IAAA,CAAK,YAAe,GAAA,OAAA;AAAA;AACtB;AAAA;AAAA;AAAA,EAKO,qBAAiC,GAAA;AACtC,IAAA,OAAO,IAAK,CAAA,YAAA;AAAA;AAEhB;AA9Ia,2BAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW;AAAA,CACC,EAAA,2BAAA,CAAA","file":"message-placeholder-processor.mjs","sourcesContent":["import { injectable } from 'inversify'\nimport type { IMessagePlaceholderProcessor } from '../interfaces/processors/message-placeholder-processor.interface'\nimport type { LogRecord } from '../types/types'\nimport { ProcessorType } from '../enums/processor-type.enum'\n\n/**\n * MessagePlaceholderProcessor is an implementation of the IMessagePlaceholderProcessor interface.\n * It replaces placeholders in log messages with context values.\n */\n@injectable()\nexport class MessagePlaceholderProcessor implements IMessagePlaceholderProcessor {\n  private name = ProcessorType.MESSAGE_PLACEHOLDER\n  private placeholderFormat = '{key}'\n  private emojiSupport = true\n\n  /**\n   * Create a new MessagePlaceholderProcessor instance\n   * @param options Options for the processor\n   */\n  constructor(options: { placeholderFormat?: string; emojiSupport?: boolean } = {}) {\n    if (options.placeholderFormat) {\n      this.placeholderFormat = options.placeholderFormat\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public process(record: LogRecord): LogRecord {\n    // Replace placeholders in the message\n    const message = this.replacePlaceholders(record.message, record.context)\n\n    // Return the updated record\n    return {\n      ...record,\n      message,\n    }\n  }\n\n  /**\n   * Replace placeholders in a message with context values\n   * @param message The message to process\n   * @param context The context values\n   */\n  private replacePlaceholders(message: string, context: Record<string, any>): string {\n    if (!message || !context || Object.keys(context).length === 0) {\n      return message\n    }\n\n    let result = message\n\n    // Get the placeholder pattern\n    const placeholderPattern = this.getPlaceholderPattern()\n\n    // Replace all placeholders\n    for (const [key, value] of Object.entries(context)) {\n      const placeholder = placeholderPattern.replace('key', key)\n      const regex = new RegExp(this.escapeRegExp(placeholder), 'g')\n\n      // Convert the value to a string\n      let stringValue = this.convertToString(value)\n\n      // Add emoji if enabled and the value is a string with an emoji\n      if (this.emojiSupport && typeof value === 'string' && this.isEmoji(value)) {\n        stringValue = value\n      }\n\n      result = result.replace(regex, stringValue)\n    }\n\n    return result\n  }\n\n  /**\n   * Get the placeholder pattern\n   */\n  private getPlaceholderPattern(): string {\n    return this.placeholderFormat\n  }\n\n  /**\n   * Escape special characters in a string for use in a regular expression\n   * @param string The string to escape\n   */\n  private escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n  }\n\n  /**\n   * Convert a value to a string\n   * @param value The value to convert\n   */\n  private convertToString(value: any): string {\n    if (value === null || value === undefined) {\n      return ''\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value)\n    }\n    return String(value)\n  }\n\n  /**\n   * Check if a string is an emoji\n   * @param string The string to check\n   */\n  private isEmoji(string: string): boolean {\n    // Simple check for emoji (Unicode emoji range)\n    const emojiRegex = /[\\u{1F300}-\\u{1F6FF}\\u{1F900}-\\u{1F9FF}\\u{2600}-\\u{26FF}\\u{2700}-\\u{27BF}]/u\n    return emojiRegex.test(string)\n  }\n\n  /**\n   * Get the processor name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  public setPlaceholderFormat(format: string): void {\n    this.placeholderFormat = format\n  }\n\n  /**\n   * Get the placeholder format\n   */\n  public getPlaceholderFormat(): string {\n    return this.placeholderFormat\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n"]}
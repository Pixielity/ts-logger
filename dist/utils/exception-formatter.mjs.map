{"version":3,"sources":["../../src/utils/exception-formatter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAUO,IAAM,qBAAN,MAAwD;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7D,WAAA,CAAY,OAAsC,GAAA,EAAI,EAAA;AANtD,IAAA,IAAA,CAAQ,YAAe,GAAA,IAAA;AAOrB,IAAI,IAAA,OAAA,CAAQ,iBAAiB,MAAW,EAAA;AACtC,MAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA;AAAA;AAC9B;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,OAAO,SAAmC,EAAA;AACrD,IAAA,MAAM,UAAU,SAAU,CAAA,OAAA;AAC1B,IAAA,MAAM,OAAO,SAAU,CAAA,IAAA;AACvB,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,aAAA,CAAc,SAAS,CAAA;AAGhD,IAAA,IAAI,SAAY,GAAA,CAAA,EAAG,IAAI,CAAA,EAAA,EAAK,OAAO;AAAA,EAAK,KAAK,CAAA,CAAA;AAG7C,IAAA,IAAI,KAAK,YAAc,EAAA;AACrB,MAAA,SAAA,GAAY,KAAK,SAAS,CAAA,CAAA;AAAA;AAK5B,IAAO,OAAA,SAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,cAAc,SAAmC,EAAA;AAE5D,IAAI,IAAA;AACF,MAAA,MAAM,WAAc,GAAA,MAAM,UAAW,CAAA,SAAA,CAAU,SAAS,CAAA;AACxD,MAAO,OAAA,IAAA,CAAK,kBAAkB,WAAW,CAAA;AAAA,aAClC,KAAO,EAAA;AAEd,MAAA,OAAO,UAAU,KAAS,IAAA,EAAA;AAAA;AAC5B;AACF;AAAA;AAAA;AAAA;AAAA,EAMQ,kBAAkB,WAA4B,EAAA;AACpD,IAAO,OAAA,WAAA,CACJ,GAAI,CAAA,CAAC,KAAU,KAAA;AACd,MAAM,MAAA,QAAA,GAAW,MAAM,QAAY,IAAA,aAAA;AACnC,MAAM,MAAA,UAAA,GAAa,MAAM,UAAc,IAAA,GAAA;AACvC,MAAM,MAAA,YAAA,GAAe,MAAM,YAAgB,IAAA,GAAA;AAC3C,MAAM,MAAA,YAAA,GAAe,MAAM,YAAgB,IAAA,aAAA;AAC3C,MAAA,OAAO,UAAU,YAAY,CAAA,EAAA,EAAK,QAAQ,CAAI,CAAA,EAAA,UAAU,IAAI,YAAY,CAAA,CAAA,CAAA;AAAA,KACzE,CACA,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,gBAAgB,OAAwB,EAAA;AAC7C,IAAA,IAAA,CAAK,YAAe,GAAA,OAAA;AAAA;AACtB;AAAA;AAAA;AAAA,EAKO,qBAAiC,GAAA;AACtC,IAAA,OAAO,IAAK,CAAA,YAAA;AAAA;AAEhB;AAhFa,kBAAN,GAAA,eAAA,CAAA;AAAA,EADN,UAAW;AAAA,CACC,EAAA,kBAAA,CAAA","file":"exception-formatter.mjs","sourcesContent":["import { injectable } from 'inversify'\nimport StackTrace from 'stacktrace-js'\n\nimport type { IExceptionFormatter } from '../interfaces/utils/exception-formatter.interface'\n\n/**\n * ExceptionFormatter is an implementation of the IExceptionFormatter interface.\n * It provides methods for formatting exceptions.\n */\n@injectable()\nexport class ExceptionFormatter implements IExceptionFormatter {\n  private colorSupport = true\n\n  /**\n   * Create a new ExceptionFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { colorSupport?: boolean } = {}) {\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  public async format(exception: Error): Promise<string> {\n    const message = exception.message\n    const name = exception.name\n    const stack = await this.getStackTrace(exception)\n\n    // Format the exception\n    let formatted = `${name}: ${message}\\n${stack}`\n\n    // Add color if enabled\n    if (this.colorSupport) {\n      formatted = `%c${formatted}`\n      // Note: In a browser environment, this would be used with console.log\n      // console.log(formatted, \"color: #FF0000\")\n    }\n\n    return formatted\n  }\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  public async getStackTrace(exception: Error): Promise<string> {\n    // Use stacktrace-js to get a formatted stack trace\n    try {\n      const stackFrames = await StackTrace.fromError(exception)\n      return this.formatStackFrames(stackFrames)\n    } catch (error) {\n      // Fall back to the native stack trace\n      return exception.stack || ''\n    }\n  }\n\n  /**\n   * Format stack frames\n   * @param stackFrames The stack frames to format\n   */\n  private formatStackFrames(stackFrames: any[]): string {\n    return stackFrames\n      .map((frame) => {\n        const fileName = frame.fileName || '<anonymous>'\n        const lineNumber = frame.lineNumber || '?'\n        const columnNumber = frame.columnNumber || '?'\n        const functionName = frame.functionName || '<anonymous>'\n        return `    at ${functionName} (${fileName}:${lineNumber}:${columnNumber})`\n      })\n      .join('\\n')\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n"]}
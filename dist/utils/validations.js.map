{"version":3,"sources":["../../src/utils/validations.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAIO,SAAS,SAAS,KAAqB,EAAA;AAC5C,EAAO,OAAA,KAAA,KAAU,QAAQ,OAAO,KAAA,KAAU,YAAY,CAAC,KAAA,CAAM,QAAQ,KAAK,CAAA;AAC5E;AAMO,SAAS,SAAS,KAAqB,EAAA;AAC5C,EAAA,OAAO,OAAO,KAAU,KAAA,QAAA;AAC1B;AAMO,SAAS,SAAS,KAAqB,EAAA;AAC5C,EAAA,OAAO,OAAO,KAAA,KAAU,QAAY,IAAA,CAAC,MAAM,KAAK,CAAA;AAClD;AAMO,SAAS,UAAU,KAAqB,EAAA;AAC7C,EAAA,OAAO,OAAO,KAAU,KAAA,SAAA;AAC1B;AAMO,SAAS,WAAW,KAAqB,EAAA;AAC9C,EAAA,OAAO,OAAO,KAAU,KAAA,UAAA;AAC1B;AAMO,SAAS,YAAY,KAAqB,EAAA;AAC/C,EAAA,OAAO,OAAO,KAAU,KAAA,WAAA;AAC1B;AAMO,SAAS,OAAO,KAAqB,EAAA;AAC1C,EAAA,OAAO,KAAU,KAAA,IAAA;AACnB;AAMO,SAAS,kBAAkB,KAAqB,EAAA;AACrD,EAAA,OAAO,MAAO,CAAA,KAAK,CAAK,IAAA,WAAA,CAAY,KAAK,CAAA;AAC3C;AAMO,SAAS,QAAQ,KAAqB,EAAA;AAC3C,EAAI,IAAA,iBAAA,CAAkB,KAAK,CAAG,EAAA;AAC5B,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,IAAI,SAAS,KAAK,CAAA,IAAK,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAC3C,IAAA,OAAO,MAAM,MAAW,KAAA,CAAA;AAAA;AAE1B,EAAI,IAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AACnB,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA,CAAE,MAAW,KAAA,CAAA;AAAA;AAEvC,EAAO,OAAA,KAAA;AACT;AAOO,SAAS,KAAA,CAAM,WAAgB,OAAqB,EAAA;AACzD,EAAI,IAAA,CAAC,QAAQ,MAAQ,EAAA;AACnB,IAAO,OAAA,MAAA;AAAA;AAGT,EAAM,MAAA,MAAA,GAAS,QAAQ,KAAM,EAAA;AAE7B,EAAA,IAAI,QAAS,CAAA,MAAM,CAAK,IAAA,QAAA,CAAS,MAAM,CAAG,EAAA;AACxC,IAAA,KAAA,MAAW,OAAO,MAAQ,EAAA;AACxB,MAAA,IAAI,QAAS,CAAA,MAAA,CAAO,GAAG,CAAC,CAAG,EAAA;AACzB,QAAI,IAAA,CAAC,MAAO,CAAA,GAAG,CAAG,EAAA;AAChB,UAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,IAAI,CAAA;AAAA;AAErC,QAAA,KAAA,CAAM,MAAO,CAAA,GAAG,CAAG,EAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA,OACzB,MAAA;AACL,QAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,MAAA,CAAO,GAAG,CAAA,EAAG,CAAA;AAAA;AAC9C;AACF;AAGF,EAAO,OAAA,KAAA,CAAM,MAAQ,EAAA,GAAG,OAAO,CAAA;AACjC","file":"validations.js","sourcesContent":["/**\n * Check if a value is an object\n * @param value The value to check\n */\nexport function isObject(value: any): boolean {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Check if a value is a string\n * @param value The value to check\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if a value is a number\n * @param value The value to check\n */\nexport function isNumber(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if a value is a boolean\n * @param value The value to check\n */\nexport function isBoolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if a value is a function\n * @param value The value to check\n */\nexport function isFunction(value: any): boolean {\n  return typeof value === 'function'\n}\n\n/**\n * Check if a value is undefined\n * @param value The value to check\n */\nexport function isUndefined(value: any): boolean {\n  return typeof value === 'undefined'\n}\n\n/**\n * Check if a value is null\n * @param value The value to check\n */\nexport function isNull(value: any): boolean {\n  return value === null\n}\n\n/**\n * Check if a value is null or undefined\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: any): boolean {\n  return isNull(value) || isUndefined(value)\n}\n\n/**\n * Check if a value is empty\n * @param value The value to check\n */\nexport function isEmpty(value: any): boolean {\n  if (isNullOrUndefined(value)) {\n    return true\n  }\n  if (isString(value) || Array.isArray(value)) {\n    return value.length === 0\n  }\n  if (isObject(value)) {\n    return Object.keys(value).length === 0\n  }\n  return false\n}\n\n/**\n * Merge objects\n * @param target The target object\n * @param sources The source objects\n */\nexport function merge(target: any, ...sources: any[]): any {\n  if (!sources.length) {\n    return target\n  }\n\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} })\n        }\n        merge(target[key], source[key])\n      } else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return merge(target, ...sources)\n}\n"]}
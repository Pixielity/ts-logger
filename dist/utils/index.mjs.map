{"version":3,"sources":["../../src/utils/date.ts","../../src/utils/validations.ts","../../src/utils/exception-formatter.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { DateFormat } from '../enums'\n\n/**\n * Get the date format string for a DateFormat enum value\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function getDateFormatString(format: DateFormat, customFormat?: string): string {\n  switch (format) {\n    case DateFormat.ISO8601:\n      return 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n    case DateFormat.RFC3339:\n      return 'YYYY-MM-DDTHH:mm:ssZ'\n    case DateFormat.RFC2822:\n      return 'ddd, DD MMM YYYY HH:mm:ss ZZ'\n    case DateFormat.UNIX:\n      return 'X'\n    case DateFormat.YYYY_MM_DD:\n      return 'YYYY-MM-DD'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS:\n      return 'YYYY-MM-DD HH:mm:ss'\n    case DateFormat.DD_MM_YYYY:\n      return 'DD/MM/YYYY'\n    case DateFormat.MM_DD_YYYY:\n      return 'MM/DD/YYYY'\n    case DateFormat.HH_MM_SS:\n      return 'HH:mm:ss'\n    case DateFormat.CUSTOM:\n      return customFormat || 'YYYY-MM-DD HH:mm:ss'\n    default:\n      return 'YYYY-MM-DD HH:mm:ss'\n  }\n}\n\n/**\n * Format a date according to a DateFormat enum value\n * @param date The date to format\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function formatDate(date: Date, format: DateFormat, customFormat?: string): string {\n  const formatString = getDateFormatString(format, customFormat)\n\n  // Simple date formatting based on the format string\n  // In a real implementation, you might use a library like date-fns\n  const year = date.getFullYear()\n  const month = String(date.getMonth() + 1).padStart(2, '0')\n  const day = String(date.getDate()).padStart(2, '0')\n  const hours = String(date.getHours()).padStart(2, '0')\n  const minutes = String(date.getMinutes()).padStart(2, '0')\n  const seconds = String(date.getSeconds()).padStart(2, '0')\n  const milliseconds = String(date.getMilliseconds()).padStart(3, '0')\n\n  // Handle special cases\n  if (format === DateFormat.UNIX) {\n    return Math.floor(date.getTime() / 1000).toString()\n  }\n\n  // Replace tokens in the format string\n  return formatString\n    .replace('YYYY', String(year))\n    .replace('MM', month)\n    .replace('DD', day)\n    .replace('HH', hours)\n    .replace('mm', minutes)\n    .replace('ss', seconds)\n    .replace('SSS', milliseconds)\n}\n","/**\n * Check if a value is an object\n * @param value The value to check\n */\nexport function isObject(value: any): boolean {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Check if a value is a string\n * @param value The value to check\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if a value is a number\n * @param value The value to check\n */\nexport function isNumber(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if a value is a boolean\n * @param value The value to check\n */\nexport function isBoolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if a value is a function\n * @param value The value to check\n */\nexport function isFunction(value: any): boolean {\n  return typeof value === 'function'\n}\n\n/**\n * Check if a value is undefined\n * @param value The value to check\n */\nexport function isUndefined(value: any): boolean {\n  return typeof value === 'undefined'\n}\n\n/**\n * Check if a value is null\n * @param value The value to check\n */\nexport function isNull(value: any): boolean {\n  return value === null\n}\n\n/**\n * Check if a value is null or undefined\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: any): boolean {\n  return isNull(value) || isUndefined(value)\n}\n\n/**\n * Check if a value is empty\n * @param value The value to check\n */\nexport function isEmpty(value: any): boolean {\n  if (isNullOrUndefined(value)) {\n    return true\n  }\n  if (isString(value) || Array.isArray(value)) {\n    return value.length === 0\n  }\n  if (isObject(value)) {\n    return Object.keys(value).length === 0\n  }\n  return false\n}\n\n/**\n * Merge objects\n * @param target The target object\n * @param sources The source objects\n */\nexport function merge(target: any, ...sources: any[]): any {\n  if (!sources.length) {\n    return target\n  }\n\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} })\n        }\n        merge(target[key], source[key])\n      } else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return merge(target, ...sources)\n}\n","import { injectable } from 'inversify'\nimport type { IExceptionFormatter } from '../interfaces/utils/exception-formatter.interface'\nimport StackTrace from 'stacktrace-js'\n\n/**\n * ExceptionFormatter is an implementation of the IExceptionFormatter interface.\n * It provides methods for formatting exceptions.\n */\n@injectable()\nexport class ExceptionFormatter implements IExceptionFormatter {\n  private colorSupport = true\n\n  /**\n   * Create a new ExceptionFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { colorSupport?: boolean } = {}) {\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  public async format(exception: Error): Promise<string> {\n    const message = exception.message\n    const name = exception.name\n    const stack = await this.getStackTrace(exception)\n\n    // Format the exception\n    let formatted = `${name}: ${message}\\n${stack}`\n\n    // Add color if enabled\n    if (this.colorSupport) {\n      formatted = `%c${formatted}`\n      // Note: In a browser environment, this would be used with console.log\n      // console.log(formatted, \"color: #FF0000\")\n    }\n\n    return formatted\n  }\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  public async getStackTrace(exception: Error): Promise<string> {\n    // Use stacktrace-js to get a formatted stack trace\n    try {\n      const stackFrames = await StackTrace.fromError(exception)\n      return this.formatStackFrames(stackFrames)\n    } catch (error) {\n      // Fall back to the native stack trace\n      return exception.stack || ''\n    }\n  }\n\n  /**\n   * Format stack frames\n   * @param stackFrames The stack frames to format\n   */\n  private formatStackFrames(stackFrames: any[]): string {\n    return stackFrames\n      .map((frame) => {\n        const fileName = frame.fileName || '<anonymous>'\n        const lineNumber = frame.lineNumber || '?'\n        const columnNumber = frame.columnNumber || '?'\n        const functionName = frame.functionName || '<anonymous>'\n        return `    at ${functionName} (${fileName}:${lineNumber}:${columnNumber})`\n      })\n      .join('\\n')\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n"]}
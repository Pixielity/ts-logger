{"version":3,"sources":["../../src/utils/date.ts"],"names":[],"mappings":";;;;;;;;;;;AAOO,SAAS,mBAAA,CAAoB,QAAoB,YAA+B,EAAA;AACrF,EAAA,QAAQ,MAAQ;AAAA,IACd,KAAA,SAAA;AACE,MAAO,OAAA,0BAAA;AAAA,IACT,KAAA,SAAA;AACE,MAAO,OAAA,sBAAA;AAAA,IACT,KAAA,SAAA;AACE,MAAO,OAAA,8BAAA;AAAA,IACT,KAAA,MAAA;AACE,MAAO,OAAA,GAAA;AAAA,IACT,KAAA,YAAA;AACE,MAAO,OAAA,YAAA;AAAA,IACT,KAAA,qBAAA;AACE,MAAO,OAAA,qBAAA;AAAA,IACT,KAAA,YAAA;AACE,MAAO,OAAA,YAAA;AAAA,IACT,KAAA,YAAA;AACE,MAAO,OAAA,YAAA;AAAA,IACT,KAAA,UAAA;AACE,MAAO,OAAA,UAAA;AAAA,IACT,KAAA,yBAAA;AACE,MAAO,OAAA,yBAAA;AAAA;AAAA,IACT,KAAA,QAAA;AACE,MAAA,OAAO,YAAgB,IAAA,qBAAA;AAAA,IACzB;AACE,MAAO,OAAA,qBAAA;AAAA;AAEb;AAcO,SAAS,UAAA,CAAW,IAAY,EAAA,MAAA,EAAoB,YAA+B,EAAA;AAExF,EAAM,MAAA,YAAA,GAAe,mBAAoB,CAAA,MAAA,EAAQ,YAAY,CAAA;AAG7D,EAAM,MAAA,IAAA,GAAO,KAAK,cAAe,EAAA;AACjC,EAAM,MAAA,GAAA,GAAM,OAAO,IAAK,CAAA,UAAA,EAAY,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA;AACrD,EAAM,MAAA,KAAA,GAAQ,OAAO,IAAK,CAAA,WAAA,EAAa,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA;AACxD,EAAM,MAAA,KAAA,GAAQ,OAAO,IAAK,CAAA,WAAA,KAAgB,CAAC,CAAA,CAAE,QAAS,CAAA,CAAA,EAAG,GAAG,CAAA;AAC5D,EAAM,MAAA,OAAA,GAAU,OAAO,IAAK,CAAA,aAAA,EAAe,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA;AAC5D,EAAM,MAAA,OAAA,GAAU,OAAO,IAAK,CAAA,aAAA,EAAe,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA;AAC5D,EAAM,MAAA,YAAA,GAAe,OAAO,IAAK,CAAA,kBAAA,EAAoB,CAAE,CAAA,QAAA,CAAS,GAAG,GAAG,CAAA;AAGtE,EAAA,IAAI,MAA4B,KAAA,MAAA,aAAA;AAE9B,IAAA,OAAO,KAAK,KAAM,CAAA,IAAA,CAAK,SAAY,GAAA,GAAI,EAAE,QAAS,EAAA;AAAA;AAIpD,EAAA,OAAO,YACJ,CAAA,OAAA,CAAQ,MAAQ,EAAA,MAAA,CAAO,IAAI,CAAC,CAC5B,CAAA,OAAA,CAAQ,IAAM,EAAA,KAAK,CACnB,CAAA,OAAA,CAAQ,IAAM,EAAA,GAAG,CACjB,CAAA,OAAA,CAAQ,IAAM,EAAA,KAAK,CACnB,CAAA,OAAA,CAAQ,IAAM,EAAA,OAAO,CACrB,CAAA,OAAA,CAAQ,IAAM,EAAA,OAAO,CACrB,CAAA,OAAA,CAAQ,OAAO,YAAY,CAAA;AAChC","file":"date.mjs","sourcesContent":["import { DateFormat } from '../enums'\n\n/**\n * Get the date format string for a DateFormat enum value\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function getDateFormatString(format: DateFormat, customFormat?: string): string {\n  switch (format) {\n    case DateFormat.ISO8601:\n      return 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n    case DateFormat.RFC3339:\n      return 'YYYY-MM-DDTHH:mm:ssZ'\n    case DateFormat.RFC2822:\n      return 'ddd, DD MMM YYYY HH:mm:ss ZZ'\n    case DateFormat.UNIX:\n      return 'X'\n    case DateFormat.YYYY_MM_DD:\n      return 'YYYY-MM-DD'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS:\n      return 'YYYY-MM-DD HH:mm:ss'\n    case DateFormat.DD_MM_YYYY:\n      return 'DD/MM/YYYY'\n    case DateFormat.MM_DD_YYYY:\n      return 'MM/DD/YYYY'\n    case DateFormat.HH_MM_SS:\n      return 'HH:mm:ss'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS_MILLI:\n      return 'YYYY-MM-DD HH:mm:ss.SSS' // Handle milliseconds format here\n    case DateFormat.CUSTOM:\n      return customFormat || 'YYYY-MM-DD HH:mm:ss'\n    default:\n      return 'YYYY-MM-DD HH:mm:ss'\n  }\n}\n\n/**\n * Formats a given date into a string based on the provided format.\n *\n * @param {Date} date - The date to be formatted.\n * @param {DateFormat} format - The format to use for the date. It can be a predefined format from the DateFormat enum.\n * @param {string} [customFormat] - Optional custom format string. If not provided, the predefined format is used.\n * @returns {string} - A formatted string representing the date.\n *\n * @example\n * const formattedDate = formatDate(new Date(), DateFormat.FULL);\n * console.log(formattedDate); // Outputs the formatted date string in the specified format\n */\nexport function formatDate(date: Date, format: DateFormat, customFormat?: string): string {\n  // Determine the format string to be used based on the input format and optional custom format.\n  const formatString = getDateFormatString(format, customFormat)\n\n  // Extract individual date components (UTC-based) from the input date.\n  const year = date.getUTCFullYear()\n  const day = String(date.getUTCDate()).padStart(2, '0')\n  const hours = String(date.getUTCHours()).padStart(2, '0')\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0')\n  const minutes = String(date.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(date.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = String(date.getUTCMilliseconds()).padStart(3, '0')\n\n  // If the specified format is UNIX, return the timestamp in seconds.\n  if (format === DateFormat.UNIX) {\n    // Return the timestamp in seconds\n    return Math.floor(date.getTime() / 1000).toString()\n  }\n\n  // Replace placeholders in the format string with actual date components (e.g., 'YYYY', 'MM', etc.).\n  return formatString\n    .replace('YYYY', String(year)) // Replace 'YYYY' with the year\n    .replace('MM', month) // Replace 'MM' with the month (2 digits)\n    .replace('DD', day) // Replace 'DD' with the day (2 digits)\n    .replace('HH', hours) // Replace 'HH' with hours (2 digits)\n    .replace('mm', minutes) // Replace 'mm' with minutes (2 digits)\n    .replace('ss', seconds) // Replace 'ss' with seconds (2 digits)\n    .replace('SSS', milliseconds) // Replace 'SSS' with milliseconds (3 digits)\n}\n"]}
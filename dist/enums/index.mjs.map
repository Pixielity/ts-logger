{"version":3,"sources":["../../src/enums/date-format.enum.ts","../../src/enums/formatter-type.enum.ts","../../src/enums/handler-type.enum.ts","../../src/enums/log-channel-type.enum.ts","../../src/enums/log-level.enum.ts","../../src/enums/processor-type.enum.ts"],"names":["DateFormat","FormatterType","HandlerType","LogChannelType","LogLevel","ProcessorType"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * DateFormat enum defines the available date formats in the ts-log package.\n * These formats determine how dates are formatted in log records.\n */\nexport enum DateFormat {\n  /**\n   * ISO 8601 format (e.g., 2023-01-01T12:00:00.000Z)\n   */\n  ISO8601 = 'ISO8601',\n\n  /**\n   * RFC 3339 format (e.g., 2023-01-01T12:00:00+00:00)\n   */\n  RFC3339 = 'RFC3339',\n\n  /**\n   * RFC 2822 format (e.g., Mon, 01 Jan 2023 12:00:00 +0000)\n   */\n  RFC2822 = 'RFC2822',\n\n  /**\n   * UNIX timestamp format (e.g., 1672574400)\n   */\n  UNIX = 'UNIX',\n\n  /**\n   * Year-month-day format (e.g., 2023-01-01)\n   */\n  YYYY_MM_DD = 'YYYY-MM-DD',\n\n  /**\n   * Year-month-day hour:minute:second format (e.g., 2023-01-01 12:00:00)\n   */\n  YYYY_MM_DD_HH_MM_SS = 'YYYY-MM-DD HH:mm:ss',\n\n  /**\n   * Day/month/year format (e.g., 01/01/2023)\n   */\n  DD_MM_YYYY = 'DD/MM/YYYY',\n\n  /**\n   * Month/day/year format (e.g., 01/01/2023)\n   */\n  MM_DD_YYYY = 'MM/DD/YYYY',\n\n  /**\n   * Hour:minute:second format (e.g., 12:00:00)\n   */\n  HH_MM_SS = 'HH:mm:ss',\n\n  /**\n   * Custom date format\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * FormatterType enum defines the available formatter types in the ts-log package.\n * These types determine how log records are formatted.\n */\nexport enum FormatterType {\n  /**\n   * Line formatter formats logs as lines of text\n   */\n  LINE = 'line',\n\n  /**\n   * JSON formatter formats logs as JSON\n   */\n  JSON = 'json',\n\n  /**\n   * Simple formatter formats logs in a simple format\n   */\n  SIMPLE = 'simple',\n\n  /**\n   * Custom formatter type for user-defined formatters\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * HandlerType enum defines the available handler types in the ts-log package.\n * These types determine how log records are processed.\n */\nexport enum HandlerType {\n  /**\n   * Console handler outputs logs to the browser console\n   */\n  CONSOLE = 'console',\n\n  /**\n   * LocalStorage handler stores logs in the browser's localStorage\n   */\n  LOCAL_STORAGE = 'localStorage',\n\n  /**\n   * IndexedDB handler stores logs in the browser's IndexedDB\n   */\n  INDEXED_DB = 'indexedDB',\n\n  /**\n   * HTTP handler sends logs to a remote server via HTTP\n   */\n  HTTP = 'http',\n\n  /**\n   * Slack handler sends logs to a Slack webhook\n   */\n  SLACK = 'slack',\n\n  /**\n   * ErrorLog handler outputs logs to the browser's error log\n   */\n  ERROR_LOG = 'errorLog',\n\n  /**\n   * Syslog handler outputs logs in syslog format (browser-compatible)\n   */\n  SYSLOG = 'syslog',\n\n  /**\n   * FingersCrossed handler buffers logs until a certain level is reached\n   */\n  FINGERS_CROSSED = 'fingersCrossed',\n\n  /**\n   * Custom handler type for user-defined handlers\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * LogChannelType enum defines the available channel types in the ts-log package.\n * These types determine how logs are processed and stored.\n */\nexport enum LogChannelType {\n  /**\n   * Console channel outputs logs to the browser console\n   */\n  CONSOLE = 'console',\n\n  /**\n   * LocalStorage channel stores logs in the browser's localStorage\n   */\n  LOCAL_STORAGE = 'localStorage',\n\n  /**\n   * IndexedDB channel stores logs in the browser's IndexedDB\n   */\n  INDEXED_DB = 'indexedDB',\n\n  /**\n   * HTTP channel sends logs to a remote server via HTTP\n   */\n  HTTP = 'http',\n\n  /**\n   * Slack channel sends logs to a Slack webhook\n   */\n  SLACK = 'slack',\n\n  /**\n   * ErrorLog channel outputs logs to the browser's error log\n   */\n  ERROR_LOG = 'errorLog',\n\n  /**\n   * Syslog channel outputs logs in syslog format (browser-compatible)\n   */\n  SYSLOG = 'syslog',\n\n  /**\n   * Stack channel combines multiple channels\n   */\n  STACK = 'stack',\n\n  /**\n   * Custom channel type for user-defined channels\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * LogLevel enum defines the available log levels in the ts-log package.\n * These levels are inspired by RFC 5424 and provide a standardized way to categorize log messages.\n */\nexport enum LogLevel {\n  /**\n   * System is unusable\n   */\n  EMERGENCY = 'emergency',\n\n  /**\n   * Action must be taken immediately\n   */\n  ALERT = 'alert',\n\n  /**\n   * Critical conditions\n   */\n  CRITICAL = 'critical',\n\n  /**\n   * Error conditions\n   */\n  ERROR = 'error',\n\n  /**\n   * Warning conditions\n   */\n  WARNING = 'warning',\n\n  /**\n   * Normal but significant condition\n   */\n  NOTICE = 'notice',\n\n  /**\n   * Informational messages\n   */\n  INFO = 'info',\n\n  /**\n   * Debug-level messages\n   */\n  DEBUG = 'debug',\n}\n","/**\n * ProcessorType enum defines the available processor types in the ts-log package.\n * These types determine how log records are processed before being handled.\n */\nexport enum ProcessorType {\n  /**\n   * MessagePlaceholder processor replaces placeholders in log messages with context values\n   */\n  MESSAGE_PLACEHOLDER = 'messagePlaceholder',\n\n  /**\n   * Context processor adds contextual data to log records\n   */\n  CONTEXT = 'context',\n\n  /**\n   * Custom processor type for user-defined processors\n   */\n  CUSTOM = 'custom',\n}\n"]}
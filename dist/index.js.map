{"version":3,"sources":["../src/enums/log-level.enum.ts","../src/events/message-logged.event.ts","../src/interfaces/events/event-dispatcher.interface.ts","../src/logger.ts","../src/enums/date-format.enum.ts","../src/enums/handler-type.enum.ts","../src/enums/formatter-type.enum.ts","../src/enums/processor-type.enum.ts","../src/enums/log-channel-type.enum.ts","../src/config/logging-config.ts","../src/manager.ts","../src/interfaces/context/manager.interface.ts","../src/interfaces/utils/exception-formatter.interface.ts","../src/interfaces/events/dehydrating.interface.ts","../src/interfaces/events/hydrated.interface.ts","../src/interfaces/events/log-event.interface.ts","../src/interfaces/events/message-logged.interface.ts","../src/interfaces/logging/manager.interface.ts","../src/interfaces/logging/logging-service.interface.ts","../src/interfaces/context/management.interface.ts","../src/interfaces/channels/logging-channel.interface.ts","../src/interfaces/channels/single-channel.interface.ts","../src/interfaces/channels/stack-channel.interface.ts","../src/interfaces/handlers/console-handler.interface.ts","../src/interfaces/handlers/error-log-handler.interface.ts","../src/interfaces/handlers/fingers-crossed-handler.interface.ts","../src/interfaces/handlers/http-handler.interface.ts","../src/interfaces/handlers/indexed-db-handler.interface.ts","../src/interfaces/handlers/local-storage-handler.interface.ts","../src/interfaces/handlers/log-handler.interface.ts","../src/interfaces/handlers/slack-webhook-handler.interface.ts","../src/interfaces/handlers/syslog-handler.interface.ts","../src/interfaces/formatters/json-formatter.interface.ts","../src/interfaces/formatters/line-formatter.interface.ts","../src/interfaces/formatters/log-formatter.interface.ts","../src/interfaces/formatters/simple-formatter.interface.ts","../src/interfaces/processors/context-log-processor.interface.ts","../src/interfaces/processors/log-processor.interface.ts","../src/interfaces/processors/message-placeholder-processor.interface.ts","../src/channels/single-channel.ts","../src/channels/stack-channel.ts","../src/context/events/dehydrating.event.ts","../src/context/events/hydrated.event.ts","../src/context/manager.ts","../src/context/repository.ts","../src/events/event-dispatcher.ts","../src/formatters/json-formatter.ts","../src/utils/date.ts","../src/constants/log-level-color.constant.ts","../src/constants/log-level-emoji.constant.ts","../src/constants/log-level-value.constant.ts","../src/formatters/line-formatter.ts","../src/formatters/simple-formatter.ts","../src/handlers/console-handler.ts","../src/handlers/error-log-handler.ts","../src/handlers/fingers-crossed-handler.ts","../src/handlers/http-handler.ts","../src/handlers/indexed-db-handler.ts","../src/handlers/local-storage-handler.ts","../src/handlers/slack-webhook-handler.ts","../src/handlers/syslog-handler.ts","../src/processors/context-log-processor.ts","../src/processors/message-placeholder-processor.ts","../src/utils/exception-formatter.ts","../src/providers/context-service-provider.ts","../src/providers/log-service-provider.ts","../src/utils/validations.ts"],"names":["LogLevel","IEventDispatcher","Logger","injectable","inject","DateFormat","HandlerType","FormatterType","ProcessorType","LogChannelType","LogManager","IContextManager","IExceptionFormatter","IContextDehydrating","IContextHydrated","ILogEvent","IMessageLogged","ILogManager","ILoggingService","IContextManagement","ILoggingChannel","ISingleChannel","IStackChannel","IConsoleHandler","IErrorLogHandler","IFingersCrossedHandler","IHttpHandler","IIndexedDBHandler","ILocalStorageHandler","ILogHandler","ISlackWebhookHandler","ISyslogHandler","IJsonFormatter","ILineFormatter","ILogFormatter","ISimpleFormatter","IContextLogProcessor","ILogProcessor","IMessagePlaceholderProcessor","SingleChannel","StackChannel","ContextManager","ContextRepository","EventDispatcher","JsonFormatter","LineFormatter","SimpleFormatter","ConsoleHandler","ErrorLogHandler","FingersCrossedHandler","HttpHandler","IndexedDBHandler","Dexie","postConstruct","LocalStorageHandler","SlackWebhookHandler","SyslogHandler","ContextLogProcessor","MessagePlaceholderProcessor","ExceptionFormatter","StackTrace","ContextServiceProvider","ServiceProvider","LogServiceProvider"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * LogLevel enum defines the available log levels in the ts-log package.\n * These levels are inspired by RFC 5424 and provide a standardized way to categorize log messages.\n */\nexport enum LogLevel {\n  /**\n   * System is unusable\n   */\n  EMERGENCY = 'emergency',\n\n  /**\n   * Action must be taken immediately\n   */\n  ALERT = 'alert',\n\n  /**\n   * Critical conditions\n   */\n  CRITICAL = 'critical',\n\n  /**\n   * Error conditions\n   */\n  ERROR = 'error',\n\n  /**\n   * Warning conditions\n   */\n  WARNING = 'warning',\n\n  /**\n   * Normal but significant condition\n   */\n  NOTICE = 'notice',\n\n  /**\n   * Informational messages\n   */\n  INFO = 'info',\n\n  /**\n   * Debug-level messages\n   */\n  DEBUG = 'debug',\n}\n","import type { LogLevel } from '../enums/log-level.enum'\nimport type { LogContext } from '../types/log-context.type'\nimport type { IMessageLogged } from '../interfaces/events/message-logged.interface'\n\n/**\n * MessageLoggedEvent is an implementation of the IMessageLogged interface.\n * It represents an event that is dispatched when a message is logged.\n */\nexport class MessageLoggedEvent implements IMessageLogged {\n  private name = 'message.logged'\n  private timestamp: Date = new Date()\n  private level: LogLevel\n  private message: string\n  private context: LogContext\n  private stack?: string\n  private channel: string\n\n  /**\n   * Create a new MessageLoggedEvent instance\n   * @param level The log level\n   * @param message The log message\n   * @param context The log context\n   * @param stack The stack trace\n   * @param channel The channel name\n   */\n  constructor(\n    level: LogLevel,\n    message: string,\n    context: LogContext,\n    stack?: string,\n    channel = 'default',\n  ) {\n    this.level = level\n    this.message = message\n    this.context = context\n    this.stack = stack\n    this.channel = channel\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      level: this.level,\n      message: this.message,\n      context: this.context,\n      stack: this.stack,\n      channel: this.channel,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the log level\n   */\n  public getLevel(): LogLevel {\n    return this.level\n  }\n\n  /**\n   * Get the log message\n   */\n  public getMessage(): string {\n    return this.message\n  }\n\n  /**\n   * Get the log context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the stack trace\n   */\n  public getStack(): string | undefined {\n    return this.stack\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogListener } from '../../types/log-listener.type'\n\n/**\n * IEventDispatcher defines the contract for event dispatchers.\n * It provides methods for dispatching events and managing event listeners.\n */\nexport interface IEventDispatcher {\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  dispatch(event: ILogEvent): void\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  addListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  removeListener(eventName: string, listener: LogListener): void\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  getListeners(eventName: string): LogListener[]\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  hasListeners(eventName: string): boolean\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  clearListeners(eventName: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IEventDispatcher {\n  /**\n   * Symbol for injecting the event dispatcher\n   */\n  export const $ = Symbol.for('IEventDispatcher')\n}\n","import { inject, injectable } from 'inversify'\n\nimport { LogLevel } from './enums/log-level.enum'\nimport type { LogContext } from './types/log-context.type'\nimport { MessageLoggedEvent } from './events/message-logged.event'\nimport { IEventDispatcher } from './interfaces/events/event-dispatcher.interface'\nimport type { ILoggingService } from './interfaces/logging/logging-service.interface'\nimport type { ILoggingChannel } from './interfaces/channels/logging-channel.interface'\n\n/**\n * Logger is the main implementation of the ILoggingService interface.\n * It provides methods for logging messages at different levels and with contextual data.\n */\n@injectable()\nexport class Logger implements ILoggingService {\n  private _channel: ILoggingChannel\n  private _context: LogContext = {}\n  private _eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new Logger instance\n   * @param channel The logging channel to use\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(\n    injectableChannel: ILoggingChannel,\n    @inject(IEventDispatcher.$) eventDispatcher: IEventDispatcher,\n  ) {\n    console.log('=======>>>>>>>>>', injectableChannel)\n    this._channel = injectableChannel\n    this._eventDispatcher = eventDispatcher\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    // Merge the context with the logger's context\n    const mergedContext = { ...this._context, ...context }\n\n    // Log the message to the channel\n    this._channel.log(level, message, mergedContext)\n\n    // Dispatch a MessageLogged event\n    this._eventDispatcher.dispatch(\n      new MessageLoggedEvent(\n        level,\n        message,\n        mergedContext,\n        undefined, // Stack trace will be added by the handler if needed\n        this._channel.getName(),\n      ),\n    )\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public debug(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.DEBUG, message, context)\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public info(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.INFO, message, context)\n  }\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public notice(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.NOTICE, message, context)\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public warning(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.WARNING, message, context)\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public error(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ERROR, message, context)\n  }\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public critical(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.CRITICAL, message, context)\n  }\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public alert(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.ALERT, message, context)\n  }\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public emergency(message: string, context: LogContext = {}): void {\n    this.log(LogLevel.EMERGENCY, message, context)\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingService {\n    this._context = { ...this._context, ...context }\n    return this\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingService {\n    const newContext: LogContext = { ...this._context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this._context = newContext\n    return this\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this._channel.shareContext(context)\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this._channel.flushSharedContext()\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  public channel(channel: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.channel() instead.')\n  }\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  public stack(stack: string): ILoggingService {\n    throw new Error('Method not implemented in Logger. Use LogManager.stack() instead.')\n  }\n}\n","/**\n * DateFormat enum defines the available date formats in the ts-log package.\n * These formats determine how dates are formatted in log records.\n */\nexport enum DateFormat {\n  /**\n   * ISO 8601 format (e.g., 2023-01-01T12:00:00.000Z)\n   */\n  ISO8601 = 'ISO8601',\n\n  /**\n   * RFC 3339 format (e.g., 2023-01-01T12:00:00+00:00)\n   */\n  RFC3339 = 'RFC3339',\n\n  /**\n   * RFC 2822 format (e.g., Mon, 01 Jan 2023 12:00:00 +0000)\n   */\n  RFC2822 = 'RFC2822',\n\n  /**\n   * UNIX timestamp format (e.g., 1672574400)\n   */\n  UNIX = 'UNIX',\n\n  /**\n   * Year-month-day format (e.g., 2023-01-01)\n   */\n  YYYY_MM_DD = 'YYYY-MM-DD',\n\n  /**\n   * Year-month-day hour:minute:second format (e.g., 2023-01-01 12:00:00)\n   */\n  YYYY_MM_DD_HH_MM_SS = 'YYYY-MM-DD HH:mm:ss',\n\n  /**\n   * Day/month/year format (e.g., 01/01/2023)\n   */\n  DD_MM_YYYY = 'DD/MM/YYYY',\n\n  /**\n   * Month/day/year format (e.g., 01/01/2023)\n   */\n  MM_DD_YYYY = 'MM/DD/YYYY',\n\n  /**\n   * Hour:minute:second format (e.g., 12:00:00)\n   */\n  HH_MM_SS = 'HH:mm:ss',\n\n  /**\n   * Custom date format\n   */\n  CUSTOM = 'custom',\n\n  /**\n   * Year-month-day hour:minute:second format with milliseconds (e.g., 2023-01-01 12:00:00.123)\n   */\n  YYYY_MM_DD_HH_MM_SS_MILLI = 'YYYY-MM-DD HH:mm:ss.SSS',\n}\n","/**\n * HandlerType enum defines the available handler types in the ts-log package.\n * These types determine how log records are processed.\n */\nexport enum HandlerType {\n  /**\n   * Console handler outputs logs to the browser console\n   */\n  CONSOLE = 'console',\n\n  /**\n   * LocalStorage handler stores logs in the browser's localStorage\n   */\n  LOCAL_STORAGE = 'localStorage',\n\n  /**\n   * IndexedDB handler stores logs in the browser's IndexedDB\n   */\n  INDEXED_DB = 'indexedDB',\n\n  /**\n   * HTTP handler sends logs to a remote server via HTTP\n   */\n  HTTP = 'http',\n\n  /**\n   * Slack handler sends logs to a Slack webhook\n   */\n  SLACK = 'slack',\n\n  /**\n   * ErrorLog handler outputs logs to the browser's error log\n   */\n  ERROR_LOG = 'errorLog',\n\n  /**\n   * Syslog handler outputs logs in syslog format (browser-compatible)\n   */\n  SYSLOG = 'syslog',\n\n  /**\n   * FingersCrossed handler buffers logs until a certain level is reached\n   */\n  FINGERS_CROSSED = 'fingersCrossed',\n\n  /**\n   * Custom handler type for user-defined handlers\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * FormatterType enum defines the available formatter types in the ts-log package.\n * These types determine how log records are formatted.\n */\nexport enum FormatterType {\n  /**\n   * Line formatter formats logs as lines of text\n   */\n  LINE = 'line',\n\n  /**\n   * JSON formatter formats logs as JSON\n   */\n  JSON = 'json',\n\n  /**\n   * Simple formatter formats logs in a simple format\n   */\n  SIMPLE = 'simple',\n\n  /**\n   * Custom formatter type for user-defined formatters\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * ProcessorType enum defines the available processor types in the ts-log package.\n * These types determine how log records are processed before being handled.\n */\nexport enum ProcessorType {\n  /**\n   * MessagePlaceholder processor replaces placeholders in log messages with context values\n   */\n  MESSAGE_PLACEHOLDER = 'messagePlaceholder',\n\n  /**\n   * Context processor adds contextual data to log records\n   */\n  CONTEXT = 'context',\n\n  /**\n   * Custom processor type for user-defined processors\n   */\n  CUSTOM = 'custom',\n}\n","/**\n * LogChannelType enum defines the available channel types in the ts-log package.\n * These types determine how logs are processed and stored.\n */\nexport enum LogChannelType {\n  /**\n   * Console channel outputs logs to the browser console\n   */\n  CONSOLE = 'console',\n\n  /**\n   * LocalStorage channel stores logs in the browser's localStorage\n   */\n  LOCAL_STORAGE = 'localStorage',\n\n  /**\n   * IndexedDB channel stores logs in the browser's IndexedDB\n   */\n  INDEXED_DB = 'indexedDB',\n\n  /**\n   * HTTP channel sends logs to a remote server via HTTP\n   */\n  HTTP = 'http',\n\n  /**\n   * Slack channel sends logs to a Slack webhook\n   */\n  SLACK = 'slack',\n\n  /**\n   * ErrorLog channel outputs logs to the browser's error log\n   */\n  ERROR_LOG = 'errorLog',\n\n  /**\n   * Syslog channel outputs logs in syslog format (browser-compatible)\n   */\n  SYSLOG = 'syslog',\n\n  /**\n   * Stack channel combines multiple channels\n   */\n  STACK = 'stack',\n\n  /**\n   * Custom channel type for user-defined channels\n   */\n  CUSTOM = 'custom',\n}\n","import { LogLevel } from '../enums/log-level.enum'\nimport { DateFormat } from '../enums/date-format.enum'\nimport { HandlerType } from '../enums/handler-type.enum'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport { ProcessorType } from '../enums/processor-type.enum'\nimport { LogChannelType } from '../enums/log-channel-type.enum'\n\n/**\n * Configuration for the ts-log package.\n * This file contains the default configuration for channels, handlers, formatters, processors, emojis, and colors.\n */\nexport const loggingConfig = {\n  /**\n   * The default channel to use\n   */\n  default: 'console',\n\n  /**\n   * The minimum log level to record\n   */\n  minimumLevel: LogLevel.DEBUG,\n\n  /**\n   * The channels configuration\n   */\n  channels: {\n    console: {\n      type: LogChannelType.CONSOLE,\n      handler: {\n        type: HandlerType.CONSOLE,\n        emojiSupport: true,\n        colorSupport: true,\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: true,\n        colorSupport: true,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    localStorage: {\n      type: LogChannelType.LOCAL_STORAGE,\n      handler: {\n        type: HandlerType.LOCAL_STORAGE,\n        key: 'ts-log',\n        maxEntries: 100,\n      },\n      formatter: {\n        type: FormatterType.JSON,\n        prettyPrint: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    indexedDB: {\n      type: LogChannelType.INDEXED_DB,\n      handler: {\n        type: HandlerType.INDEXED_DB,\n        databaseName: 'ts-log',\n        tableName: 'logs',\n        maxEntries: 1000,\n      },\n      formatter: {\n        type: FormatterType.JSON,\n        prettyPrint: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    slack: {\n      type: LogChannelType.SLACK,\n      handler: {\n        type: HandlerType.SLACK,\n        url: '',\n        channel: '#logs',\n        username: 'ts-log',\n        iconEmoji: ':memo:',\n        emojiSupport: true,\n        maxRetries: 3,\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: true,\n        colorSupport: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    errorLog: {\n      type: LogChannelType.ERROR_LOG,\n      handler: {\n        type: HandlerType.ERROR_LOG,\n        emojiSupport: true,\n      },\n      formatter: {\n        type: FormatterType.SIMPLE,\n        emojiSupport: true,\n        colorSupport: false,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: true,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    syslog: {\n      type: LogChannelType.SYSLOG,\n      handler: {\n        type: HandlerType.SYSLOG,\n        facility: 16, // local0\n        appName: 'ts-log',\n        procId: 'browser',\n      },\n      formatter: {\n        type: FormatterType.LINE,\n        dateFormat: DateFormat.YYYY_MM_DD_HH_MM_SS,\n        emojiSupport: false,\n        colorSupport: false,\n        stackTraceFormatting: true,\n      },\n      processors: [\n        {\n          type: ProcessorType.MESSAGE_PLACEHOLDER,\n          placeholderFormat: '{key}',\n          emojiSupport: false,\n        },\n        {\n          type: ProcessorType.CONTEXT,\n        },\n      ],\n    },\n    stack: {\n      type: LogChannelType.STACK,\n      channels: ['console', 'localStorage'],\n    },\n  },\n\n  /**\n   * Emoji configuration\n   */\n  emoji: {\n    enabled: true,\n    levels: {\n      [LogLevel.EMERGENCY]: '🚨',\n      [LogLevel.ALERT]: '🔔',\n      [LogLevel.CRITICAL]: '❗',\n      [LogLevel.ERROR]: '🔴',\n      [LogLevel.WARNING]: '⚠️',\n      [LogLevel.NOTICE]: '📝',\n      [LogLevel.INFO]: '✅',\n      [LogLevel.DEBUG]: '🛠️',\n    },\n  },\n\n  /**\n   * Color configuration\n   */\n  color: {\n    enabled: true,\n    levels: {\n      [LogLevel.EMERGENCY]: '#FF0000', // Red\n      [LogLevel.ALERT]: '#FF4500', // OrangeRed\n      [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n      [LogLevel.ERROR]: '#FFA500', // Orange\n      [LogLevel.WARNING]: '#FFD700', // Gold\n      [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n      [LogLevel.INFO]: '#32CD32', // LimeGreen\n      [LogLevel.DEBUG]: '#808080', // Gray\n    },\n  },\n}\n","import { injectable } from 'inversify'\n\nimport type {\n  ChannelOptions,\n  HandlerOptions,\n  FormatterOptions,\n  ProcessorOptions,\n  LogContext,\n} from './types'\nimport { Logger } from './logger'\n\nimport type { LogLevel } from './enums/log-level.enum'\nimport { loggingConfig } from './config/logging-config'\nimport type { LogChannelType } from './enums/log-channel-type.enum'\n\nimport type { ILogManager } from './interfaces/logging/manager.interface'\nimport type { ILogHandler } from './interfaces/handlers/log-handler.interface'\nimport type { ILogFormatter } from './interfaces/formatters/log-formatter.interface'\nimport type { ILogProcessor } from './interfaces/processors/log-processor.interface'\nimport type { IEventDispatcher } from './interfaces/events/event-dispatcher.interface'\nimport type { ILoggingService } from './interfaces/logging/logging-service.interface'\nimport type { ILoggingChannel } from './interfaces/channels/logging-channel.interface'\n\n/**\n * LogManager is the main implementation of the ILogManager interface.\n * It provides methods for managing channels, drivers, and extending the logging system.\n */\n@injectable()\nexport class LogManager implements ILogManager {\n  private _channels: Record<string, ILoggingService> = {}\n  private _customDrivers: Record<string, (config: any) => ILoggingService> = {}\n  private _defaultChannel: string = loggingConfig.default\n  private _minimumLevel: LogLevel = loggingConfig.minimumLevel\n  private _eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new LogManager instance\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(eventDispatcher: IEventDispatcher) {\n    this._eventDispatcher = eventDispatcher\n\n    // Initialize channels from config\n    this.initializeChannels()\n  }\n\n  /**\n   * Initialize channels from config\n   */\n  private initializeChannels(): void {\n    for (const [name, config] of Object.entries(loggingConfig.channels)) {\n      try {\n        const channelConfig = config as any\n        const channelType = channelConfig.type as LogChannelType\n\n        // Create the channel\n        this.createChannel(name, channelType, channelConfig)\n      } catch (error) {\n        console.error(`Failed to initialize channel ${name}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    this.channel().log(level, message, context)\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public debug(message: string, context: LogContext = {}): void {\n    this.channel().debug(message, context)\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public info(message: string, context: LogContext = {}): void {\n    this.channel().info(message, context)\n  }\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public notice(message: string, context: LogContext = {}): void {\n    this.channel().notice(message, context)\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public warning(message: string, context: LogContext = {}): void {\n    this.channel().warning(message, context)\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public error(message: string, context: LogContext = {}): void {\n    this.channel().error(message, context)\n  }\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public critical(message: string, context: LogContext = {}): void {\n    this.channel().critical(message, context)\n  }\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public alert(message: string, context: LogContext = {}): void {\n    this.channel().alert(message, context)\n  }\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public emergency(message: string, context: LogContext = {}): void {\n    this.channel().emergency(message, context)\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingService {\n    return this.channel().withContext(context)\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingService {\n    return this.channel().withoutContext(keys)\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this.channel().shareContext(context)\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this.channel().flushSharedContext()\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  public channel(name?: string): ILoggingService {\n    return this.driver(name)\n  }\n\n  /**\n   * Get the stack channel with the specified name\n   * @param name The stack name\n   */\n  public stack(name: string): ILoggingService {\n    return this.driver(name)\n  }\n\n  /**\n   * Get the driver with the specified name\n   * @param name The driver name\n   */\n  public driver(name?: string): ILoggingService {\n    const channelName = name || this._defaultChannel\n\n    if (!this._channels[channelName]) {\n      throw new Error(`Channel [${channelName}] not found.`)\n    }\n\n    return this._channels[channelName]\n  }\n\n  /**\n   * Extend the logging system with a custom driver creator\n   * @param driver The driver name\n   * @param callback The callback function that creates the driver\n   */\n  public extend(driver: string, callback: (config: any) => ILoggingService): void {\n    this._customDrivers[driver] = callback\n  }\n\n  /**\n   * Get all registered channels\n   */\n  public getChannels(): Record<string, ILoggingService> {\n    return this._channels\n  }\n\n  /**\n   * Get the default channel name\n   */\n  public getDefaultChannel(): string {\n    return this._defaultChannel\n  }\n\n  /**\n   * Set the default channel name\n   * @param name The default channel name\n   */\n  public setDefaultChannel(name: string): void {\n    if (!this._channels[name]) {\n      throw new Error(`Channel [${name}] not found.`)\n    }\n\n    this._defaultChannel = name\n  }\n\n  /**\n   * Create a channel with the specified configuration\n   * @param name The channel name\n   * @param type The channel type\n   * @param options The channel options\n   */\n  public createChannel(\n    name: string,\n    type: LogChannelType,\n    options?: ChannelOptions,\n  ): ILoggingService {\n    // Implementation would create the appropriate channel type\n    // For now, we'll just create a simple logger\n    const logger = new Logger(\n      {} as ILoggingChannel, // This would be replaced with the actual channel\n      this._eventDispatcher,\n    )\n\n    this._channels[name] = logger\n\n    return logger\n  }\n\n  /**\n   * Create a handler with the specified configuration\n   * @param type The handler type\n   * @param options The handler options\n   */\n  public createHandler(type: string, options?: HandlerOptions): ILogHandler {\n    // Implementation would create the appropriate handler type\n    return {} as ILogHandler\n  }\n\n  /**\n   * Create a formatter with the specified configuration\n   * @param type The formatter type\n   * @param options The formatter options\n   */\n  public createFormatter(type: string, options?: FormatterOptions): ILogFormatter {\n    // Implementation would create the appropriate formatter type\n    return {} as ILogFormatter\n  }\n\n  /**\n   * Create a processor with the specified configuration\n   * @param type The processor type\n   * @param options The processor options\n   */\n  public createProcessor(type: string, options?: ProcessorOptions): ILogProcessor {\n    // Implementation would create the appropriate processor type\n    return {} as ILogProcessor\n  }\n\n  /**\n   * Get the minimum log level\n   */\n  public getMinimumLevel(): LogLevel {\n    return this._minimumLevel\n  }\n\n  /**\n   * Set the minimum log level\n   * @param level The minimum log level\n   */\n  public setMinimumLevel(level: LogLevel): void {\n    this._minimumLevel = level\n  }\n}\n","import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManager defines the contract for context managers.\n * It provides methods for managing contextual data across components.\n */\nexport interface IContextManager {\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get all contextual data\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear all contextual data\n   */\n  clearContext(): void\n\n  /**\n   * Create a scoped context manager\n   */\n  createScope(): IContextManager\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  merge(manager: IContextManager): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManager {\n  /**\n   * Symbol for injecting the context manager\n   */\n  export const $ = Symbol.for('IContextManager')\n}\n","/**\n * IExceptionFormatter defines the contract for exception formatters.\n * It provides methods for formatting exceptions.\n */\nexport interface IExceptionFormatter {\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  format(exception: Error): Promise<string>\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  getStackTrace(exception: Error): Promise<string>\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IExceptionFormatter {\n  /**\n   * Symbol for injecting the exception formatter\n   */\n  export const $ = Symbol.for('IExceptionFormatter')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextDehydrating defines the contract for context dehydrating events.\n * It provides methods for accessing information about context dehydration.\n */\nexport interface IContextDehydrating extends ILogEvent {\n  /**\n   * Get the context data being dehydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  setContext(context: LogContext): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextDehydrating {\n  /**\n   * Symbol for injecting the context dehydrating event\n   */\n  export const $ = Symbol.for('IContextDehydrating')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextHydrated defines the contract for context hydrated events.\n * It provides methods for accessing information about context hydration.\n */\nexport interface IContextHydrated extends ILogEvent {\n  /**\n   * Get the context data that was hydrated\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the source of the hydrated data\n   */\n  getSource(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextHydrated {\n  /**\n   * Symbol for injecting the context hydrated event\n   */\n  export const $ = Symbol.for('IContextHydrated')\n}\n","/**\n * ILogEvent defines the contract for log events.\n * It provides methods for identifying and handling log events.\n */\nexport interface ILogEvent {\n  /**\n   * Get the event name\n   */\n  getName(): string\n\n  /**\n   * Get the event data\n   */\n  getData(): Record<string, any>\n\n  /**\n   * Get the event timestamp\n   */\n  getTimestamp(): Date\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogEvent {\n  /**\n   * Symbol for injecting the log event\n   */\n  export const $ = Symbol.for('ILogEvent')\n}\n","import type { ILogEvent } from './log-event.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IMessageLogged defines the contract for message logged events.\n * It provides methods for accessing information about logged messages.\n */\nexport interface IMessageLogged extends ILogEvent {\n  /**\n   * Get the log level\n   */\n  getLevel(): LogLevel\n\n  /**\n   * Get the log message\n   */\n  getMessage(): string\n\n  /**\n   * Get the log context\n   */\n  getContext(): LogContext\n\n  /**\n   * Get the stack trace\n   */\n  getStack(): string | undefined\n\n  /**\n   * Get the channel name\n   */\n  getChannel(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessageLogged {\n  /**\n   * Symbol for injecting the message logged event\n   */\n  export const $ = Symbol.for('IMessageLogged')\n}\n","import type {\n  LogContext,\n  ChannelOptions,\n  HandlerOptions,\n  FormatterOptions,\n  ProcessorOptions,\n} from '../../types'\nimport type { LogLevel } from '../../enums/log-level.enum'\nimport type { ILoggingService } from './logging-service.interface'\nimport type { LogChannelType } from '../../enums/log-channel-type.enum'\n\n/**\n * ILogManager defines the contract for log managers.\n * It provides methods for managing channels, drivers, and extending the logging system.\n */\nexport interface ILogManager extends ILoggingService {\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  channel(name?: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param name The stack name\n   */\n  stack(name: string): ILoggingService\n\n  /**\n   * Get the driver with the specified name\n   * @param name The driver name\n   */\n  driver(name?: string): ILoggingService\n\n  /**\n   * Extend the logging system with a custom driver creator\n   * @param driver The driver name\n   * @param callback The callback function that creates the driver\n   */\n  extend(driver: string, callback: (config: any) => ILoggingService): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context: LogContext): void\n\n  /**\n   * Get all registered channels\n   */\n  getChannels(): Record<string, ILoggingService>\n\n  /**\n   * Get the default channel name\n   */\n  getDefaultChannel(): string\n\n  /**\n   * Set the default channel name\n   * @param name The default channel name\n   */\n  setDefaultChannel(name: string): void\n\n  /**\n   * Create a channel with the specified configuration\n   * @param name The channel name\n   * @param type The channel type\n   * @param options The channel options\n   */\n  createChannel(name: string, type: LogChannelType, options?: ChannelOptions): ILoggingService\n\n  /**\n   * Create a handler with the specified configuration\n   * @param type The handler type\n   * @param options The handler options\n   */\n  createHandler(type: string, options?: HandlerOptions): any\n\n  /**\n   * Create a formatter with the specified configuration\n   * @param type The formatter type\n   * @param options The formatter options\n   */\n  createFormatter(type: string, options?: FormatterOptions): any\n\n  /**\n   * Create a processor with the specified configuration\n   * @param type The processor type\n   * @param options The processor options\n   */\n  createProcessor(type: string, options?: ProcessorOptions): any\n\n  /**\n   * Get the minimum log level\n   */\n  getMinimumLevel(): LogLevel\n\n  /**\n   * Set the minimum log level\n   * @param level The minimum log level\n   */\n  setMinimumLevel(level: LogLevel): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogManager {\n  /**\n   * Symbol for injecting the log manager\n   */\n  export const $ = Symbol.for('ILogManager')\n}\n","import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ILoggingService defines the contract for logging services.\n * It provides methods for logging messages at different levels and with contextual data.\n */\nexport interface ILoggingService {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  debug(message: string, context?: LogContext): void\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  info(message: string, context?: LogContext): void\n\n  /**\n   * Log a notice message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  notice(message: string, context?: LogContext): void\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  warning(message: string, context?: LogContext): void\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  error(message: string, context?: LogContext): void\n\n  /**\n   * Log a critical message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  critical(message: string, context?: LogContext): void\n\n  /**\n   * Log an alert message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  alert(message: string, context?: LogContext): void\n\n  /**\n   * Log an emergency message\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  emergency(message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingService\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingService\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n\n  /**\n   * Get the channel with the specified name\n   * @param channel The channel name\n   */\n  channel(channel: string): ILoggingService\n\n  /**\n   * Get the stack channel with the specified name\n   * @param stack The stack name\n   */\n  stack(stack: string): ILoggingService\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingService {\n  /**\n   * Symbol for injecting the logging service\n   */\n  export const $ = Symbol.for('ILoggingService')\n}\n","import type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextManagement defines the contract for context management.\n * It provides methods for managing contextual data.\n */\nexport interface IContextManagement {\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  add(key: string, value: any): void\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  get<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  has(key: string): boolean\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  forget(key: string): void\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  addHidden(key: string, value: any): void\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  getHidden<T>(key: string, defaultValue?: T): T\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  hasHidden(key: string): boolean\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  forgetHidden(key: string): void\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  push(key: string, value: any): void\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  pop<T>(key: string): T | undefined\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  stackContains(key: string, value: any): boolean\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  increment(key: string, amount?: number): number\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  decrement(key: string, amount?: number): number\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  scope<T>(callback: () => T): T\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  dehydrate(): Record<string, any>\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  hydrate(data: Record<string, any>): void\n\n  /**\n   * Get all context data\n   */\n  all(): LogContext\n\n  /**\n   * Clear all context data\n   */\n  clear(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextManagement {\n  /**\n   * Symbol for injecting the context management\n   */\n  export const $ = Symbol.for('IContextManagement')\n}\n","import type { LogLevel } from '../../enums/log-level.enum'\nimport type { LogContext, LogRecord } from '../../types'\n\n/**\n * ILoggingChannel defines the contract for logging channels.\n * It provides methods for logging messages and managing channel-specific context.\n */\nexport interface ILoggingChannel {\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  log(level: LogLevel, message: string, context?: LogContext): void\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  withContext(context: LogContext): ILoggingChannel\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  withoutContext(keys: string[]): ILoggingChannel\n\n  /**\n   * Get the channel name\n   */\n  getName(): string\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  processRecord(record: LogRecord): LogRecord\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  shareContext(context: LogContext): void\n\n  /**\n   * Flush shared context\n   */\n  flushSharedContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILoggingChannel {\n  /**\n   * Symbol for injecting the logging channel\n   */\n  export const $ = Symbol.for('ILoggingChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\nimport type { ILogHandler } from '../handlers/log-handler.interface'\nimport type { ILogFormatter } from '../formatters/log-formatter.interface'\nimport type { ILogProcessor } from '../processors/log-processor.interface'\n\n/**\n * ISingleChannel defines the contract for single channels.\n * A single channel uses a single handler to process log messages.\n */\nexport interface ISingleChannel extends ILoggingChannel {\n  /**\n   * Get the handler used by the channel\n   */\n  getHandler(): ILogHandler\n\n  /**\n   * Set the handler used by the channel\n   * @param handler The handler to use\n   */\n  setHandler(handler: ILogHandler): void\n\n  /**\n   * Get the formatter used by the channel\n   */\n  getFormatter(): ILogFormatter\n\n  /**\n   * Set the formatter used by the channel\n   * @param formatter The formatter to use\n   */\n  setFormatter(formatter: ILogFormatter): void\n\n  /**\n   * Get the processors used by the channel\n   */\n  getProcessors(): ILogProcessor[]\n\n  /**\n   * Add a processor to the channel\n   * @param processor The processor to add\n   */\n  addProcessor(processor: ILogProcessor): void\n\n  /**\n   * Remove a processor from the channel\n   * @param name The name of the processor to remove\n   */\n  removeProcessor(name: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISingleChannel {\n  /**\n   * Symbol for injecting the single channel\n   */\n  export const $ = Symbol.for('ISingleChannel')\n}\n","import type { ILoggingChannel } from './logging-channel.interface'\n\n/**\n * IStackChannel defines the contract for stack channels.\n * A stack channel combines multiple channels into a single channel.\n */\nexport interface IStackChannel extends ILoggingChannel {\n  /**\n   * Get the channels in the stack\n   */\n  getChannels(): ILoggingChannel[]\n\n  /**\n   * Add a channel to the stack\n   * @param channel The channel to add\n   */\n  addChannel(channel: ILoggingChannel): void\n\n  /**\n   * Remove a channel from the stack\n   * @param name The name of the channel to remove\n   */\n  removeChannel(name: string): void\n\n  /**\n   * Check if the stack contains a channel with the specified name\n   * @param name The channel name\n   */\n  hasChannel(name: string): boolean\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  getChannel(name: string): ILoggingChannel | undefined\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IStackChannel {\n  /**\n   * Symbol for injecting the stack channel\n   */\n  export const $ = Symbol.for('IStackChannel')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IConsoleHandler defines the contract for console handlers.\n * It provides methods for handling log records in the browser console.\n */\nexport interface IConsoleHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConsoleHandler {\n  /**\n   * Symbol for injecting the console handler\n   */\n  export const $ = Symbol.for('IConsoleHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IErrorLogHandler defines the contract for error log handlers.\n * It provides methods for handling log records in the browser's error log.\n */\nexport interface IErrorLogHandler extends ILogHandler {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IErrorLogHandler {\n  /**\n   * Symbol for injecting the error log handler\n   */\n  export const $ = Symbol.for('IErrorLogHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\nimport type { LogLevel } from '../../enums/log-level.enum'\n\n/**\n * IFingersCrossedHandler defines the contract for fingers-crossed handlers.\n * It provides methods for handling log records only when a certain action level is reached.\n */\nexport interface IFingersCrossedHandler extends ILogHandler {\n  /**\n   * Get the action level\n   */\n  getActionLevel(): LogLevel\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  setActionLevel(level: LogLevel): void\n\n  /**\n   * Get the buffer size\n   */\n  getBufferSize(): number\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  setBufferSize(size: number): void\n\n  /**\n   * Get whether the handler is activated\n   */\n  isActivated(): boolean\n\n  /**\n   * Reset the handler\n   */\n  reset(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IFingersCrossedHandler {\n  /**\n   * Symbol for injecting the fingers-crossed handler\n   */\n  export const $ = Symbol.for('IFingersCrossedHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IHttpHandler defines the contract for HTTP handlers.\n * It provides methods for handling log records via HTTP requests.\n */\nexport interface IHttpHandler extends ILogHandler {\n  /**\n   * Get the URL to send log records to\n   */\n  getUrl(): string\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  setUrl(url: string): void\n\n  /**\n   * Get the HTTP method to use\n   */\n  getMethod(): string\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  setMethod(method: string): void\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  getHeaders(): Record<string, string>\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  setHeaders(headers: Record<string, string>): void\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  getMaxRetries(): number\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  setMaxRetries(maxRetries: number): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IHttpHandler {\n  /**\n   * Symbol for injecting the HTTP handler\n   */\n  export const $ = Symbol.for('IHttpHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * IIndexedDBHandler defines the contract for IndexedDB handlers.\n * It provides methods for handling log records in the browser's IndexedDB.\n */\nexport interface IIndexedDBHandler extends ILogHandler {\n  /**\n   * Get the database name\n   */\n  getDatabaseName(): string\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  setDatabaseName(name: string): void\n\n  /**\n   * Get the table name\n   */\n  getTableName(): string\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  setTableName(name: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): Promise<any[]>\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): Promise<void>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IIndexedDBHandler {\n  /**\n   * Symbol for injecting the IndexedDB handler\n   */\n  export const $ = Symbol.for('IIndexedDBHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ILocalStorageHandler defines the contract for localStorage handlers.\n * It provides methods for handling log records in the browser's localStorage.\n */\nexport interface ILocalStorageHandler extends ILogHandler {\n  /**\n   * Get the localStorage key used to store logs\n   */\n  getKey(): string\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  setKey(key: string): void\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  getMaxEntries(): number\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  setMaxEntries(maxEntries: number): void\n\n  /**\n   * Get all stored log entries\n   */\n  getEntries(): any[]\n\n  /**\n   * Clear all stored log entries\n   */\n  clearEntries(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILocalStorageHandler {\n  /**\n   * Symbol for injecting the localStorage handler\n   */\n  export const $ = Symbol.for('ILocalStorageHandler')\n}\n","import type { LogRecord } from '../../types/log-record.type'\n\n/**\n * ILogHandler defines the contract for log handlers.\n * It provides methods for handling log records.\n */\nexport interface ILogHandler {\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  handle(record: LogRecord): void\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  isHandling(record: LogRecord): boolean\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  setNext(handler: ILogHandler): ILogHandler\n\n  /**\n   * Get the next handler in the chain\n   */\n  getNext(): ILogHandler | null\n\n  /**\n   * Get the handler name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogHandler {\n  /**\n   * Symbol for injecting the log handler\n   */\n  export const $ = Symbol.for('ILogHandler')\n}\n","import type { IHttpHandler } from './http-handler.interface'\n\n/**\n * ISlackWebhookHandler defines the contract for Slack webhook handlers.\n * It provides methods for handling log records via Slack webhooks.\n */\nexport interface ISlackWebhookHandler extends IHttpHandler {\n  /**\n   * Get the Slack channel to send log records to\n   */\n  getChannel(): string\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  setChannel(channel: string): void\n\n  /**\n   * Get the username to use when sending log records\n   */\n  getUsername(): string\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  setUsername(username: string): void\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  getIconEmoji(): string\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  setIconEmoji(emoji: string): void\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISlackWebhookHandler {\n  /**\n   * Symbol for injecting the Slack webhook handler\n   */\n  export const $ = Symbol.for('ISlackWebhookHandler')\n}\n","import type { ILogHandler } from './log-handler.interface'\n\n/**\n * ISyslogHandler defines the contract for syslog handlers.\n * It provides methods for handling log records in syslog format (browser-compatible).\n */\nexport interface ISyslogHandler extends ILogHandler {\n  /**\n   * Get the facility code\n   */\n  getFacility(): number\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  setFacility(facility: number): void\n\n  /**\n   * Get the application name\n   */\n  getAppName(): string\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  setAppName(appName: string): void\n\n  /**\n   * Get the process ID\n   */\n  getProcId(): string\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  setProcId(procId: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISyslogHandler {\n  /**\n   * Symbol for injecting the syslog handler\n   */\n  export const $ = Symbol.for('ISyslogHandler')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * IJsonFormatter defines the contract for JSON formatters.\n * It provides methods for formatting log records as JSON.\n */\nexport interface IJsonFormatter extends ILogFormatter {\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  setPrettyPrint(enabled: boolean): void\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  isPrettyPrintEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IJsonFormatter {\n  /**\n   * Symbol for injecting the JSON formatter\n   */\n  export const $ = Symbol.for('IJsonFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ILineFormatter defines the contract for line formatters.\n * It provides methods for formatting log records as lines of text.\n */\nexport interface ILineFormatter extends ILogFormatter {\n  /**\n   * Get the date format\n   */\n  getDateFormat(): string\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  setDateFormat(format: string): void\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  setStackTraceFormatting(enabled: boolean): void\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  isStackTraceFormattingEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILineFormatter {\n  /**\n   * Symbol for injecting the line formatter\n   */\n  export const $ = Symbol.for('ILineFormatter')\n}\n","import type { LogRecord } from '../../types/log-record.type'\n\n/**\n * ILogFormatter defines the contract for log formatters.\n * It provides methods for formatting log records.\n */\nexport interface ILogFormatter {\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  format(record: LogRecord): string\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  formatBatch(records: LogRecord[]): string\n\n  /**\n   * Get the formatter name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogFormatter {\n  /**\n   * Symbol for injecting the log formatter\n   */\n  export const $ = Symbol.for('ILogFormatter')\n}\n","import type { ILogFormatter } from './log-formatter.interface'\n\n/**\n * ISimpleFormatter defines the contract for simple formatters.\n * It provides methods for formatting log records in a simple format.\n */\nexport interface ISimpleFormatter extends ILogFormatter {\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  setColorSupport(enabled: boolean): void\n\n  /**\n   * Get whether color support is enabled\n   */\n  isColorSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ISimpleFormatter {\n  /**\n   * Symbol for injecting the simple formatter\n   */\n  export const $ = Symbol.for('ISimpleFormatter')\n}\n","import type { ILogProcessor } from './log-processor.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * IContextLogProcessor defines the contract for context log processors.\n * It provides methods for adding contextual data to log records.\n */\nexport interface IContextLogProcessor extends ILogProcessor {\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  addContext(context: LogContext): void\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  removeContext(keys: string[]): void\n\n  /**\n   * Get the current context\n   */\n  getContext(): LogContext\n\n  /**\n   * Clear the current context\n   */\n  clearContext(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextLogProcessor {\n  /**\n   * Symbol for injecting the context log processor\n   */\n  export const $ = Symbol.for('IContextLogProcessor')\n}\n","import type { LogRecord } from '../../types/log-record.type'\n\n/**\n * ILogProcessor defines the contract for log processors.\n * It provides methods for processing log records.\n */\nexport interface ILogProcessor {\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  process(record: LogRecord): LogRecord\n\n  /**\n   * Get the processor name\n   */\n  getName(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogProcessor {\n  /**\n   * Symbol for injecting the log processor\n   */\n  export const $ = Symbol.for('ILogProcessor')\n}\n","import type { ILogProcessor } from './log-processor.interface'\n\n/**\n * IMessagePlaceholderProcessor defines the contract for message placeholder processors.\n * It provides methods for replacing placeholders in log messages with context values.\n */\nexport interface IMessagePlaceholderProcessor extends ILogProcessor {\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  setPlaceholderFormat(format: string): void\n\n  /**\n   * Get the placeholder format\n   */\n  getPlaceholderFormat(): string\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  setEmojiSupport(enabled: boolean): void\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  isEmojiSupportEnabled(): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMessagePlaceholderProcessor {\n  /**\n   * Symbol for injecting the message placeholder processor\n   */\n  export const $ = Symbol.for('IMessagePlaceholderProcessor')\n}\n","import { injectable } from 'inversify'\n\nimport type { LogContext, LogRecord } from '../types'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport type { ILogHandler } from '../interfaces/handlers/log-handler.interface'\nimport type { ISingleChannel } from '../interfaces/channels/single-channel.interface'\nimport type { ILogFormatter } from '../interfaces/formatters/log-formatter.interface'\nimport type { ILogProcessor } from '../interfaces/processors/log-processor.interface'\n\n/**\n * SingleChannel is an implementation of the ISingleChannel interface.\n * It uses a single handler to process log messages.\n */\n@injectable()\nexport class SingleChannel implements ISingleChannel {\n  private name: string\n  private handler: ILogHandler\n  private formatter: ILogFormatter\n  private processors: ILogProcessor[] = []\n  private context: LogContext = {}\n\n  /**\n   * Create a new SingleChannel instance\n   * @param name The channel name\n   * @param handler The handler to use\n   * @param formatter The formatter to use\n   */\n  constructor(name: string, handler: ILogHandler, formatter: ILogFormatter) {\n    this.name = name\n    this.handler = handler\n    this.formatter = formatter\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    // Create a log record\n    let record: LogRecord = {\n      level: level,\n      levelName: level.toUpperCase(),\n      message: message,\n      context: { ...this.context, ...context },\n      datetime: new Date(),\n    }\n\n    // Process the record with all processors\n    record = this.processRecord(record)\n\n    // Handle the record\n    if (this.handler.isHandling(record)) {\n      this.handler.handle(record)\n    }\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ISingleChannel {\n    this.context = { ...this.context, ...context }\n    return this\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ISingleChannel {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this.context = newContext\n    return this\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public processRecord(record: LogRecord): LogRecord {\n    let processedRecord = record\n\n    // Process the record with all processors\n    for (const processor of this.processors) {\n      processedRecord = processor.process(processedRecord)\n    }\n\n    return processedRecord\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    this.context = { ...this.context, ...context }\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    this.context = {}\n  }\n\n  /**\n   * Get the handler used by the channel\n   */\n  public getHandler(): ILogHandler {\n    return this.handler\n  }\n\n  /**\n   * Set the handler used by the channel\n   * @param handler The handler to use\n   */\n  public setHandler(handler: ILogHandler): void {\n    this.handler = handler\n  }\n\n  /**\n   * Get the formatter used by the channel\n   */\n  public getFormatter(): ILogFormatter {\n    return this.formatter\n  }\n\n  /**\n   * Set the formatter used by the channel\n   * @param formatter The formatter to use\n   */\n  public setFormatter(formatter: ILogFormatter): void {\n    this.formatter = formatter\n  }\n\n  /**\n   * Get the processors used by the channel\n   */\n  public getProcessors(): ILogProcessor[] {\n    return this.processors\n  }\n\n  /**\n   * Add a processor to the channel\n   * @param processor The processor to add\n   */\n  public addProcessor(processor: ILogProcessor): void {\n    this.processors.push(processor)\n  }\n\n  /**\n   * Remove a processor from the channel\n   * @param name The name of the processor to remove\n   */\n  public removeProcessor(name: string): void {\n    this.processors = this.processors.filter((processor) => processor.getName() !== name)\n  }\n}\n","import { injectable, inject } from 'inversify'\n\nimport type { LogContext, LogRecord } from '../types'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\nimport type { IStackChannel } from '../interfaces/channels/stack-channel.interface'\nimport type { ILoggingChannel } from '../interfaces/channels/logging-channel.interface'\n\n/**\n * StackChannel is an implementation of the IStackChannel interface.\n * It combines multiple channels into a single channel.\n */\n@injectable()\nexport class StackChannel implements IStackChannel {\n  private name: string\n  private context: LogContext = {}\n  private channels: ILoggingChannel[] = []\n\n  /**\n   * Create a new StackChannel instance\n   * @param name The channel name\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(name: string, @inject(IEventDispatcher.$) eventDispatcher: IEventDispatcher) {\n    this.name = name\n  }\n\n  /**\n   * Log a message at the specified level\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional contextual data\n   */\n  public log(level: LogLevel, message: string, context: LogContext = {}): void {\n    // Merge the context with the channel's context\n    const mergedContext = { ...this.context, ...context }\n\n    // Log the message to all channels in the stack\n    for (const channel of this.channels) {\n      channel.log(level, message, mergedContext)\n    }\n  }\n\n  /**\n   * Add contextual data to all subsequent log messages\n   * @param context The contextual data to add\n   */\n  public withContext(context: LogContext): ILoggingChannel {\n    this.context = { ...this.context, ...context }\n    return this\n  }\n\n  /**\n   * Remove contextual data from all subsequent log messages\n   * @param keys The keys to remove from the context\n   */\n  public withoutContext(keys: string[]): ILoggingChannel {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this.context = newContext\n    return this\n  }\n\n  /**\n   * Get the channel name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public processRecord(record: LogRecord): LogRecord {\n    // Process the record with all channels in the stack\n    let processedRecord = record\n    for (const channel of this.channels) {\n      processedRecord = channel.processRecord(processedRecord)\n    }\n    return processedRecord\n  }\n\n  /**\n   * Share context across channels\n   * @param context The contextual data to share\n   */\n  public shareContext(context: LogContext): void {\n    for (const channel of this.channels) {\n      channel.shareContext(context)\n    }\n  }\n\n  /**\n   * Flush shared context\n   */\n  public flushSharedContext(): void {\n    for (const channel of this.channels) {\n      channel.flushSharedContext()\n    }\n  }\n\n  /**\n   * Get the channels in the stack\n   */\n  public getChannels(): ILoggingChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Add a channel to the stack\n   * @param channel The channel to add\n   */\n  public addChannel(channel: ILoggingChannel): void {\n    this.channels.push(channel)\n  }\n\n  /**\n   * Remove a channel from the stack\n   * @param name The name of the channel to remove\n   */\n  public removeChannel(name: string): void {\n    this.channels = this.channels.filter((channel) => channel.getName() !== name)\n  }\n\n  /**\n   * Check if the stack contains a channel with the specified name\n   * @param name The channel name\n   */\n  public hasChannel(name: string): boolean {\n    return this.channels.some((channel) => channel.getName() === name)\n  }\n\n  /**\n   * Get the channel with the specified name\n   * @param name The channel name\n   */\n  public getChannel(name: string): ILoggingChannel | undefined {\n    return this.channels.find((channel) => channel.getName() === name)\n  }\n}\n","import type { IContextDehydrating } from '../../interfaces/events/dehydrating.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ContextDehydratingEvent is an implementation of the IContextDehydrating interface.\n * It represents an event that is dispatched when the context is being dehydrated.\n */\nexport class ContextDehydratingEvent implements IContextDehydrating {\n  private name = 'context.dehydrating'\n  private timestamp: Date = new Date()\n  private context: LogContext\n\n  /**\n   * Create a new ContextDehydratingEvent instance\n   * @param context The context data being dehydrated\n   */\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data being dehydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Set the context data being dehydrated\n   * @param context The context data\n   */\n  public setContext(context: LogContext): void {\n    this.context = context\n  }\n}\n","import type { IContextHydrated } from '../../interfaces/events/hydrated.interface'\nimport type { LogContext } from '../../types/log-context.type'\n\n/**\n * ContextHydratedEvent is an implementation of the IContextHydrated interface.\n * It represents an event that is dispatched when the context has been hydrated.\n */\nexport class ContextHydratedEvent implements IContextHydrated {\n  private name = 'context.hydrated'\n  private timestamp: Date = new Date()\n  private context: LogContext\n  private source: string\n\n  /**\n   * Create a new ContextHydratedEvent instance\n   * @param context The context data that was hydrated\n   * @param source The source of the hydrated data\n   */\n  constructor(context: LogContext, source: string) {\n    this.context = context\n    this.source = source\n  }\n\n  /**\n   * Get the event name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the event data\n   */\n  public getData(): Record<string, any> {\n    return {\n      context: this.context,\n      source: this.source,\n    }\n  }\n\n  /**\n   * Get the event timestamp\n   */\n  public getTimestamp(): Date {\n    return this.timestamp\n  }\n\n  /**\n   * Get the context data that was hydrated\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Get the source of the hydrated data\n   */\n  public getSource(): string {\n    return this.source\n  }\n}\n","import { injectable, inject } from 'inversify'\nimport type { IContextManager } from '../interfaces/context/manager.interface'\nimport { IContextManagement } from '../interfaces/context/management.interface'\nimport type { LogContext } from '../types/log-context.type'\n\n/**\n * ContextManager is an implementation of the IContextManager interface.\n * It provides methods for managing contextual data across components.\n */\n@injectable()\nexport class ContextManager implements IContextManager {\n  private context: LogContext = {}\n  private parent: IContextManager | null = null\n  private contextRepository: IContextManagement\n\n  /**\n   * Create a new ContextManager instance\n   * @param contextRepository The context repository to use\n   */\n  constructor(@inject(IContextManagement.$) contextRepository: IContextManagement) {\n    this.contextRepository = contextRepository\n  }\n\n  /**\n   * Add contextual data\n   * @param context The contextual data to add\n   */\n  public addContext(context: LogContext): void {\n    this.context = { ...this.context, ...context }\n\n    // Add the context to the repository\n    for (const [key, value] of Object.entries(context)) {\n      this.contextRepository.add(key, value)\n    }\n  }\n\n  /**\n   * Remove contextual data\n   * @param keys The keys to remove from the context\n   */\n  public removeContext(keys: string[]): void {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n      this.contextRepository.forget(key)\n    }\n    this.context = newContext\n  }\n\n  /**\n   * Get all contextual data\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Clear all contextual data\n   */\n  public clearContext(): void {\n    this.context = {}\n  }\n\n  /**\n   * Create a scoped context manager\n   */\n  public createScope(): IContextManager {\n    const scopedManager = new ContextManager(this.contextRepository)\n    scopedManager.parent = this\n    return scopedManager\n  }\n\n  /**\n   * Merge contextual data from another context manager\n   * @param manager The context manager to merge from\n   */\n  public merge(manager: IContextManager): void {\n    this.addContext(manager.getContext())\n  }\n}\n","import { injectable } from 'inversify'\nimport type { IContextManagement } from '../interfaces/context/management.interface'\nimport type { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\nimport type { LogContext } from '../types/log-context.type'\nimport { ContextDehydratingEvent } from './events/dehydrating.event'\nimport { ContextHydratedEvent } from './events/hydrated.event'\n\n/**\n * ContextRepository is an implementation of the IContextManagement interface.\n * It provides methods for managing contextual data.\n */\n@injectable()\nexport class ContextRepository implements IContextManagement {\n  private context: LogContext = {}\n  private hiddenContext: LogContext = {}\n  private stacks: Record<string, any[]> = {}\n  private counters: Record<string, number> = {}\n  private eventDispatcher: IEventDispatcher\n\n  /**\n   * Create a new ContextRepository instance\n   * @param eventDispatcher The event dispatcher to use\n   */\n  constructor(eventDispatcher: IEventDispatcher) {\n    this.eventDispatcher = eventDispatcher\n  }\n\n  /**\n   * Add a value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  public add(key: string, value: any): void {\n    this.context[key] = value\n  }\n\n  /**\n   * Get a value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    return (this.context[key] as T) ?? (defaultValue as T)\n  }\n\n  /**\n   * Check if the context contains a key\n   * @param key The context key\n   */\n  public has(key: string): boolean {\n    return key in this.context\n  }\n\n  /**\n   * Remove a value from the context\n   * @param key The context key\n   */\n  public forget(key: string): void {\n    delete this.context[key]\n  }\n\n  /**\n   * Add a hidden value to the context\n   * @param key The context key\n   * @param value The context value\n   */\n  public addHidden(key: string, value: any): void {\n    this.hiddenContext[key] = value\n  }\n\n  /**\n   * Get a hidden value from the context\n   * @param key The context key\n   * @param defaultValue The default value to return if the key is not found\n   */\n  public getHidden<T>(key: string, defaultValue?: T): T {\n    return (this.hiddenContext[key] as T) ?? (defaultValue as T)\n  }\n\n  /**\n   * Check if the context contains a hidden key\n   * @param key The context key\n   */\n  public hasHidden(key: string): boolean {\n    return key in this.hiddenContext\n  }\n\n  /**\n   * Remove a hidden value from the context\n   * @param key The context key\n   */\n  public forgetHidden(key: string): void {\n    delete this.hiddenContext[key]\n  }\n\n  /**\n   * Push a value onto a stack in the context\n   * @param key The context key\n   * @param value The value to push\n   */\n  public push(key: string, value: any): void {\n    if (!this.stacks[key]) {\n      this.stacks[key] = []\n    }\n    this.stacks[key].push(value)\n  }\n\n  /**\n   * Pop a value from a stack in the context\n   * @param key The context key\n   */\n  public pop<T>(key: string): T | undefined {\n    if (!this.stacks[key] || this.stacks[key].length === 0) {\n      return undefined\n    }\n    return this.stacks[key].pop() as T\n  }\n\n  /**\n   * Check if a stack in the context contains a value\n   * @param key The context key\n   * @param value The value to check for\n   */\n  public stackContains(key: string, value: any): boolean {\n    if (!this.stacks[key]) {\n      return false\n    }\n    return this.stacks[key].includes(value)\n  }\n\n  /**\n   * Increment a counter in the context\n   * @param key The context key\n   * @param amount The amount to increment by\n   */\n  public increment(key: string, amount = 1): number {\n    if (!this.counters[key]) {\n      this.counters[key] = 0\n    }\n    this.counters[key] += amount\n    return this.counters[key]\n  }\n\n  /**\n   * Decrement a counter in the context\n   * @param key The context key\n   * @param amount The amount to decrement by\n   */\n  public decrement(key: string, amount = 1): number {\n    if (!this.counters[key]) {\n      this.counters[key] = 0\n    }\n    this.counters[key] -= amount\n    return this.counters[key]\n  }\n\n  /**\n   * Create a scoped context\n   * @param callback The callback function to execute with the scoped context\n   */\n  public scope<T>(callback: () => T): T {\n    // Save the current context\n    const savedContext = { ...this.context }\n    const savedHiddenContext = { ...this.hiddenContext }\n    const savedStacks = { ...this.stacks }\n    const savedCounters = { ...this.counters }\n\n    try {\n      // Execute the callback\n      return callback()\n    } finally {\n      // Restore the context\n      this.context = savedContext\n      this.hiddenContext = savedHiddenContext\n      this.stacks = savedStacks\n      this.counters = savedCounters\n    }\n  }\n\n  /**\n   * Dehydrate the context to a serializable object\n   */\n  public dehydrate(): Record<string, any> {\n    // Create a dehydrated context\n    const dehydratedContext: Record<string, any> = {\n      context: { ...this.context },\n      counters: { ...this.counters },\n    }\n\n    // Dispatch a ContextDehydrating event\n    const event = new ContextDehydratingEvent(dehydratedContext.context)\n    this.eventDispatcher.dispatch(event)\n\n    // Update the dehydrated context with any changes made by event listeners\n    dehydratedContext.context = event.getContext()\n\n    return dehydratedContext\n  }\n\n  /**\n   * Hydrate the context from a serialized object\n   * @param data The serialized context data\n   */\n  public hydrate(data: Record<string, any>): void {\n    try {\n      // Hydrate the context\n      if (data.context) {\n        this.context = { ...this.context, ...data.context }\n      }\n      if (data.counters) {\n        this.counters = { ...this.counters, ...data.counters }\n      }\n\n      // Dispatch a ContextHydrated event\n      const event = new ContextHydratedEvent(this.context, 'dehydrated')\n      this.eventDispatcher.dispatch(event)\n    } catch (error) {\n      console.error('Failed to hydrate context:', error)\n    }\n  }\n\n  /**\n   * Get all context data\n   */\n  public all(): LogContext {\n    return { ...this.context }\n  }\n\n  /**\n   * Clear all context data\n   */\n  public clear(): void {\n    this.context = {}\n    this.hiddenContext = {}\n    this.stacks = {}\n    this.counters = {}\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogListener } from '../types/log-listener.type'\nimport type { ILogEvent } from '../interfaces/events/log-event.interface'\nimport type { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\n\n/**\n * EventDispatcher is an implementation of the IEventDispatcher interface.\n * It provides methods for dispatching events and managing event listeners.\n */\n@injectable()\nexport class EventDispatcher implements IEventDispatcher {\n  private listeners: Record<string, LogListener[]> = {}\n\n  /**\n   * Dispatch an event\n   * @param event The event to dispatch\n   */\n  public dispatch(event: ILogEvent): void {\n    const eventName = event.getName()\n\n    // Get listeners for the event\n    const eventListeners = this.listeners[eventName] || []\n\n    // Call each listener with the event\n    for (const listener of eventListeners) {\n      try {\n        listener(event)\n      } catch (error) {\n        console.error(`Error in event listener for ${eventName}:`, error)\n      }\n    }\n  }\n\n  /**\n   * Add a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public addListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = []\n    }\n    this.listeners[eventName].push(listener)\n  }\n\n  /**\n   * Remove a listener for an event\n   * @param eventName The event name\n   * @param listener The event listener\n   */\n  public removeListener(eventName: string, listener: LogListener): void {\n    if (!this.listeners[eventName]) {\n      return\n    }\n    this.listeners[eventName] = this.listeners[eventName].filter((l) => l !== listener)\n  }\n\n  /**\n   * Get all listeners for an event\n   * @param eventName The event name\n   */\n  public getListeners(eventName: string): LogListener[] {\n    return this.listeners[eventName] || []\n  }\n\n  /**\n   * Check if an event has listeners\n   * @param eventName The event name\n   */\n  public hasListeners(eventName: string): boolean {\n    return !!this.listeners[eventName] && this.listeners[eventName].length > 0\n  }\n\n  /**\n   * Remove all listeners for an event\n   * @param eventName The event name\n   */\n  public clearListeners(eventName: string): void {\n    this.listeners[eventName] = []\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport type { IJsonFormatter } from '../interfaces/formatters/json-formatter.interface'\n\n/**\n * JsonFormatter is an implementation of the IJsonFormatter interface.\n * It formats log records as JSON.\n */\n@injectable()\nexport class JsonFormatter implements IJsonFormatter {\n  private name = FormatterType.JSON\n  private prettyPrint = false\n  private stackTraceFormatting = true\n\n  /**\n   * Create a new JsonFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { prettyPrint?: boolean; stackTraceFormatting?: boolean } = {}) {\n    if (options.prettyPrint !== undefined) {\n      this.prettyPrint = options.prettyPrint\n    }\n    if (options.stackTraceFormatting !== undefined) {\n      this.stackTraceFormatting = options.stackTraceFormatting\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const jsonRecord: Record<string, any> = {\n      level: record.level,\n      levelName: record.levelName,\n      message: record.message,\n      context: record.context,\n      datetime: record.datetime.toISOString(),\n    }\n\n    // Add stack trace if it exists and stack trace formatting is enabled\n    if (record.stack && this.stackTraceFormatting) {\n      jsonRecord.stack = record.stack\n    }\n\n    // Add extra fields if they exist\n    if (record.extra) {\n      jsonRecord.extra = record.extra\n    }\n\n    // Convert to JSON\n    return JSON.stringify(jsonRecord, null, this.prettyPrint ? 2 : 0)\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    const jsonRecords = records.map((record) => {\n      const jsonRecord: Record<string, any> = {\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: record.context,\n        datetime: record.datetime.toISOString(),\n      }\n\n      // Add stack trace if it exists and stack trace formatting is enabled\n      if (record.stack && this.stackTraceFormatting) {\n        jsonRecord.stack = record.stack\n      }\n\n      // Add extra fields if they exist\n      if (record.extra) {\n        jsonRecord.extra = record.extra\n      }\n\n      return jsonRecord\n    })\n\n    // Convert to JSON\n    return JSON.stringify(jsonRecords, null, this.prettyPrint ? 2 : 0)\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable pretty printing\n   * @param enabled Whether pretty printing is enabled\n   */\n  public setPrettyPrint(enabled: boolean): void {\n    this.prettyPrint = enabled\n  }\n\n  /**\n   * Get whether pretty printing is enabled\n   */\n  public isPrettyPrintEnabled(): boolean {\n    return this.prettyPrint\n  }\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  public setStackTraceFormatting(enabled: boolean): void {\n    this.stackTraceFormatting = enabled\n  }\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  public isStackTraceFormattingEnabled(): boolean {\n    return this.stackTraceFormatting\n  }\n}\n","import { DateFormat } from '../enums'\n\n/**\n * Get the date format string for a DateFormat enum value\n * @param format The DateFormat enum value\n * @param customFormat The custom format string (if format is DateFormat.CUSTOM)\n */\nexport function getDateFormatString(format: DateFormat, customFormat?: string): string {\n  switch (format) {\n    case DateFormat.ISO8601:\n      return 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n    case DateFormat.RFC3339:\n      return 'YYYY-MM-DDTHH:mm:ssZ'\n    case DateFormat.RFC2822:\n      return 'ddd, DD MMM YYYY HH:mm:ss ZZ'\n    case DateFormat.UNIX:\n      return 'X'\n    case DateFormat.YYYY_MM_DD:\n      return 'YYYY-MM-DD'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS:\n      return 'YYYY-MM-DD HH:mm:ss'\n    case DateFormat.DD_MM_YYYY:\n      return 'DD/MM/YYYY'\n    case DateFormat.MM_DD_YYYY:\n      return 'MM/DD/YYYY'\n    case DateFormat.HH_MM_SS:\n      return 'HH:mm:ss'\n    case DateFormat.YYYY_MM_DD_HH_MM_SS_MILLI:\n      return 'YYYY-MM-DD HH:mm:ss.SSS' // Handle milliseconds format here\n    case DateFormat.CUSTOM:\n      return customFormat || 'YYYY-MM-DD HH:mm:ss'\n    default:\n      return 'YYYY-MM-DD HH:mm:ss'\n  }\n}\n\n/**\n * Formats a given date into a string based on the provided format.\n *\n * @param {Date} date - The date to be formatted.\n * @param {DateFormat} format - The format to use for the date. It can be a predefined format from the DateFormat enum.\n * @param {string} [customFormat] - Optional custom format string. If not provided, the predefined format is used.\n * @returns {string} - A formatted string representing the date.\n *\n * @example\n * const formattedDate = formatDate(new Date(), DateFormat.FULL);\n * console.log(formattedDate); // Outputs the formatted date string in the specified format\n */\nexport function formatDate(date: Date, format: DateFormat, customFormat?: string): string {\n  // Determine the format string to be used based on the input format and optional custom format.\n  const formatString = getDateFormatString(format, customFormat)\n\n  // Extract individual date components (UTC-based) from the input date.\n  const year = date.getUTCFullYear()\n  const day = String(date.getUTCDate()).padStart(2, '0')\n  const hours = String(date.getUTCHours()).padStart(2, '0')\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0')\n  const minutes = String(date.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(date.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = String(date.getUTCMilliseconds()).padStart(3, '0')\n\n  // If the specified format is UNIX, return the timestamp in seconds.\n  if (format === DateFormat.UNIX) {\n    // Return the timestamp in seconds\n    return Math.floor(date.getTime() / 1000).toString()\n  }\n\n  // Replace placeholders in the format string with actual date components (e.g., 'YYYY', 'MM', etc.).\n  return formatString\n    .replace('YYYY', String(year)) // Replace 'YYYY' with the year\n    .replace('MM', month) // Replace 'MM' with the month (2 digits)\n    .replace('DD', day) // Replace 'DD' with the day (2 digits)\n    .replace('HH', hours) // Replace 'HH' with hours (2 digits)\n    .replace('mm', minutes) // Replace 'mm' with minutes (2 digits)\n    .replace('ss', seconds) // Replace 'ss' with seconds (2 digits)\n    .replace('SSS', milliseconds) // Replace 'SSS' with milliseconds (3 digits)\n}\n","import { LogLevel } from '../enums'\n\n/**\n * LogLevelColor maps LogLevel enum values to CSS color values for visual representation.\n */\nexport const LogLevelColor: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '#FF0000', // Red\n  [LogLevel.ALERT]: '#FF4500', // OrangeRed\n  [LogLevel.CRITICAL]: '#FF8C00', // DarkOrange\n  [LogLevel.ERROR]: '#FFA500', // Orange\n  [LogLevel.WARNING]: '#FFD700', // Gold\n  [LogLevel.NOTICE]: '#1E90FF', // DodgerBlue\n  [LogLevel.INFO]: '#32CD32', // LimeGreen\n  [LogLevel.DEBUG]: '#808080', // Gray\n}\n","import { LogLevel } from '../enums'\n\n/**\n * LogLevelEmoji maps LogLevel enum values to emojis for visual representation.\n */\nexport const LogLevelEmoji: Record<LogLevel, string> = {\n  [LogLevel.EMERGENCY]: '🚨',\n  [LogLevel.ALERT]: '🔔',\n  [LogLevel.CRITICAL]: '❗',\n  [LogLevel.ERROR]: '🔴',\n  [LogLevel.WARNING]: '⚠️',\n  [LogLevel.NOTICE]: '📝',\n  [LogLevel.INFO]: '✅',\n  [LogLevel.DEBUG]: '🛠️',\n}\n","import { LogLevel } from '../enums'\n\n/**\n * LogLevelValue maps LogLevel enum values to numeric values for comparison.\n * Higher values indicate more severe log levels.\n */\nexport const LogLevelValue: Record<LogLevel, number> = {\n  [LogLevel.EMERGENCY]: 800,\n  [LogLevel.ALERT]: 700,\n  [LogLevel.CRITICAL]: 600,\n  [LogLevel.ERROR]: 500,\n  [LogLevel.WARNING]: 400,\n  [LogLevel.NOTICE]: 300,\n  [LogLevel.INFO]: 200,\n  [LogLevel.DEBUG]: 100,\n}\n","import { injectable } from 'inversify'\n\nimport { formatDate } from '../utils/date'\nimport { DateFormat } from '../enums/date-format.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport { LogLevelEmoji, LogLevelColor } from '../constants'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport type { ILineFormatter } from '../interfaces/formatters/line-formatter.interface'\n\n/**\n * LineFormatter is an implementation of the ILineFormatter interface.\n * It formats log records as lines of text.\n */\n@injectable()\nexport class LineFormatter implements ILineFormatter {\n  private name = FormatterType.LINE\n  private dateFormat = DateFormat.YYYY_MM_DD_HH_MM_SS\n  private customDateFormat?: string\n  private emojiSupport = true\n  private colorSupport = true\n  private stackTraceFormatting = true\n\n  /**\n   * Create a new LineFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(\n    options: {\n      dateFormat?: DateFormat\n      customDateFormat?: string\n      emojiSupport?: boolean\n      colorSupport?: boolean\n      stackTraceFormatting?: boolean\n    } = {},\n  ) {\n    if (options.dateFormat !== undefined) {\n      this.dateFormat = options.dateFormat\n    }\n    if (options.customDateFormat !== undefined) {\n      this.customDateFormat = options.customDateFormat\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n    if (options.stackTraceFormatting !== undefined) {\n      this.stackTraceFormatting = options.stackTraceFormatting\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const level = record.level\n    const levelName = record.levelName\n    const message = record.message\n    const context = record.context\n    const datetime = this.formatDate(record.datetime)\n    const stack = record.stack\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      if (level in LogLevelEmoji) {\n        formattedMessage = `${\n          LogLevelEmoji[level as keyof typeof LogLevelEmoji]\n        } ${formattedMessage}`\n      }\n    }\n\n    // Format the line\n    let line = `[${datetime}] [${levelName}] ${formattedMessage}`\n\n    // Add context if it's not empty\n    if (Object.keys(context).length > 0) {\n      line += ` ${JSON.stringify(context)}`\n    }\n\n    // Add stack trace if it exists and stack trace formatting is enabled\n    if (stack && this.stackTraceFormatting) {\n      line += `\\n${stack}`\n    }\n\n    // Add color if enabled\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      line = `%c${line}`\n      // Note: In a browser environment, this would be used with console.log\n      // console.log(line, `color: ${color}`)\n    }\n\n    return line\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    return records.map((record) => this.format(record)).join('\\n')\n  }\n\n  /**\n   * Format a date according to the date format\n   * @param date The date to format\n   */\n  private formatDate(date: Date): string {\n    return formatDate(date, this.dateFormat, this.customDateFormat)\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the date format\n   */\n  public getDateFormat(): string {\n    return this.dateFormat === DateFormat.CUSTOM && this.customDateFormat\n      ? this.customDateFormat\n      : this.dateFormat\n  }\n\n  /**\n   * Set the date format\n   * @param format The date format\n   */\n  public setDateFormat(format: DateFormat | string): void {\n    if (typeof format === 'string') {\n      this.dateFormat = DateFormat.CUSTOM\n      this.customDateFormat = format\n    } else {\n      this.dateFormat = format\n      this.customDateFormat = undefined\n    }\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n\n  /**\n   * Enable or disable stack trace formatting\n   * @param enabled Whether stack trace formatting is enabled\n   */\n  public setStackTraceFormatting(enabled: boolean): void {\n    this.stackTraceFormatting = enabled\n  }\n\n  /**\n   * Get whether stack trace formatting is enabled\n   */\n  public isStackTraceFormattingEnabled(): boolean {\n    return this.stackTraceFormatting\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport { LogLevelColor, LogLevelEmoji } from '../constants'\nimport { FormatterType } from '../enums/formatter-type.enum'\nimport type { ISimpleFormatter } from '../interfaces/formatters/simple-formatter.interface'\n\n/**\n * SimpleFormatter is an implementation of the ISimpleFormatter interface.\n * It formats log records in a simple format.\n */\n@injectable()\nexport class SimpleFormatter implements ISimpleFormatter {\n  private name = FormatterType.SIMPLE\n  private emojiSupport = true\n  private colorSupport = true\n\n  /**\n   * Create a new SimpleFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { emojiSupport?: boolean; colorSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Format a log record\n   * @param record The log record to format\n   */\n  public format(record: LogRecord): string {\n    const level = record.level\n    const message = record.message\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Format the line\n    let line = `[${record.levelName}] ${formattedMessage}`\n\n    // Add color if enabled\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      line = `%c${line}`\n      // Note: In a browser environment, this would be used with console.log\n      console.log(line, `color: ${color}`)\n    }\n\n    return line\n  }\n\n  /**\n   * Format a batch of log records\n   * @param records The log records to format\n   */\n  public formatBatch(records: LogRecord[]): string {\n    return records.map((record) => this.format(record)).join('\\n')\n  }\n\n  /**\n   * Get the formatter name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevel } from '../enums'\nimport { HandlerType } from '../enums/handler-type.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport { LogLevelColor, LogLevelEmoji } from '../constants'\nimport type { IConsoleHandler } from '../interfaces/handlers/console-handler.interface'\n\n/**\n * ConsoleHandler is an implementation of the IConsoleHandler interface.\n * It handles log records by outputting them to the browser console.\n */\n@injectable()\nexport class ConsoleHandler implements IConsoleHandler {\n  private name = HandlerType.CONSOLE\n  private next: IConsoleHandler | null = null\n  private emojiSupport = true\n  private colorSupport = true\n\n  /**\n   * Create a new ConsoleHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean; colorSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level as LogLevel\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji and color\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Log to the console with the appropriate method\n    if (this.colorSupport && LogLevelColor[level as keyof typeof LogLevelColor]) {\n      const color = LogLevelColor[level as keyof typeof LogLevelColor]\n      console.log(\n        `%c${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`,\n        `color: ${color}`,\n      )\n    } else {\n      console.log(`${datetime.toISOString()} [${level.toUpperCase()}] ${formattedMessage}`)\n    }\n\n    // Log the context if it's not empty\n    if (Object.keys(context).length > 0) {\n      console.log('Context:', context)\n    }\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.log('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IConsoleHandler): IConsoleHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IConsoleHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IErrorLogHandler } from '../interfaces/handlers/error-log-handler.interface'\n\n/**\n * ErrorLogHandler is an implementation of the IErrorLogHandler interface.\n * It handles log records by outputting them to the browser's error log.\n */\n@injectable()\nexport class ErrorLogHandler implements IErrorLogHandler {\n  private name = 'errorLog'\n  private next: IErrorLogHandler | null = null\n  private emojiSupport = true\n\n  /**\n   * Create a new ErrorLogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { emojiSupport?: boolean } = {}) {\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    const level = record.level\n    const message = record.message\n    const context = record.context\n    const datetime = record.datetime\n    const stack = record.stack\n\n    // Format the message with emoji if enabled\n    let formattedMessage = message\n    if (this.emojiSupport && LogLevelEmoji[level as keyof typeof LogLevelEmoji]) {\n      formattedMessage = `${LogLevelEmoji[level as keyof typeof LogLevelEmoji]} ${formattedMessage}`\n    }\n\n    // Format the error message\n    let errorMessage = `[${datetime.toISOString()}] [${record.levelName}] ${formattedMessage}`\n\n    // Add context if it's not empty\n    if (Object.keys(context).length > 0) {\n      errorMessage += ` ${JSON.stringify(context)}`\n    }\n\n    // Log to the console.error\n    console.error(errorMessage)\n\n    // Log the stack trace if it exists\n    if (stack) {\n      console.error('Stack trace:', stack)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IErrorLogHandler): IErrorLogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IErrorLogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelValue } from '../constants'\nimport type { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ILogHandler } from '../interfaces/handlers/log-handler.interface'\nimport type { IFingersCrossedHandler } from '../interfaces/handlers/fingers-crossed-handler.interface'\n\n/**\n * FingersCrossedHandler is an implementation of the IFingersCrossedHandler interface.\n * It buffers log records until a certain action level is reached, then passes all buffered records to the next handler.\n */\n@injectable()\nexport class FingersCrossedHandler implements IFingersCrossedHandler {\n  private name = 'fingersCrossed'\n  private next: ILogHandler | null = null\n  private actionLevel: LogLevel\n  private bufferSize: number\n  private buffer: LogRecord[] = []\n  private activated = false\n  private handler: ILogHandler\n\n  /**\n   * Create a new FingersCrossedHandler instance\n   * @param handler The handler to use when activated\n   * @param options Options for the handler\n   */\n  constructor(handler: ILogHandler, options: { actionLevel?: LogLevel; bufferSize?: number } = {}) {\n    this.handler = handler\n    this.actionLevel = options.actionLevel || ('warning' as LogLevel)\n    this.bufferSize = options.bufferSize || 0 // 0 means unlimited\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Check if the handler is already activated\n    if (this.activated) {\n      // Pass the record directly to the handler\n      this.handler.handle(record)\n    } else {\n      // Check if the record's level is at or above the action level\n      if (this.isActionLevel(record.level as LogLevel)) {\n        // Activate the handler\n        this.activated = true\n\n        // Pass all buffered records to the handler\n        for (const bufferedRecord of this.buffer) {\n          this.handler.handle(bufferedRecord)\n        }\n\n        // Clear the buffer\n        this.buffer = []\n\n        // Pass the current record to the handler\n        this.handler.handle(record)\n      } else {\n        // Buffer the record\n        this.buffer.push(record)\n\n        // Trim the buffer if necessary\n        if (this.bufferSize > 0 && this.buffer.length > this.bufferSize) {\n          this.buffer.shift()\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if a log level is at or above the action level\n   * @param level The log level to check\n   */\n  private isActionLevel(level: LogLevel): boolean {\n    return LogLevelValue[level] >= LogLevelValue[this.actionLevel]\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILogHandler): ILogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the action level\n   */\n  public getActionLevel(): LogLevel {\n    return this.actionLevel\n  }\n\n  /**\n   * Set the action level\n   * @param level The action level\n   */\n  public setActionLevel(level: LogLevel): void {\n    this.actionLevel = level\n  }\n\n  /**\n   * Get the buffer size\n   */\n  public getBufferSize(): number {\n    return this.bufferSize\n  }\n\n  /**\n   * Set the buffer size\n   * @param size The buffer size\n   */\n  public setBufferSize(size: number): void {\n    this.bufferSize = size\n  }\n\n  /**\n   * Get whether the handler is activated\n   */\n  public isActivated(): boolean {\n    return this.activated\n  }\n\n  /**\n   * Reset the handler\n   */\n  public reset(): void {\n    this.activated = false\n    this.buffer = []\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IHttpHandler } from '../interfaces/handlers/http-handler.interface'\n\n/**\n * HttpHandler is an implementation of the IHttpHandler interface.\n * It handles log records by sending them to a remote server via HTTP.\n */\n@injectable()\nexport class HttpHandler implements IHttpHandler {\n  private name = 'http'\n  private next: IHttpHandler | null = null\n  private url = ''\n  private method = 'POST'\n  private headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  }\n  private maxRetries = 3\n\n  /**\n   * Create a new HttpHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      method?: string\n      headers?: Record<string, string>\n      maxRetries?: number\n    } = {},\n  ) {\n    if (options.url) {\n      this.url = options.url\n    }\n    if (options.method) {\n      this.method = options.method\n    }\n    if (options.headers) {\n      this.headers = { ...this.headers, ...options.headers }\n    }\n    if (options.maxRetries !== undefined) {\n      this.maxRetries = options.maxRetries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.url) {\n      console.error('HTTP handler URL not configured')\n      return\n    }\n\n    const payload = {\n      level: record.level,\n      levelName: record.levelName,\n      message: record.message,\n      context: record.context,\n      datetime: record.datetime.toISOString(),\n      stack: record.stack,\n    }\n\n    let retries = 0\n    let success = false\n\n    while (!success && retries <= this.maxRetries) {\n      try {\n        const response = await fetch(this.url, {\n          method: this.method,\n          headers: this.headers,\n          body: JSON.stringify(payload),\n        })\n\n        if (response.ok) {\n          success = true\n        } else {\n          retries++\n          if (retries <= this.maxRetries) {\n            // Wait before retrying (exponential backoff)\n            await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n          }\n        }\n      } catch (error) {\n        retries++\n        if (retries <= this.maxRetries) {\n          // Wait before retrying (exponential backoff)\n          await new Promise((resolve) => setTimeout(resolve, 1000 * Math.pow(2, retries - 1)))\n        } else {\n          console.error('Failed to send log to HTTP endpoint:', error)\n        }\n      }\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return !!this.url && typeof fetch !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IHttpHandler): IHttpHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IHttpHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Set the name of the handler\n   * @param name The name to set\n   */\n  public setName(name: string): void {\n    this.name = name\n  }\n\n  /**\n   * Get the URL to send log records to\n   */\n  public getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Set the URL to send log records to\n   * @param url The URL\n   */\n  public setUrl(url: string): void {\n    this.url = url\n  }\n\n  /**\n   * Get the HTTP method to use\n   */\n  public getMethod(): string {\n    return this.method\n  }\n\n  /**\n   * Set the HTTP method to use\n   * @param method The HTTP method\n   */\n  public setMethod(method: string): void {\n    this.method = method\n  }\n\n  /**\n   * Get the HTTP headers to include in requests\n   */\n  public getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Set the HTTP headers to include in requests\n   * @param headers The HTTP headers\n   */\n  public setHeaders(headers: Record<string, string>): void {\n    this.headers = headers\n  }\n\n  /**\n   * Get the maximum number of retry attempts\n   */\n  public getMaxRetries(): number {\n    return this.maxRetries\n  }\n\n  /**\n   * Set the maximum number of retry attempts\n   * @param maxRetries The maximum number of retry attempts\n   */\n  public setMaxRetries(maxRetries: number): void {\n    this.maxRetries = maxRetries\n  }\n}\n","import Dexie from 'dexie'\nimport { injectable, postConstruct } from 'inversify'\n\nimport { HandlerType } from '../enums/handler-type.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { IIndexedDBHandler } from '../interfaces/handlers/indexed-db-handler.interface'\n\n/**\n * IndexedDBHandler is an implementation of the IIndexedDBHandler interface.\n * It handles log records by storing them in the browser's IndexedDB.\n */\n@injectable()\nexport class IndexedDBHandler implements IIndexedDBHandler {\n  private name = HandlerType.INDEXED_DB\n  private next: IIndexedDBHandler | null = null\n  private databaseName = 'ts-log'\n  private tableName = 'logs'\n  private maxEntries = 1000\n  private db: Dexie | null = null\n\n  /**\n   * Create a new IndexedDBHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { databaseName?: string; tableName?: string; maxEntries?: number } = {}) {\n    if (options.databaseName) {\n      this.databaseName = options.databaseName\n    }\n    if (options.tableName) {\n      this.tableName = options.tableName\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Initialize the database\n   * This method is called automatically after the constructor\n   */\n  @postConstruct()\n  private initDatabase(): void {\n    if (typeof window === 'undefined' || !window.indexedDB) {\n      return\n    }\n\n    try {\n      this.db = new Dexie(this.databaseName)\n      this.db.version(1).stores({\n        [this.tableName]: '++id,level,datetime',\n      })\n    } catch (error) {\n      console.error('Failed to initialize IndexedDB:', error)\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.db) {\n      console.error('IndexedDB not initialized')\n      return\n    }\n\n    try {\n      // Add the log record to the database\n      await this.db.table(this.tableName).add({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: JSON.stringify(record.context),\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim old entries if necessary\n      const count = await this.db.table(this.tableName).count()\n      if (count > this.maxEntries) {\n        const entriesToDelete = count - this.maxEntries\n        const oldestEntries = await this.db\n          .table(this.tableName)\n          .orderBy('datetime')\n          .limit(entriesToDelete)\n          .toArray()\n        const oldestIds = oldestEntries.map((entry) => entry.id)\n        await this.db.table(this.tableName).bulkDelete(oldestIds)\n      }\n    } catch (error) {\n      console.error('Failed to store log in IndexedDB:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof window !== 'undefined' && !!window.indexedDB && !!this.db\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: IIndexedDBHandler): IIndexedDBHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): IIndexedDBHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the database name\n   */\n  public getDatabaseName(): string {\n    return this.databaseName\n  }\n\n  /**\n   * Set the database name\n   * @param name The database name\n   */\n  public setDatabaseName(name: string): void {\n    this.databaseName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the table name\n   */\n  public getTableName(): string {\n    return this.tableName\n  }\n\n  /**\n   * Set the table name\n   * @param name The table name\n   */\n  public setTableName(name: string): void {\n    this.tableName = name\n    this.initDatabase()\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public async getEntries(): Promise<any[]> {\n    if (!this.db) {\n      return []\n    }\n\n    try {\n      const entries = await this.db.table(this.tableName).toArray()\n      return entries.map((entry) => ({\n        ...entry,\n        context: JSON.parse(entry.context),\n      }))\n    } catch (error) {\n      console.error('Failed to retrieve logs from IndexedDB:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public async clearEntries(): Promise<void> {\n    if (!this.db) {\n      return\n    }\n\n    try {\n      await this.db.table(this.tableName).clear()\n    } catch (error) {\n      console.error('Failed to clear logs from IndexedDB:', error)\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ILocalStorageHandler } from '../interfaces/handlers/local-storage-handler.interface'\n\n/**\n * LocalStorageHandler is an implementation of the ILocalStorageHandler interface.\n * It handles log records by storing them in the browser's localStorage.\n */\n@injectable()\nexport class LocalStorageHandler implements ILocalStorageHandler {\n  private name = 'localStorage'\n  private next: ILocalStorageHandler | null = null\n  private key = 'ts-log'\n  private maxEntries = 100\n\n  /**\n   * Create a new LocalStorageHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { key?: string; maxEntries?: number } = {}) {\n    if (options.key) {\n      this.key = options.key\n    }\n    if (options.maxEntries) {\n      this.maxEntries = options.maxEntries\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    try {\n      // Get existing entries\n      const entries = this.getEntries()\n\n      // Add the new entry\n      entries.push({\n        level: record.level,\n        levelName: record.levelName,\n        message: record.message,\n        context: record.context,\n        datetime: record.datetime.toISOString(),\n        stack: record.stack,\n      })\n\n      // Trim entries if necessary\n      if (entries.length > this.maxEntries) {\n        entries.splice(0, entries.length - this.maxEntries)\n      }\n\n      // Save entries\n      localStorage.setItem(this.key, JSON.stringify(entries))\n    } catch (error) {\n      console.error('Failed to store log in localStorage:', error)\n    }\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return typeof localStorage !== 'undefined'\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ILocalStorageHandler): ILocalStorageHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ILocalStorageHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the localStorage key used to store logs\n   */\n  public getKey(): string {\n    return this.key\n  }\n\n  /**\n   * Set the localStorage key used to store logs\n   * @param key The localStorage key\n   */\n  public setKey(key: string): void {\n    this.key = key\n  }\n\n  /**\n   * Get the maximum number of log entries to store\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries\n  }\n\n  /**\n   * Set the maximum number of log entries to store\n   * @param maxEntries The maximum number of log entries\n   */\n  public setMaxEntries(maxEntries: number): void {\n    this.maxEntries = maxEntries\n  }\n\n  /**\n   * Get all stored log entries\n   */\n  public getEntries(): any[] {\n    try {\n      const entriesJson = localStorage.getItem(this.key)\n      return entriesJson ? JSON.parse(entriesJson) : []\n    } catch (error) {\n      console.error('Failed to retrieve logs from localStorage:', error)\n      return []\n    }\n  }\n\n  /**\n   * Clear all stored log entries\n   */\n  public clearEntries(): void {\n    try {\n      localStorage.removeItem(this.key)\n    } catch (error) {\n      console.error('Failed to clear logs from localStorage:', error)\n    }\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevelEmoji } from '../constants'\nimport { HttpHandler } from './http-handler'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISlackWebhookHandler } from '../interfaces/handlers/slack-webhook-handler.interface'\n\n/**\n * SlackWebhookHandler is an implementation of the ISlackWebhookHandler interface.\n * It handles log records by sending them to a Slack webhook.\n */\n@injectable()\nexport class SlackWebhookHandler extends HttpHandler implements ISlackWebhookHandler {\n  private channel = '#logs'\n  private username = 'ts-log'\n  private iconEmoji = ':memo:'\n  private emojiSupport = true\n\n  /**\n   * Create a new SlackWebhookHandler instance\n   * @param options Options for the handler\n   */\n  constructor(\n    options: {\n      url?: string\n      channel?: string\n      username?: string\n      iconEmoji?: string\n      emojiSupport?: boolean\n      maxRetries?: number\n    } = {},\n  ) {\n    super({\n      url: options.url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      maxRetries: options.maxRetries,\n    })\n\n    if (options.channel) {\n      this.channel = options.channel\n    }\n    if (options.username) {\n      this.username = options.username\n    }\n    if (options.iconEmoji) {\n      this.iconEmoji = options.iconEmoji\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n\n    this.setName('slack')\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public async handle(record: LogRecord): Promise<void> {\n    if (!this.getUrl()) {\n      console.error('Slack webhook URL not configured')\n      return\n    }\n\n    // Format the message with emoji if enabled\n    let message = record.message\n    if (this.emojiSupport && LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]) {\n      message = `${LogLevelEmoji[record.level as keyof typeof LogLevelEmoji]} ${message}`\n    }\n\n    // Create the Slack payload\n    const payload = {\n      channel: this.channel,\n      username: this.username,\n      icon_emoji: this.iconEmoji,\n      text: `[${record.levelName}] ${message}`,\n      attachments: [\n        {\n          color: this.getColorForLevel(record.level),\n          fields: [\n            {\n              title: 'Time',\n              value: record.datetime.toISOString(),\n              short: true,\n            },\n            {\n              title: 'Level',\n              value: record.levelName,\n              short: true,\n            },\n          ],\n          fallback: `[${record.levelName}] ${message}`,\n        },\n      ],\n    }\n\n    // Add context as fields if it's not empty\n    if (Object.keys(record.context).length > 0) {\n      for (const [key, value] of Object.entries(record.context)) {\n        payload.attachments[0].fields.push({\n          title: key,\n          value: JSON.stringify(value),\n          short: false,\n        })\n      }\n    }\n\n    // Add stack trace if it exists\n    if (record.stack) {\n      payload.attachments[0].fields.push({\n        title: 'Stack Trace',\n        value: `\\`\\`\\`${record.stack}\\`\\`\\``,\n        short: false,\n      })\n    }\n\n    // Override the HTTP handler's payload\n    const originalHeaders = this.getHeaders()\n    this.setHeaders({\n      ...originalHeaders,\n      'Content-Type': 'application/json',\n    })\n\n    // Use the HTTP handler to send the request\n    await super.handle({\n      ...record,\n      message: JSON.stringify(payload),\n    })\n  }\n\n  /**\n   * Get the color for a log level\n   * @param level The log level\n   */\n  private getColorForLevel(level: string): string {\n    switch (level) {\n      case 'emergency':\n      case 'alert':\n      case 'critical':\n      case 'error':\n        return 'danger'\n      case 'warning':\n        return 'warning'\n      case 'notice':\n      case 'info':\n        return 'good'\n      case 'debug':\n      default:\n        return '#CCCCCC'\n    }\n  }\n\n  /**\n   * Get the Slack channel to send log records to\n   */\n  public getChannel(): string {\n    return this.channel\n  }\n\n  /**\n   * Set the Slack channel to send log records to\n   * @param channel The Slack channel\n   */\n  public setChannel(channel: string): void {\n    this.channel = channel\n  }\n\n  /**\n   * Get the username to use when sending log records\n   */\n  public getUsername(): string {\n    return this.username\n  }\n\n  /**\n   * Set the username to use when sending log records\n   * @param username The username\n   */\n  public setUsername(username: string): void {\n    this.username = username\n  }\n\n  /**\n   * Get the emoji to use as the icon when sending log records\n   */\n  public getIconEmoji(): string {\n    return this.iconEmoji\n  }\n\n  /**\n   * Set the emoji to use as the icon when sending log records\n   * @param emoji The emoji\n   */\n  public setIconEmoji(emoji: string): void {\n    this.iconEmoji = emoji\n  }\n\n  /**\n   * Enable or disable emoji support in log messages\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled in log messages\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n","import { injectable } from 'inversify'\n\nimport { LogLevel } from '../enums/log-level.enum'\nimport type { LogRecord } from '../types/log-record.type'\nimport type { ISyslogHandler } from '../interfaces/handlers/syslog-handler.interface'\n\n/**\n * SyslogHandler is an implementation of the ISyslogHandler interface.\n * It handles log records in syslog format (browser-compatible).\n */\n@injectable()\nexport class SyslogHandler implements ISyslogHandler {\n  private name = 'syslog'\n  private next: ISyslogHandler | null = null\n  private facility = 16 // local0\n  private appName = 'ts-log'\n  private procId = 'browser'\n\n  /**\n   * Create a new SyslogHandler instance\n   * @param options Options for the handler\n   */\n  constructor(options: { facility?: number; appName?: string; procId?: string } = {}) {\n    if (options.facility !== undefined) {\n      this.facility = options.facility\n    }\n    if (options.appName) {\n      this.appName = options.appName\n    }\n    if (options.procId) {\n      this.procId = options.procId\n    }\n  }\n\n  /**\n   * Handle a log record\n   * @param record The log record to handle\n   */\n  public handle(record: LogRecord): void {\n    // Create a syslog message\n    const syslogMessage = this.formatSyslogMessage(record)\n\n    // In a browser environment, we can't send to a syslog server directly\n    // So we'll log to the console instead\n    console.log(syslogMessage)\n\n    // Pass the record to the next handler in the chain\n    if (this.next) {\n      this.next.handle(record)\n    }\n  }\n\n  /**\n   * Format a log record as a syslog message\n   * @param record The log record to format\n   */\n  private formatSyslogMessage(record: LogRecord): string {\n    // Get the syslog priority\n    const priority = this.calculatePriority(record.level as LogLevel)\n\n    // Format the timestamp (RFC3339 format)\n    const timestamp = record.datetime.toISOString()\n\n    // Format the message\n    const message = record.message\n\n    // Format the structured data\n    const structuredData = this.formatStructuredData(record)\n\n    // Format the syslog message\n    // <priority>version timestamp hostname app-name procid msgid structured-data message\n    return `<${priority}>1 ${timestamp} ${window.location.hostname} ${this.appName} ${this.procId} - ${structuredData} ${message}`\n  }\n\n  /**\n   * Calculate the syslog priority\n   * @param level The log level\n   */\n  private calculatePriority(level: LogLevel): number {\n    // Map log levels to syslog severity levels\n    let severity: number\n    switch (level) {\n      case LogLevel.EMERGENCY:\n        severity = 0 // Emergency: system is unusable\n        break\n      case LogLevel.ALERT:\n        severity = 1 // Alert: action must be taken immediately\n        break\n      case LogLevel.CRITICAL:\n        severity = 2 // Critical: critical conditions\n        break\n      case LogLevel.ERROR:\n        severity = 3 // Error: error conditions\n        break\n      case LogLevel.WARNING:\n        severity = 4 // Warning: warning conditions\n        break\n      case LogLevel.NOTICE:\n        severity = 5 // Notice: normal but significant condition\n        break\n      case LogLevel.INFO:\n        severity = 6 // Informational: informational messages\n        break\n      case LogLevel.DEBUG:\n        severity = 7 // Debug: debug-level messages\n        break\n      default:\n        severity = 7 // Default to debug\n    }\n\n    // Calculate the priority (facility * 8 + severity)\n    return this.facility * 8 + severity\n  }\n\n  /**\n   * Format the structured data\n   * @param record The log record\n   */\n  private formatStructuredData(record: LogRecord): string {\n    if (!record.context || Object.keys(record.context).length === 0) {\n      return '-'\n    }\n\n    // Format the context as structured data\n    let structuredData = `[ts-log@0 `\n    for (const [key, value] of Object.entries(record.context)) {\n      const escapedValue = String(value).replace(/[\\\\\"]/g, '\\\\$&')\n      structuredData += `${key}=\"${escapedValue}\" `\n    }\n    structuredData = structuredData.trim() + ']'\n\n    return structuredData\n  }\n\n  /**\n   * Check if the handler can handle the log record\n   * @param record The log record to check\n   */\n  public isHandling(record: LogRecord): boolean {\n    return true\n  }\n\n  /**\n   * Set the next handler in the chain\n   * @param handler The next handler\n   */\n  public setNext(handler: ISyslogHandler): ISyslogHandler {\n    this.next = handler\n    return handler\n  }\n\n  /**\n   * Get the next handler in the chain\n   */\n  public getNext(): ISyslogHandler | null {\n    return this.next\n  }\n\n  /**\n   * Get the handler name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Get the facility code\n   */\n  public getFacility(): number {\n    return this.facility\n  }\n\n  /**\n   * Set the facility code\n   * @param facility The facility code\n   */\n  public setFacility(facility: number): void {\n    this.facility = facility\n  }\n\n  /**\n   * Get the application name\n   */\n  public getAppName(): string {\n    return this.appName\n  }\n\n  /**\n   * Set the application name\n   * @param appName The application name\n   */\n  public setAppName(appName: string): void {\n    this.appName = appName\n  }\n\n  /**\n   * Get the process ID\n   */\n  public getProcId(): string {\n    return this.procId\n  }\n\n  /**\n   * Set the process ID\n   * @param procId The process ID\n   */\n  public setProcId(procId: string): void {\n    this.procId = procId\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogContext, LogRecord } from '../types'\nimport { ProcessorType } from '../enums/processor-type.enum'\nimport type { IContextLogProcessor } from '../interfaces/processors/context-log-processor.interface'\n\n/**\n * ContextLogProcessor is an implementation of the IContextLogProcessor interface.\n * It adds contextual data to log records.\n */\n@injectable()\nexport class ContextLogProcessor implements IContextLogProcessor {\n  private name = ProcessorType.CONTEXT\n  private context: LogContext = {}\n\n  /**\n   * Create a new ContextLogProcessor instance\n   * @param context Initial context\n   */\n  constructor(context: LogContext = {}) {\n    this.context = context\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public process(record: LogRecord): LogRecord {\n    // Merge the processor's context with the record's context\n    const mergedContext = { ...this.context, ...record.context }\n\n    // Return the updated record\n    return {\n      ...record,\n      context: mergedContext,\n    }\n  }\n\n  /**\n   * Add contextual data to all subsequent log records\n   * @param context The contextual data to add\n   */\n  public addContext(context: LogContext): void {\n    this.context = { ...this.context, ...context }\n  }\n\n  /**\n   * Remove contextual data from all subsequent log records\n   * @param keys The keys to remove from the context\n   */\n  public removeContext(keys: string[]): void {\n    const newContext: LogContext = { ...this.context }\n    for (const key of keys) {\n      delete newContext[key]\n    }\n    this.context = newContext\n  }\n\n  /**\n   * Get the current context\n   */\n  public getContext(): LogContext {\n    return this.context\n  }\n\n  /**\n   * Clear the current context\n   */\n  public clearContext(): void {\n    this.context = {}\n  }\n\n  /**\n   * Get the processor name\n   */\n  public getName(): string {\n    return this.name\n  }\n}\n","import { injectable } from 'inversify'\n\nimport type { LogRecord } from '../types/log-record.type'\nimport { ProcessorType } from '../enums/processor-type.enum'\nimport type { IMessagePlaceholderProcessor } from '../interfaces/processors/message-placeholder-processor.interface'\n\n/**\n * MessagePlaceholderProcessor is an implementation of the IMessagePlaceholderProcessor interface.\n * It replaces placeholders in log messages with context values.\n */\n@injectable()\nexport class MessagePlaceholderProcessor implements IMessagePlaceholderProcessor {\n  private name = ProcessorType.MESSAGE_PLACEHOLDER\n  private placeholderFormat = '{key}'\n  private emojiSupport = true\n\n  /**\n   * Create a new MessagePlaceholderProcessor instance\n   * @param options Options for the processor\n   */\n  constructor(options: { placeholderFormat?: string; emojiSupport?: boolean } = {}) {\n    if (options.placeholderFormat) {\n      this.placeholderFormat = options.placeholderFormat\n    }\n    if (options.emojiSupport !== undefined) {\n      this.emojiSupport = options.emojiSupport\n    }\n  }\n\n  /**\n   * Process a log record\n   * @param record The log record to process\n   */\n  public process(record: LogRecord): LogRecord {\n    // Replace placeholders in the message\n    const message = this.replacePlaceholders(record.message, record.context)\n\n    // Return the updated record\n    return {\n      ...record,\n      message,\n    }\n  }\n\n  /**\n   * Replace placeholders in a message with corresponding context values.\n   * The placeholder format is dynamically determined (e.g., '{key}', '%key%', '{{var}}', etc.).\n   *\n   * @param message - The input message string that may contain placeholders.\n   * @param context - A dictionary of keys and values used to replace placeholders.\n   * @returns The message with placeholders replaced by context values.\n   */\n  private replacePlaceholders(message: string, context: Record<string, any>): string {\n    // If the message is empty or there is no context to apply, return the message as is\n    if (!message || !context || Object.keys(context).length === 0) {\n      return message\n    }\n\n    // Retrieve the placeholder format pattern (e.g., '{key}', '{{var}}', '%key%')\n    const pattern = this.getPlaceholderPattern()\n\n    /**\n     * Match and extract the parts of the pattern:\n     * - group 1: prefix (before 'key' or 'var')\n     * - group 2: the token placeholder ('key' or 'var')\n     * - group 3: suffix (after 'key' or 'var')\n     */\n    const match = pattern.match(/^(.*)(key|var)(.*)$/)\n\n    // If pattern does not include 'key' or 'var', we can't process it\n    if (!match) return message\n\n    // Destructure the match groups: prefix and suffix around the token name\n    const [, prefix, , suffix] = match\n\n    /**\n     * Build a dynamic RegExp using the detected prefix and suffix\n     * Example: if prefix='{', suffix='}', it becomes /\\{(\\w+)\\}/g\n     * The (\\w+) group captures the placeholder token (e.g., \"user\" in \"{user}\")\n     */\n    const regex = new RegExp(this.escapeRegExp(prefix) + '(\\\\w+)' + this.escapeRegExp(suffix), 'g')\n\n    // Replace each matched placeholder in the message\n    return message.replace(regex, (_fullMatch, token) => {\n      // Look up the token in the context\n      const value = context[token]\n\n      // If the token isn't found or is null/undefined, replace with an empty string\n      if (value === undefined || value === null) return ''\n\n      // If value is an object (e.g., array, plain object), convert it to a JSON string\n      if (typeof value === 'object') return this.convertToString(value)\n\n      // If emoji support is enabled and value is a string emoji, use it as-is\n      if (this.emojiSupport && typeof value === 'string' && this.isEmoji(value)) {\n        return value\n      }\n\n      // Otherwise, return the value converted to a string\n      return String(value)\n    })\n  }\n\n  /**\n   * Get the placeholder pattern\n   */\n  private getPlaceholderPattern(): string {\n    return this.placeholderFormat\n  }\n\n  /**\n   * Escape special characters in a string for use in a regular expression\n   * @param string The string to escape\n   */\n  private escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n  }\n\n  /**\n   * Convert a value to a string\n   * @param value The value to convert\n   */\n  private convertToString(value: any): string {\n    if (value === null || value === undefined) {\n      return ''\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value)\n    }\n    return String(value)\n  }\n\n  /**\n   * Check if a string is an emoji\n   * @param string The string to check\n   */\n  private isEmoji(string: string): boolean {\n    // Simple check for emoji (Unicode emoji range)\n    const emojiRegex = /[\\u{1F300}-\\u{1F6FF}\\u{1F900}-\\u{1F9FF}\\u{2600}-\\u{26FF}\\u{2700}-\\u{27BF}]/u\n    return emojiRegex.test(string)\n  }\n\n  /**\n   * Get the processor name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Set the placeholder format\n   * @param format The placeholder format (e.g., '{key}')\n   */\n  public setPlaceholderFormat(format: string): void {\n    this.placeholderFormat = format\n  }\n\n  /**\n   * Get the placeholder format\n   */\n  public getPlaceholderFormat(): string {\n    return this.placeholderFormat\n  }\n\n  /**\n   * Enable or disable emoji support\n   * @param enabled Whether emoji support is enabled\n   */\n  public setEmojiSupport(enabled: boolean): void {\n    this.emojiSupport = enabled\n  }\n\n  /**\n   * Get whether emoji support is enabled\n   */\n  public isEmojiSupportEnabled(): boolean {\n    return this.emojiSupport\n  }\n}\n","import { injectable } from 'inversify'\nimport StackTrace from 'stacktrace-js'\n\nimport type { IExceptionFormatter } from '../interfaces/utils/exception-formatter.interface'\n\n/**\n * ExceptionFormatter is an implementation of the IExceptionFormatter interface.\n * It provides methods for formatting exceptions.\n */\n@injectable()\nexport class ExceptionFormatter implements IExceptionFormatter {\n  private colorSupport = true\n\n  /**\n   * Create a new ExceptionFormatter instance\n   * @param options Options for the formatter\n   */\n  constructor(options: { colorSupport?: boolean } = {}) {\n    if (options.colorSupport !== undefined) {\n      this.colorSupport = options.colorSupport\n    }\n  }\n\n  /**\n   * Format an exception\n   * @param exception The exception to format\n   */\n  public async format(exception: Error): Promise<string> {\n    const message = exception.message\n    const name = exception.name\n    const stack = await this.getStackTrace(exception)\n\n    // Format the exception\n    let formatted = `${name}: ${message}\\n${stack}`\n\n    // Add color if enabled\n    if (this.colorSupport) {\n      formatted = `%c${formatted}`\n      // Note: In a browser environment, this would be used with console.log\n      // console.log(formatted, \"color: #FF0000\")\n    }\n\n    return formatted\n  }\n\n  /**\n   * Get the stack trace from an exception\n   * @param exception The exception to get the stack trace from\n   */\n  public async getStackTrace(exception: Error): Promise<string> {\n    // Use stacktrace-js to get a formatted stack trace\n    try {\n      const stackFrames = await StackTrace.fromError(exception)\n      return this.formatStackFrames(stackFrames)\n    } catch (error) {\n      // Fall back to the native stack trace\n      return exception.stack || ''\n    }\n  }\n\n  /**\n   * Format stack frames\n   * @param stackFrames The stack frames to format\n   */\n  private formatStackFrames(stackFrames: any[]): string {\n    return stackFrames\n      .map((frame) => {\n        const fileName = frame.fileName || '<anonymous>'\n        const lineNumber = frame.lineNumber || '?'\n        const columnNumber = frame.columnNumber || '?'\n        const functionName = frame.functionName || '<anonymous>'\n        return `    at ${functionName} (${fileName}:${lineNumber}:${columnNumber})`\n      })\n      .join('\\n')\n  }\n\n  /**\n   * Enable or disable color support\n   * @param enabled Whether color support is enabled\n   */\n  public setColorSupport(enabled: boolean): void {\n    this.colorSupport = enabled\n  }\n\n  /**\n   * Get whether color support is enabled\n   */\n  public isColorSupportEnabled(): boolean {\n    return this.colorSupport\n  }\n}\n","import { injectable } from 'inversify'\nimport { ServiceProvider } from '@pixielity/ts-application'\n\n// Import all interfaces with their namespaces\nimport { IContextManager } from '../interfaces/context/manager.interface'\nimport { IContextManagement } from '../interfaces/context/management.interface'\nimport { IEventDispatcher } from '../interfaces/events/event-dispatcher.interface'\nimport { IExceptionFormatter } from '../interfaces/utils/exception-formatter.interface'\nimport { IContextLogProcessor } from '../interfaces/processors/context-log-processor.interface'\n\n// Import all implementations\nimport { ContextManager } from '../context/manager'\nimport { ContextRepository } from '../context/repository'\nimport { ExceptionFormatter } from '../utils/exception-formatter'\nimport { ContextLogProcessor } from '../processors/context-log-processor'\n\n/**\n * ContextServiceProvider is an implementation of the IContextServiceProvider interface.\n * It provides methods for registering context management services in a dependency injection container.\n */\n@injectable()\nexport class ContextServiceProvider extends ServiceProvider {\n  /**\n   * Register the context management services in the container\n   */\n  public register(): void {\n    // Register context management services\n    this.app.bind<IContextManagement>(IContextManagement.$).to(ContextRepository).inSingletonScope()\n\n    // Register context log processor\n    this.app\n      .bind<IContextLogProcessor>(IContextLogProcessor.$)\n      .to(ContextLogProcessor)\n      .inSingletonScope()\n\n    // Register utility services\n    this.app.bind<IContextManager>(IContextManager.$).to(ContextManager).inSingletonScope()\n    this.app\n      .bind<IExceptionFormatter>(IExceptionFormatter.$)\n      .to(ExceptionFormatter)\n      .inSingletonScope()\n  }\n\n  /**\n   * Boot the context management services\n   */\n  public boot(): void {\n    // Get the context repository\n    const contextRepository = this.app.make<IContextManagement>(IContextManagement.$)\n\n    // Get the context log processor\n    const contextLogProcessor = this.app.make<IContextLogProcessor>(IContextLogProcessor.$)\n\n    // Set up event listeners for context events\n    const eventDispatcher = this.app.make<IEventDispatcher>(IEventDispatcher.$)\n\n    // Add default context values if needed\n    contextRepository.add('app', 'ts-logger')\n    contextRepository.add('startTime', new Date().toISOString())\n  }\n}\n","import { injectable } from 'inversify'\nimport { ServiceProvider } from '@pixielity/ts-application'\n\n// Import all interfaces\nimport * as interfaces from '../interfaces'\n\n// Import all handlers\nimport * as handlers from '../handlers'\n\n// Import all formatterrs\nimport * as formatters from '../formatters'\n\n// Import all channels\nimport * as channels from '../channels'\n\nimport { Logger } from '../logger'\nimport { LogManager } from '../manager'\nimport { EventDispatcher } from '../events/event-dispatcher'\nimport { MessagePlaceholderProcessor } from '../processors/message-placeholder-processor'\n\n/**\n * LogServiceProvider is an implementation of the ILogServiceProvider interface.\n * It provides methods for registering logging services in a dependency injection container.\n */\n@injectable()\nexport class LogServiceProvider extends ServiceProvider {\n  /**\n   * Register all logging services, channels, handlers, formatters, and processors\n   */\n  public register(): void {\n    // Register the event dispatcher service as a singleton\n    this.app\n      .bind<interfaces.IEventDispatcher>(interfaces.IEventDispatcher.$)\n      .to(EventDispatcher)\n      .inSingletonScope()\n\n    // Register the log manager as a singleton\n    this.app\n      .bind<interfaces.ILogManager>(interfaces.ILogManager.$)\n      .to(LogManager)\n      .inSingletonScope()\n\n    // Register the main logging service\n    this.app.bind<interfaces.ILoggingService>(interfaces.ILoggingService.$).to(Logger)\n\n    // Register logging channels\n    this.app.bind<interfaces.IStackChannel>(interfaces.IStackChannel.$).to(channels.StackChannel) // StackChannel for handling multiple handlers\n\n    this.app.bind<interfaces.ISingleChannel>(interfaces.ISingleChannel.$).to(channels.SingleChannel) // SingleChannel for one-handler logs\n\n    // Register log handlers\n\n    this.app.bind<interfaces.ILogHandler>(interfaces.ILogHandler.$).to(handlers.ConsoleHandler) // Default log handler for all logs\n\n    this.app\n      .bind<interfaces.IConsoleHandler>(interfaces.IConsoleHandler.$)\n      .to(handlers.ConsoleHandler) // Console-specific handler\n\n    this.app\n      .bind<interfaces.ILocalStorageHandler>(interfaces.ILocalStorageHandler.$)\n      .to(handlers.LocalStorageHandler) // Handler to write logs to localStorage\n\n    this.app\n      .bind<interfaces.IIndexedDBHandler>(interfaces.IIndexedDBHandler.$)\n      .to(handlers.IndexedDBHandler) // Handler to persist logs in IndexedDB\n\n    this.app.bind<interfaces.IHttpHandler>(interfaces.IHttpHandler.$).to(handlers.HttpHandler) // Handler to send logs over HTTP\n\n    this.app\n      .bind<interfaces.ISlackWebhookHandler>(interfaces.ISlackWebhookHandler.$)\n      .to(handlers.SlackWebhookHandler) // Handler to post logs to Slack via webhook\n\n    this.app.bind<interfaces.ISyslogHandler>(interfaces.ISyslogHandler.$).to(handlers.SyslogHandler) // Handler for syslog-style logging (remote server)\n\n    this.app\n      .bind<interfaces.IErrorLogHandler>(interfaces.IErrorLogHandler.$)\n      .to(handlers.ErrorLogHandler) // Specialized handler for error logs\n\n    this.app\n      .bind<interfaces.IFingersCrossedHandler>(interfaces.IFingersCrossedHandler.$)\n      .to(handlers.FingersCrossedHandler) // Conditional handler that triggers on log threshold\n\n    // Register formatters\n\n    this.app.bind<interfaces.ILogFormatter>(interfaces.ILogFormatter.$).to(formatters.LineFormatter) // Default formatter (line-based format)\n\n    this.app\n      .bind<interfaces.ILineFormatter>(interfaces.ILineFormatter.$)\n      .to(formatters.LineFormatter) // LineFormatter implementation\n\n    this.app\n      .bind<interfaces.IJsonFormatter>(interfaces.IJsonFormatter.$)\n      .to(formatters.JsonFormatter) // Formatter to serialize logs as JSON\n\n    this.app\n      .bind<interfaces.ISimpleFormatter>(interfaces.ISimpleFormatter.$)\n      .to(formatters.SimpleFormatter) // Simple human-readable format\n\n    // Register processors\n\n    this.app\n      .bind<interfaces.ILogProcessor>(interfaces.ILogProcessor.$)\n      .to(MessagePlaceholderProcessor) // Default processor for placeholders\n\n    this.app\n      .bind<interfaces.IMessagePlaceholderProcessor>(interfaces.IMessagePlaceholderProcessor.$)\n      .to(MessagePlaceholderProcessor) // Specific binding for message formatting\n  }\n}\n","/**\n * Check if a value is an object\n * @param value The value to check\n */\nexport function isObject(value: any): boolean {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Check if a value is a string\n * @param value The value to check\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if a value is a number\n * @param value The value to check\n */\nexport function isNumber(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if a value is a boolean\n * @param value The value to check\n */\nexport function isBoolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if a value is a function\n * @param value The value to check\n */\nexport function isFunction(value: any): boolean {\n  return typeof value === 'function'\n}\n\n/**\n * Check if a value is undefined\n * @param value The value to check\n */\nexport function isUndefined(value: any): boolean {\n  return typeof value === 'undefined'\n}\n\n/**\n * Check if a value is null\n * @param value The value to check\n */\nexport function isNull(value: any): boolean {\n  return value === null\n}\n\n/**\n * Check if a value is null or undefined\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: any): boolean {\n  return isNull(value) || isUndefined(value)\n}\n\n/**\n * Check if a value is empty\n * @param value The value to check\n */\nexport function isEmpty(value: any): boolean {\n  if (isNullOrUndefined(value)) {\n    return true\n  }\n  if (isString(value) || Array.isArray(value)) {\n    return value.length === 0\n  }\n  if (isObject(value)) {\n    return Object.keys(value).length === 0\n  }\n  return false\n}\n\n/**\n * Merge objects\n * @param target The target object\n * @param sources The source objects\n */\nexport function merge(target: any, ...sources: any[]): any {\n  if (!sources.length) {\n    return target\n  }\n\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} })\n        }\n        merge(target[key], source[key])\n      } else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return merge(target, ...sources)\n}\n"]}